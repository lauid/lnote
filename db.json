{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/codis-image.png","path":"images/codis-image.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"a5991bb3598c5d934bd97e3bc4ed14b71ebf1e62","modified":1501864276000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1501862705000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1501862705000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1501862705000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1501862705000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1501862705000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1501862705000},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1501862705000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1501862705000},{"_id":"themes/next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1501862705000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1501862705000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1501862705000},{"_id":"themes/next/_config.yml","hash":"4720fa68d674830c868e81c5096235d17ec9dab5","modified":1528270634000},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1501862705000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1501862705000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1501862705000},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1501862705000},{"_id":"source/_posts/Hot-Content.md","hash":"832b7433d87f0de36f140df0b2f33c524ec8a271","modified":1502765821000},{"_id":"source/_posts/Good-Content.md","hash":"61889ab6bcb1bf7dc9f8e19ddf07846120dcb03e","modified":1501866321000},{"_id":"source/_posts/codis3.2遍历指定slot所有key.md","hash":"d7459f110a9e1ee298e590f1f1d7956dc91ca3e6","modified":1525319827000},{"_id":"source/_posts/codis2-x升级到codis3-2.md","hash":"66be30dd87a9b108d678625c74c4e2637927f6f2","modified":1525928790000},{"_id":"source/_posts/docker-php7-redis.md","hash":"0dcd531abc9305f2be5c3c224cbe8d4e5578ab4e","modified":1528270323000},{"_id":"source/_posts/codis3-2后台展示一些说明.md","hash":"c3838599d002d00e2eee3e03845cd883ee80ee70","modified":1522634541000},{"_id":"source/_posts/cap解释.md","hash":"cb767d9bc891350158575b8e05f9ccc75bc171bc","modified":1522387786000},{"_id":"source/_posts/elasticsearch5-0升级问题.md","hash":"0025cd667f6a2425aee575f695540e3a43464938","modified":1502765821000},{"_id":"source/_posts/git提交规范小工具Commitizen.md","hash":"9d86fd5aaad148d466c85a68a1c851ce246ed7cb","modified":1524471262000},{"_id":"source/_posts/explain详解-md.md","hash":"2af61a4cebc74d19658a3bf0d4331ddf1edd8898","modified":1502765821000},{"_id":"source/_posts/codis主从同步之后显示不一致问题.md","hash":"6954e9e602ceea3bd976259e2477106b0c1f2187","modified":1522636132000},{"_id":"source/_posts/hello-world.md","hash":"95ae477ec70f5f8cd722c47705e34f8e1a917962","modified":1502765821000},{"_id":"source/_posts/iterm-lrzsz.md","hash":"c3e5b9f79364891623fdb124a53d67cc5734a62e","modified":1521599440000},{"_id":"source/_posts/hexo-install.md","hash":"46b0de6c4939554ea9fecbaa893a23d8c4b0afb0","modified":1521600344000},{"_id":"source/_posts/hexo-blog.md","hash":"c44bcf68608b52d5d45fe00ffd26d101002f0c89","modified":1521600001000},{"_id":"source/_posts/note.md","hash":"9ecb518ad11d7fd787926e47d626e7bc988c3bbd","modified":1502765821000},{"_id":"source/_posts/kubernetes安装.md","hash":"578684fbf8b8f71354f0e33496d51f248db717c7","modified":1521599690000},{"_id":"source/_posts/number-bit.md","hash":"5aadfa1466fcbcbacf26d72c5dfe7cb18e3fa2e9","modified":1502765821000},{"_id":"source/_posts/php-extension.md","hash":"8994c41f8fa4c03e187079c6dab3e11ae01b8413","modified":1502765821000},{"_id":"source/_posts/mysql术语摘要.md","hash":"bd733c3cd8d089a3f4191b20df7824c32de949f0","modified":1525417594000},{"_id":"source/_posts/php的yield和生成器.md","hash":"a4568d68db27f3c38bb435e572738c8942119c49","modified":1502765821000},{"_id":"source/_posts/php迭代器.md","hash":"f683721c1df73fd637fcca1bf0ece0ba24945c20","modified":1502765821000},{"_id":"source/_posts/redis和memcached.md","hash":"e79d1c585f84260e08ee44ab9d0fa4747432dd5c","modified":1502765821000},{"_id":"source/_posts/su指定用户执行命令.md","hash":"845c18ea79a06a841a3fcb11eedab251c2f424c8","modified":1521599668000},{"_id":"source/_posts/rpm打包.md","hash":"dd65cb06df27384d0d323553f181669bf1e7e98b","modified":1526009568000},{"_id":"source/_posts/一致性hash算法.md","hash":"1dc6bfe30d1b5b75614e08a31152009f25b3e377","modified":1502765821000},{"_id":"source/_posts/策略模式.md","hash":"22bf5cb81cc694e94ead388b40cd556ce783187f","modified":1502765821000},{"_id":"source/_posts/推荐系统实战-读书笔记.md","hash":"4631ce47c0967b4f3b0e326289aa58c9dd1366ff","modified":1522388822000},{"_id":"source/_posts/面向对象设计的SOLID原则.md","hash":"1908ae56388489ae38eddd3c1c82e40d69996a54","modified":1502765821000},{"_id":"source/_posts/systemctl.md","hash":"4ce581422ea297b88d1489bdee91ba5afb125f1f","modified":1526866993000},{"_id":"source/categories/index.md","hash":"a586c4c30e53698193dc37be8e7869631a3aef04","modified":1525319163000},{"_id":"source/tags/index.md","hash":"1f5ad32875d7fef20e7636dac1227af009328c2b","modified":1525318843000},{"_id":"source/images/codis-image.png","hash":"c846750c7587f96037578c3a2255e5651570f7e0","modified":1522635961000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1501862705000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1501862705000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1501862682000},{"_id":"themes/next/.git/index","hash":"43a53d09ae0e19ec3afd2a493132ed6c44ebf72b","modified":1501866859000},{"_id":"themes/next/.git/packed-refs","hash":"5f309e82950655c7c0850641ea7b096d2ebd23d7","modified":1501862705000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1501862705000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b56c01cdfc6ee7ffea8a8a9fa149263f368caef6","modified":1501862705000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"37bd0ec1d655c601946fc5f5ac2fe8ed1e529b77","modified":1501862705000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1501862705000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1501862705000},{"_id":"themes/next/layout/_layout.swig","hash":"06b1eab2e00273e0b94bd32dc682bd92c1e0a747","modified":1501862705000},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1501862705000},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1501862705000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1501862705000},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1501862705000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1501862705000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1501862705000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1501862705000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1501862705000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1501862705000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1501862705000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1501862705000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1501862705000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1501862705000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1501862705000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1501862705000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1501862705000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1501862705000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1501862705000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1501862705000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1501862705000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1501862705000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1501862705000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1501862705000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501862705000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1501862682000},{"_id":"themes/next/.git/logs/HEAD","hash":"ec734e1cf7f1a7f2d43364a62527fecdd4ff7118","modified":1501862705000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1501862682000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1501862682000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1501862682000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1501862682000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1501862682000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1501862682000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1501862682000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1501862682000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1501862682000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1501862705000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1501862705000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1501862705000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1501862705000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1501862705000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1501862705000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1501862705000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1501862705000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1501862705000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1501862705000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1501862705000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1501862705000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1501862705000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1501862705000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1501862705000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1501862705000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1501862705000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1501862705000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1501862705000},{"_id":"themes/next/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1501862705000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1501862705000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1501862705000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1501862705000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1501862705000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1501862705000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1501862705000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1501862705000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1501862705000},{"_id":"themes/next/layout/_macro/post.swig","hash":"911363776867d9523a3e322cdf591d49cd166403","modified":1501862705000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"faa7886ccf986890cd776f4e9d70cb89fe9fda5f","modified":1501862705000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1501862705000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1501862705000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1501862705000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1501862705000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1501862705000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1501862705000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1501862705000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1501862705000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1501862705000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1501862705000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1501862705000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1501862705000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1501862705000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501862705000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1501862705000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501862705000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1501862705000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1501862705000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501862705000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501862705000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501862705000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501862705000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501862705000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501862705000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501862705000},{"_id":"themes/next/.git/refs/heads/master","hash":"75173e2dd18a6221ff84742ff53d01ac5c6e04b0","modified":1501862705000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1501862705000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1501862705000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1501862705000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1501862705000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1501862705000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1501862705000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1501862705000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1501862705000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1501862705000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1501862705000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1501862705000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1501862705000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1501862705000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1501862705000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1501862705000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1501862705000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1501862705000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1501862705000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1501862705000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1501862705000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1501862705000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1501862705000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1501862705000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1501862705000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1501862705000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1501862705000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1501862705000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1501862705000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1501862705000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1501862705000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1501862705000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1501862705000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1501862705000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1501862705000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"8a3058065f95397ea1794e8aa699d560535ca23b","modified":1525416768000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1501862705000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"eaedfaf06dae94ba77a8f4893e2e434bf8859bac","modified":1501862705000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1501862705000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1501862705000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1501862705000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1501862705000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1501862705000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1501862705000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1501862705000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1501862705000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1501862705000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1501862705000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1501862705000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1501862705000},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1501862705000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1501862705000},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1501862705000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1501862705000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1501862705000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1501862705000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1501862705000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1501862705000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1501862705000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1501862705000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1501862705000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1501862705000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1501862705000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1501862705000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1501862705000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1501862705000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1501862705000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1501862705000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1501862705000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1501862705000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1501862705000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1501862705000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1501862705000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1501862705000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1501862705000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1501862705000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1501862705000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1501862705000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1501862705000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1501862705000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1501862705000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1501862705000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1501862705000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1501862705000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1501862705000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1501862705000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1501862705000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1501862705000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1501862705000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1501862705000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1501862705000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1501862705000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1501862705000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1501862705000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1501862705000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1501862705000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1501862705000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1501862705000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"ec734e1cf7f1a7f2d43364a62527fecdd4ff7118","modified":1501862705000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1501862705000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1501862705000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1501862705000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1501862705000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2915df7152ea095a6290ef69157fd67669e0e793","modified":1501862705000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1501862705000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1501862705000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1501862705000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1501862705000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1501862705000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1501862705000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1501862705000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1501862705000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1501862705000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1501862705000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1501862705000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1501862705000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1501862705000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1501862705000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1501862705000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1501862705000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1501862705000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1501862705000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1501862705000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1501862705000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1501862705000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1501862705000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1501862705000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1501862705000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1501862705000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1501862705000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1501862705000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1501862705000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1501862705000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1501862705000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1501862705000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1501862705000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1501862705000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1501862705000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1501862705000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1501862705000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1501862705000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1501862705000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1501862705000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1501862705000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1501862705000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1501862705000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1501862705000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1501862705000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1501862705000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1501862705000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1501862705000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1501862705000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"ec734e1cf7f1a7f2d43364a62527fecdd4ff7118","modified":1501862705000},{"_id":"themes/next/.git/objects/pack/pack-d4a4c67f3637bdbc3143099b2114d43686b6a60c.idx","hash":"7f733ce2fadab79edab5a8cdf693fbfa93ca11ca","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"51eca243220cf57133a4becae9b78514bcfdc723","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1501862705000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1501862705000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1501862705000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1501862705000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1501862705000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1501862705000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1501862705000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1501862705000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1501862705000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1501862705000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1501862705000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1501862705000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1501862705000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1501862705000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1501862705000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1501862705000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1501862705000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1501862705000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1501862705000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1501862705000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1501862705000},{"_id":"themes/next/.git/objects/pack/pack-d4a4c67f3637bdbc3143099b2114d43686b6a60c.pack","hash":"8c64a08076a998d8336e59314500949d701ceb16","modified":1501862705000},{"_id":"themes/next/source/images/favicon.ico","hash":"be0c28e1e3b289adea615e7be9b2666142dee5bc","modified":1528270551000}],"Category":[{"name":"php","_id":"cji2sk9cu000891wqf6r428dy"},{"name":"运维","_id":"cji2sk9d0000e91wqf9y9oo01"},{"name":"分布式","_id":"cji2sk9dr000q91wqkifarfvc"},{"name":"tools","_id":"cji2sk9dx000w91wq9bfs3k0c"},{"name":"读书笔记","_id":"cji2sk9ez002291wqo8srtxq8"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","date":"2017-08-04T16:31:16.000Z","updated":"2017-08-04T16:31:16.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cji2sk9ad000091wqb8cian9o","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n"},{"title":"","date":"2018-03-21T02:37:51.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: \ndate: 2018-03-21 10:37:51\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-05-03T03:46:03.000Z","path":"categories/index.html","layout":"page","_id":"cji2sk9cd000291wqzt4cs5mk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"","type":"tags","date":"2017-08-04T17:31:24.000Z","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: \ntype: \"tags\"\ndate: 2017-08-05 01:31:24\ncomments: false\n---\n","updated":"2018-05-03T03:40:43.000Z","path":"tags/index.html","layout":"page","_id":"cji2sk9ci000491wq5das4qxy","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Good Content","date":"2017-01-04T14:12:41.000Z","_content":"[免费的编程中文书籍索引](https://linux.cn/article-3661-1.html)\n[深入浅出 Redis client/server交互流程](http://mp.weixin.qq.com/s/M_8JYKounmZWHPOXVJFNuQ)\n[在PHP中使用协程实现多任务调度](http://www.laruence.com/2015/05/28/3038.html)\n[Yac (Yet Another Cache) – 无锁共享内存Cache](http://www.laruence.com/2013/03/18/2846.html)\n[一个小玩意PHP-Valgrind的介绍](http://www.laruence.com/2013/08/14/2899.html)\n[日请求过亿的Web系统PHP7升级实践](http://geek.csdn.net/news/detail/77849)\n[PHP扩展开发与内核应用](http://www.cunmou.com/phpbook/index.md)\n[深入理解PHP内核](http://www.php-internals.com/)\n[PHP扩展开发：快速入门](http://blog.csdn.net/micahriven/article/details/11678607)\n[swoole](http://wiki.swoole.com/wiki/page/p-perf.html)\n[构建C1000K的服务器(1)– 基础](http://www.ideawu.net/blog/archives/740.html)\n","source":"_posts/Hot-Content.md","raw":"---\ntitle: Good Content \ndate: 2017-01-04 22:12:41\ntags: content \n---\n[免费的编程中文书籍索引](https://linux.cn/article-3661-1.html)\n[深入浅出 Redis client/server交互流程](http://mp.weixin.qq.com/s/M_8JYKounmZWHPOXVJFNuQ)\n[在PHP中使用协程实现多任务调度](http://www.laruence.com/2015/05/28/3038.html)\n[Yac (Yet Another Cache) – 无锁共享内存Cache](http://www.laruence.com/2013/03/18/2846.html)\n[一个小玩意PHP-Valgrind的介绍](http://www.laruence.com/2013/08/14/2899.html)\n[日请求过亿的Web系统PHP7升级实践](http://geek.csdn.net/news/detail/77849)\n[PHP扩展开发与内核应用](http://www.cunmou.com/phpbook/index.md)\n[深入理解PHP内核](http://www.php-internals.com/)\n[PHP扩展开发：快速入门](http://blog.csdn.net/micahriven/article/details/11678607)\n[swoole](http://wiki.swoole.com/wiki/page/p-perf.html)\n[构建C1000K的服务器(1)– 基础](http://www.ideawu.net/blog/archives/740.html)\n","slug":"Hot-Content","published":1,"updated":"2017-08-15T02:57:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9c7000191wqt18dwoer","content":"<p><a href=\"https://linux.cn/article-3661-1.html\" target=\"_blank\" rel=\"external\">免费的编程中文书籍索引</a><br><a href=\"http://mp.weixin.qq.com/s/M_8JYKounmZWHPOXVJFNuQ\" target=\"_blank\" rel=\"external\">深入浅出 Redis client/server交互流程</a><br><a href=\"http://www.laruence.com/2015/05/28/3038.html\" target=\"_blank\" rel=\"external\">在PHP中使用协程实现多任务调度</a><br><a href=\"http://www.laruence.com/2013/03/18/2846.html\" target=\"_blank\" rel=\"external\">Yac (Yet Another Cache) – 无锁共享内存Cache</a><br><a href=\"http://www.laruence.com/2013/08/14/2899.html\" target=\"_blank\" rel=\"external\">一个小玩意PHP-Valgrind的介绍</a><br><a href=\"http://geek.csdn.net/news/detail/77849\" target=\"_blank\" rel=\"external\">日请求过亿的Web系统PHP7升级实践</a><br><a href=\"http://www.cunmou.com/phpbook/index.md\" target=\"_blank\" rel=\"external\">PHP扩展开发与内核应用</a><br><a href=\"http://www.php-internals.com/\" target=\"_blank\" rel=\"external\">深入理解PHP内核</a><br><a href=\"http://blog.csdn.net/micahriven/article/details/11678607\" target=\"_blank\" rel=\"external\">PHP扩展开发：快速入门</a><br><a href=\"http://wiki.swoole.com/wiki/page/p-perf.html\" target=\"_blank\" rel=\"external\">swoole</a><br><a href=\"http://www.ideawu.net/blog/archives/740.html\" target=\"_blank\" rel=\"external\">构建C1000K的服务器(1)– 基础</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://linux.cn/article-3661-1.html\" target=\"_blank\" rel=\"external\">免费的编程中文书籍索引</a><br><a href=\"http://mp.weixin.qq.com/s/M_8JYKounmZWHPOXVJFNuQ\" target=\"_blank\" rel=\"external\">深入浅出 Redis client/server交互流程</a><br><a href=\"http://www.laruence.com/2015/05/28/3038.html\" target=\"_blank\" rel=\"external\">在PHP中使用协程实现多任务调度</a><br><a href=\"http://www.laruence.com/2013/03/18/2846.html\" target=\"_blank\" rel=\"external\">Yac (Yet Another Cache) – 无锁共享内存Cache</a><br><a href=\"http://www.laruence.com/2013/08/14/2899.html\" target=\"_blank\" rel=\"external\">一个小玩意PHP-Valgrind的介绍</a><br><a href=\"http://geek.csdn.net/news/detail/77849\" target=\"_blank\" rel=\"external\">日请求过亿的Web系统PHP7升级实践</a><br><a href=\"http://www.cunmou.com/phpbook/index.md\" target=\"_blank\" rel=\"external\">PHP扩展开发与内核应用</a><br><a href=\"http://www.php-internals.com/\" target=\"_blank\" rel=\"external\">深入理解PHP内核</a><br><a href=\"http://blog.csdn.net/micahriven/article/details/11678607\" target=\"_blank\" rel=\"external\">PHP扩展开发：快速入门</a><br><a href=\"http://wiki.swoole.com/wiki/page/p-perf.html\" target=\"_blank\" rel=\"external\">swoole</a><br><a href=\"http://www.ideawu.net/blog/archives/740.html\" target=\"_blank\" rel=\"external\">构建C1000K的服务器(1)– 基础</a></p>\n"},{"title":"Good Content","date":"2017-08-04T16:56:44.000Z","_content":"[免费的编程中文书籍索引](https://linux.cn/article-3661-1.html)\n\n[深入浅出 Redis client/server交互流程](http://mp.weixin.qq.com/s/M_8JYKounmZWHPOXVJFNuQ)\n\n[ 在PHP中使用协程实现多任务调度 ](http://www.laruence.com/2015/05/28/3038.html)\n\n[ Yac (Yet Another Cache) – 无锁共享内存Cache ](http://www.laruence.com/2013/03/18/2846.html)\n\n[ 一个小玩意PHP-Valgrind的介绍 ](http://www.laruence.com/2013/08/14/2899.html)\n\n[ 日请求过亿的Web系统PHP7升级实践 ](http://geek.csdn.net/news/detail/77849)\n\n[ PHP扩展开发与内核应用 ](http://www.cunmou.com/phpbook/index.md)\n\n[ 深入理解PHP内核 ](http://www.php-internals.com/)\n\n[ PHP扩展开发：快速入门 ](http://blog.csdn.net/micahriven/article/details/11678607)\n\n[swoole](http://wiki.swoole.com/wiki/page/p-perf.html)\n\n[构建C1000K的服务器(1)– 基础](http://www.ideawu.net/blog/archives/740.html)\n","source":"_posts/Good-Content.md","raw":"---\ntitle: Good Content\ndate: 2017-08-05 00:56:44\ntags: note\n---\n[免费的编程中文书籍索引](https://linux.cn/article-3661-1.html)\n\n[深入浅出 Redis client/server交互流程](http://mp.weixin.qq.com/s/M_8JYKounmZWHPOXVJFNuQ)\n\n[ 在PHP中使用协程实现多任务调度 ](http://www.laruence.com/2015/05/28/3038.html)\n\n[ Yac (Yet Another Cache) – 无锁共享内存Cache ](http://www.laruence.com/2013/03/18/2846.html)\n\n[ 一个小玩意PHP-Valgrind的介绍 ](http://www.laruence.com/2013/08/14/2899.html)\n\n[ 日请求过亿的Web系统PHP7升级实践 ](http://geek.csdn.net/news/detail/77849)\n\n[ PHP扩展开发与内核应用 ](http://www.cunmou.com/phpbook/index.md)\n\n[ 深入理解PHP内核 ](http://www.php-internals.com/)\n\n[ PHP扩展开发：快速入门 ](http://blog.csdn.net/micahriven/article/details/11678607)\n\n[swoole](http://wiki.swoole.com/wiki/page/p-perf.html)\n\n[构建C1000K的服务器(1)– 基础](http://www.ideawu.net/blog/archives/740.html)\n","slug":"Good-Content","published":1,"updated":"2017-08-04T17:05:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9cg000391wqsovj9d03","content":"<p><a href=\"https://linux.cn/article-3661-1.html\" target=\"_blank\" rel=\"external\">免费的编程中文书籍索引</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s/M_8JYKounmZWHPOXVJFNuQ\" target=\"_blank\" rel=\"external\">深入浅出 Redis client/server交互流程</a></p>\n<p><a href=\"http://www.laruence.com/2015/05/28/3038.html\" target=\"_blank\" rel=\"external\"> 在PHP中使用协程实现多任务调度 </a></p>\n<p><a href=\"http://www.laruence.com/2013/03/18/2846.html\" target=\"_blank\" rel=\"external\"> Yac (Yet Another Cache) – 无锁共享内存Cache </a></p>\n<p><a href=\"http://www.laruence.com/2013/08/14/2899.html\" target=\"_blank\" rel=\"external\"> 一个小玩意PHP-Valgrind的介绍 </a></p>\n<p><a href=\"http://geek.csdn.net/news/detail/77849\" target=\"_blank\" rel=\"external\"> 日请求过亿的Web系统PHP7升级实践 </a></p>\n<p><a href=\"http://www.cunmou.com/phpbook/index.md\" target=\"_blank\" rel=\"external\"> PHP扩展开发与内核应用 </a></p>\n<p><a href=\"http://www.php-internals.com/\" target=\"_blank\" rel=\"external\"> 深入理解PHP内核 </a></p>\n<p><a href=\"http://blog.csdn.net/micahriven/article/details/11678607\" target=\"_blank\" rel=\"external\"> PHP扩展开发：快速入门 </a></p>\n<p><a href=\"http://wiki.swoole.com/wiki/page/p-perf.html\" target=\"_blank\" rel=\"external\">swoole</a></p>\n<p><a href=\"http://www.ideawu.net/blog/archives/740.html\" target=\"_blank\" rel=\"external\">构建C1000K的服务器(1)– 基础</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://linux.cn/article-3661-1.html\" target=\"_blank\" rel=\"external\">免费的编程中文书籍索引</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s/M_8JYKounmZWHPOXVJFNuQ\" target=\"_blank\" rel=\"external\">深入浅出 Redis client/server交互流程</a></p>\n<p><a href=\"http://www.laruence.com/2015/05/28/3038.html\" target=\"_blank\" rel=\"external\"> 在PHP中使用协程实现多任务调度 </a></p>\n<p><a href=\"http://www.laruence.com/2013/03/18/2846.html\" target=\"_blank\" rel=\"external\"> Yac (Yet Another Cache) – 无锁共享内存Cache </a></p>\n<p><a href=\"http://www.laruence.com/2013/08/14/2899.html\" target=\"_blank\" rel=\"external\"> 一个小玩意PHP-Valgrind的介绍 </a></p>\n<p><a href=\"http://geek.csdn.net/news/detail/77849\" target=\"_blank\" rel=\"external\"> 日请求过亿的Web系统PHP7升级实践 </a></p>\n<p><a href=\"http://www.cunmou.com/phpbook/index.md\" target=\"_blank\" rel=\"external\"> PHP扩展开发与内核应用 </a></p>\n<p><a href=\"http://www.php-internals.com/\" target=\"_blank\" rel=\"external\"> 深入理解PHP内核 </a></p>\n<p><a href=\"http://blog.csdn.net/micahriven/article/details/11678607\" target=\"_blank\" rel=\"external\"> PHP扩展开发：快速入门 </a></p>\n<p><a href=\"http://wiki.swoole.com/wiki/page/p-perf.html\" target=\"_blank\" rel=\"external\">swoole</a></p>\n<p><a href=\"http://www.ideawu.net/blog/archives/740.html\" target=\"_blank\" rel=\"external\">构建C1000K的服务器(1)– 基础</a></p>\n"},{"title":"codis3.2遍历指定slot所有key","date":"2018-04-26T01:37:24.000Z","_content":"\ncodis3.2不支持KEYS\\* 命令，而官方有个SLOTSSCAN命令，可以替代。\n\nphp Demo代码\n\n<!--more-->\n\n```php\n\n$host = '127.0.0.1';\n$port = 4379;\n$redis = new Redis();\n$redis->connect( $host, $port );\n#####SLOTSSCAN slotnum cursor [COUNT count]\n$slotId = 579 \n$cursor = 0;\n$count = 20;\n$i = 0;\ndo\n{\n\tlist( $cursor, $keys ) = $redis->rawCommand( 'SLOTSSCAN', $slotId, $cursor, 'COUNT', $count );\n\tprintf( 'cursor:%s, keys:%s' . PHP_EOL, $cursor, var_export( $keys, true ) );\n}while( $cursor > 0 );\n\n```\n\nPS.集群所有proxy和server必须在codis3版本以上才支持\n","source":"_posts/codis3.2遍历指定slot所有key.md","raw":"---\ntitle: codis3.2遍历指定slot所有key\ndate: 2018-04-26 09:37:24\ntags: codis\ncategories: php\n---\n\ncodis3.2不支持KEYS\\* 命令，而官方有个SLOTSSCAN命令，可以替代。\n\nphp Demo代码\n\n<!--more-->\n\n```php\n\n$host = '127.0.0.1';\n$port = 4379;\n$redis = new Redis();\n$redis->connect( $host, $port );\n#####SLOTSSCAN slotnum cursor [COUNT count]\n$slotId = 579 \n$cursor = 0;\n$count = 20;\n$i = 0;\ndo\n{\n\tlist( $cursor, $keys ) = $redis->rawCommand( 'SLOTSSCAN', $slotId, $cursor, 'COUNT', $count );\n\tprintf( 'cursor:%s, keys:%s' . PHP_EOL, $cursor, var_export( $keys, true ) );\n}while( $cursor > 0 );\n\n```\n\nPS.集群所有proxy和server必须在codis3版本以上才支持\n","slug":"codis3.2遍历指定slot所有key","published":1,"updated":"2018-05-03T03:57:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9cn000691wqh6hkfvr0","content":"<p>codis3.2不支持KEYS* 命令，而官方有个SLOTSSCAN命令，可以替代。</p>\n<p>php Demo代码</p>\n<a id=\"more\"></a>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$host = <span class=\"string\">'127.0.0.1'</span>;</div><div class=\"line\">$port = <span class=\"number\">4379</span>;</div><div class=\"line\">$redis = <span class=\"keyword\">new</span> Redis();</div><div class=\"line\">$redis-&gt;connect( $host, $port );</div><div class=\"line\"><span class=\"comment\">#####SLOTSSCAN slotnum cursor [COUNT count]</span></div><div class=\"line\">$slotId = <span class=\"number\">579</span> </div><div class=\"line\">$cursor = <span class=\"number\">0</span>;</div><div class=\"line\">$count = <span class=\"number\">20</span>;</div><div class=\"line\">$i = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">list</span>( $cursor, $keys ) = $redis-&gt;rawCommand( <span class=\"string\">'SLOTSSCAN'</span>, $slotId, $cursor, <span class=\"string\">'COUNT'</span>, $count );</div><div class=\"line\">\tprintf( <span class=\"string\">'cursor:%s, keys:%s'</span> . PHP_EOL, $cursor, var_export( $keys, <span class=\"keyword\">true</span> ) );</div><div class=\"line\">&#125;<span class=\"keyword\">while</span>( $cursor &gt; <span class=\"number\">0</span> );</div></pre></td></tr></table></figure>\n<p>PS.集群所有proxy和server必须在codis3版本以上才支持</p>\n","site":{"data":{}},"excerpt":"<p>codis3.2不支持KEYS* 命令，而官方有个SLOTSSCAN命令，可以替代。</p>\n<p>php Demo代码</p>","more":"<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$host = <span class=\"string\">'127.0.0.1'</span>;</div><div class=\"line\">$port = <span class=\"number\">4379</span>;</div><div class=\"line\">$redis = <span class=\"keyword\">new</span> Redis();</div><div class=\"line\">$redis-&gt;connect( $host, $port );</div><div class=\"line\"><span class=\"comment\">#####SLOTSSCAN slotnum cursor [COUNT count]</span></div><div class=\"line\">$slotId = <span class=\"number\">579</span> </div><div class=\"line\">$cursor = <span class=\"number\">0</span>;</div><div class=\"line\">$count = <span class=\"number\">20</span>;</div><div class=\"line\">$i = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">list</span>( $cursor, $keys ) = $redis-&gt;rawCommand( <span class=\"string\">'SLOTSSCAN'</span>, $slotId, $cursor, <span class=\"string\">'COUNT'</span>, $count );</div><div class=\"line\">\tprintf( <span class=\"string\">'cursor:%s, keys:%s'</span> . PHP_EOL, $cursor, var_export( $keys, <span class=\"keyword\">true</span> ) );</div><div class=\"line\">&#125;<span class=\"keyword\">while</span>( $cursor &gt; <span class=\"number\">0</span> );</div></pre></td></tr></table></figure>\n<p>PS.集群所有proxy和server必须在codis3版本以上才支持</p>"},{"title":"codis2.x升级到codis3.2","date":"2018-03-21T01:58:39.000Z","_content":"\n## step 1.配置迁移\n\nstep a.导出配置文件\n```\n/usr/local/codis3.2/bin/codis-admin --config-dump --product=apitest --zookeeper=10.0.0.40:2181 -1 | tee codis_v2.0.json\n```\n\n该命令会从 zookeeper 上拉取 /zk/codis/db_codis_v2.0 下全部的文件，并组织成 json 格式并输出。\n选项 -1 表示配置文件是 Codis 1.x 版本，缺省是 Codis 3.x 版本。\n\nstep b. 转换配置文件\n```\n/usr/local/codis3.2/bin/codis-admin --config-convert codis_v2.0.json | tee codis_v3.0.json\n```\n该命令会将 Codis 1.x 版本的配置文件中有效信息提取出来，并转成 Codis 3.x 版本的配置文件并输出。\n\nstep c. 更新配置文件\n注意：更新配置文件时，请确保 Codis 3.x 中该集群不存在，否则可能导致更新失败或者集群状态异常。\n```\nNEW_PRODUCT_NAME=\"apitet_codis3.2\"\nZOOKEEPER_ADDR=\"10.0.0.40:2181\"\n#/usr/local/codis3.2/bin/codis-admin --config-restore=codis_v3.0.json --product=$NEW_PRODUCT_NAME --zookeeper=$ZOOKEEPER_ADDR --confirm\n/usr/local/codis3.2/bin/codis-admin --config-restore=codis_v3.0.json --product=apitest_codis3.2 --zookeeper=10.0.0.40:2181 --confirm\n```\n\n<!--more-->\n## step 2.check新集群配置文件\n```\n/usr/local/zookeeper/bin/zkCli.sh -server 10.0.0.40:2181\nmkdir -p /home/config/codis3.2\nmkdir -p /home/logs/codis3.2\nmkdir -p /home/data/codis3.2\nchown -R codis:codis /home/config/codis3.2/\nchown -R codis:codis /home/data/codis3.2/\n```\n\n\n## step 3.codis-dashboard 生成默认的配置文件\n```\n/usr/local/codis3.2/bin/codis-dashboard --default-config | tee /home/config/codis3.2/dashboard.toml\n```\nPS. 修改其中相关配置:[coordinator_name=\"zookeeper\", coordinator_addr, product_name, admin_addr];\n\n\n\n## step 4.配置supervisor，并启动dashboard\n```\nnohup /usr/local/codis3.2/bin/codis-dashboard --ncpu=2 --config=/home/config/codis3.2/dashboard.toml --log=/home/logs/codis3.2/dashboard.log --log-level=WARN &\n```\n\n## step 5.生成codis-fe配置文件,check编辑\n配置文件codis.json可以手动编辑，也可以通过codis-admin从外部存储（这里是zookeeper）中拉取，如下操作：\n```\n/usr/local/codis3.2/bin/codis-admin --dashboard-list --zookeeper=10.0.0.40:2181 | tee /home/config/codis3.2/codis.json\n```\n\n## step 6.配置supervisor，启动codis-fe\n```\nnohup /usr/local/codis3.2/bin/codis-fe --ncpu=2 --log=/home/logs/codis3.2/fe.log --log-level=WARN --dashboard-list=/home/config/codis3.2/codis.json --listen=0.0.0.0:8080 &\n```\n\n\n## step 7.编辑codis-server配置文件\n## step 8.配置supervisor，启动codis-server, 添加到新集群做slave\n```\n/usr/local/codis3.2/bin/codis-server /home/config/codis3.2/codis-server-14369.conf\n```\nPS. mkdir [dir] ;\n    运行codis-server的当前用户，需要写权限「dir, /home/config/codis3.2/」,否则会导致主从同步失败;\n    测试redis-cli -h 10.0.0.40 -p 14369 ping, 否则无法加入到server-group;\n    #Opening the temp file needed for MASTER <-> SLAVE synchronization: Permission denied\n    #CONFIG REWRITE failed: Permission denied\n\n## step 9.codis-procxy 生成默认的配置文件:\n```\n/usr/local/codis3.2/bin/codis-proxy --default-config | tee /home/config/codis3.2/proxy.toml\n```\n\n## step 10. 配置supervisor，启动codis-proxy\n```\nnohup /usr/local/codis3.2/bin/codis-proxy --ncpu=2 --config=/home/config/codis3.2/proxy-19400.toml --log=/home/logs/codis3.2/proxy-19400.log --log-level=WARN &\n```\n\n## step 11. 集群添加codis-proxy\ncodis-proxy启动后，处于waiting状态，监听proxy_addr地址，但是不会accept连接，添加到集群并完成集群状态的同步，才能改变状态为online。添加的方法有以下两种：\n第一种：通过codis-fe添加，通过Add Proxy按钮，将admin_addr加入到集群中，如下图（具体操作要等到后面codis-fe启动后才可以）：\n第二种：通过codis-admin命令行工具添加，方法如下（添加3个proxy）：\n```\n/usr/local/codis3.2/bin/codis-admin --dashboard=127.0.0.1:18080 --create-proxy --addr 127.0.0.1:11080\n/usr/local/codis3.2/bin/codis-admin --dashboard=127.0.0.1:18080 --create-proxy -x 127.0.0.1:11081\n```\n其中–dashboard需要指定codis-dashboard的管理地址，–create-proxy指定为和codis-proxy的admin_addr地址,。添加过程中，codis-dashboard会完成如下一系列动作：\n1）获取proxy信息，对集群name以及auth进行验证，并将其信息写入到外部存储中；\n2）同步slots状态；\n3）标记proxy状态为online，此后proxy开始accept连接并开始提供服务；\nPS. 在添加codis-proxy的时候需要特别注意，这个地方容易出现各种问题，最好能一次性添加成功，不然就需要删除zookeeper数据了，然后重新开始。\n\n\n## step 12. 业务全部切换到新的codis-proxy,\n## step 13. 保证业务不再使用老集群proxy，可以check老集群后台的ops为0，之后，再promote新的codis-server为master, 完成升级\nPS. slave为了数据一致性，默认为只读。\n\n切换之后，就无法切换回来。codis2的server无法兼容codis3数据, 就是codis-server2为slave，codis3-server为master 无法兼容\n一般是低版本无法兼容高版本的 rdb 导致的。\n[21658] 21 Mar 18:53:32.735 # Can't handle RDB format version 7\n[21658] 21 Mar 18:53:32.735 # Fatal error loading the DB: Invalid argument. Exiting.\n\n\n## xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx其他常用操作\n##添加Redis Server Group（在集群中一台服务器上操作即可，也可以在面板图形界面操作)\n\n首先使用codis-admin工具创建组，按照上面的规划的，我们创建2个组即可：\n/usr/local/codis3.2/bin/codis-admin --dashboard=127.0.0.1:18080 --create-group --gid=1\n/usr/local/codis3.2/bin/codis-admin --dashboard=127.0.0.1:18080 --create-group --gid=2\n\n然后使用codis-admin工具给组添加Redis主机（2个主机为一个组）：\n/usr/local/codis3.2/bin/codis-admin --dashboard=127.0.0.1:18080 --group-add --gid=1 --addr=127.0.0.1:6379\n/usr/local/codis3.2/bin/codis-admin --dashboard=127.0.0.1:18081 --group-add --gid=1 --addr=127.0.0.1:6380\n\n/usr/local/codis3.2/bin/codis-admin --dashboard=127.0.0.1:18082 --group-add --gid=2 --addr=127.0.0.1:6381\n/usr/local/codis3.2/bin/codis-admin --dashboard=127.0.0.1:18083 --group-add --gid=2 --addr=127.0.0.1:6382\n\n把从库跟主库同步:\n/usr/local/codis3.2/bin/codis-admin --dashboard=127.0.0.1:18080 --sync-action --create --addr=127.0.0.1:6379\n/usr/local/codis3.2/bin/codis-admin --dashboard=127.0.0.1:18080 --sync-action --create --addr=127.0.0.1:6380\n需要注意的是如果当从库运行一段时间后挂掉了，那么重新启动后需要人为手动地将主从进行同步，执行上面的命令即可，或者图形界面操作（反之，如果主库挂了，马上又好了，这时候从库会自动重新连接上的，不需要人为干预）。\n\n若slave需要提升为master，操作如下:\n/usr/local/codis3.2/bin/codis-admin --dashboard=10.0.60.152:18080 --promote-server --gid=1 --addr=10.0.60.154:6379\n注意的是，当从库提升为主库后，那么原来的主库就会掉线，如果想把它作为现在主库的从库，还是需要人为干预的，因为这个涉及到数据安全性的问题。\n\n##初始化slots并设置server group服务的slot 范围（在集群中一台服务器上操作即可，也可以在面板图形界面操作）\n\nCodis采用Pre-sharding的技术来实现数据的分片, 默认分成1024个slots (0-1023)，对于每个key来说，通过以下公式确定所属的Slot Id : SlotId = crc32(key) %1024。每一个slot都会有一个且必须有一个特定的server group id来表示这个slot的数据由哪个server group来提供。\n\n/usr/local/codis3.2/bin/codis-admin --dashboard=10.0.60.152:18080 --slot-action --create-range --beg=0 --end=511 --gid=1\n/usr/local/codis3.2/bin/codis-admin --dashboard=10.0.60.152:18080 --slot-action --create-range --beg=512 --end=1023 --gid=2\n","source":"_posts/codis2-x升级到codis3-2.md","raw":"---\ntitle: codis2.x升级到codis3.2\ndate: 2018-03-21 09:58:39\ntags: codis\ncategories: 运维\n---\n\n## step 1.配置迁移\n\nstep a.导出配置文件\n```\n/usr/local/codis3.2/bin/codis-admin --config-dump --product=apitest --zookeeper=10.0.0.40:2181 -1 | tee codis_v2.0.json\n```\n\n该命令会从 zookeeper 上拉取 /zk/codis/db_codis_v2.0 下全部的文件，并组织成 json 格式并输出。\n选项 -1 表示配置文件是 Codis 1.x 版本，缺省是 Codis 3.x 版本。\n\nstep b. 转换配置文件\n```\n/usr/local/codis3.2/bin/codis-admin --config-convert codis_v2.0.json | tee codis_v3.0.json\n```\n该命令会将 Codis 1.x 版本的配置文件中有效信息提取出来，并转成 Codis 3.x 版本的配置文件并输出。\n\nstep c. 更新配置文件\n注意：更新配置文件时，请确保 Codis 3.x 中该集群不存在，否则可能导致更新失败或者集群状态异常。\n```\nNEW_PRODUCT_NAME=\"apitet_codis3.2\"\nZOOKEEPER_ADDR=\"10.0.0.40:2181\"\n#/usr/local/codis3.2/bin/codis-admin --config-restore=codis_v3.0.json --product=$NEW_PRODUCT_NAME --zookeeper=$ZOOKEEPER_ADDR --confirm\n/usr/local/codis3.2/bin/codis-admin --config-restore=codis_v3.0.json --product=apitest_codis3.2 --zookeeper=10.0.0.40:2181 --confirm\n```\n\n<!--more-->\n## step 2.check新集群配置文件\n```\n/usr/local/zookeeper/bin/zkCli.sh -server 10.0.0.40:2181\nmkdir -p /home/config/codis3.2\nmkdir -p /home/logs/codis3.2\nmkdir -p /home/data/codis3.2\nchown -R codis:codis /home/config/codis3.2/\nchown -R codis:codis /home/data/codis3.2/\n```\n\n\n## step 3.codis-dashboard 生成默认的配置文件\n```\n/usr/local/codis3.2/bin/codis-dashboard --default-config | tee /home/config/codis3.2/dashboard.toml\n```\nPS. 修改其中相关配置:[coordinator_name=\"zookeeper\", coordinator_addr, product_name, admin_addr];\n\n\n\n## step 4.配置supervisor，并启动dashboard\n```\nnohup /usr/local/codis3.2/bin/codis-dashboard --ncpu=2 --config=/home/config/codis3.2/dashboard.toml --log=/home/logs/codis3.2/dashboard.log --log-level=WARN &\n```\n\n## step 5.生成codis-fe配置文件,check编辑\n配置文件codis.json可以手动编辑，也可以通过codis-admin从外部存储（这里是zookeeper）中拉取，如下操作：\n```\n/usr/local/codis3.2/bin/codis-admin --dashboard-list --zookeeper=10.0.0.40:2181 | tee /home/config/codis3.2/codis.json\n```\n\n## step 6.配置supervisor，启动codis-fe\n```\nnohup /usr/local/codis3.2/bin/codis-fe --ncpu=2 --log=/home/logs/codis3.2/fe.log --log-level=WARN --dashboard-list=/home/config/codis3.2/codis.json --listen=0.0.0.0:8080 &\n```\n\n\n## step 7.编辑codis-server配置文件\n## step 8.配置supervisor，启动codis-server, 添加到新集群做slave\n```\n/usr/local/codis3.2/bin/codis-server /home/config/codis3.2/codis-server-14369.conf\n```\nPS. mkdir [dir] ;\n    运行codis-server的当前用户，需要写权限「dir, /home/config/codis3.2/」,否则会导致主从同步失败;\n    测试redis-cli -h 10.0.0.40 -p 14369 ping, 否则无法加入到server-group;\n    #Opening the temp file needed for MASTER <-> SLAVE synchronization: Permission denied\n    #CONFIG REWRITE failed: Permission denied\n\n## step 9.codis-procxy 生成默认的配置文件:\n```\n/usr/local/codis3.2/bin/codis-proxy --default-config | tee /home/config/codis3.2/proxy.toml\n```\n\n## step 10. 配置supervisor，启动codis-proxy\n```\nnohup /usr/local/codis3.2/bin/codis-proxy --ncpu=2 --config=/home/config/codis3.2/proxy-19400.toml --log=/home/logs/codis3.2/proxy-19400.log --log-level=WARN &\n```\n\n## step 11. 集群添加codis-proxy\ncodis-proxy启动后，处于waiting状态，监听proxy_addr地址，但是不会accept连接，添加到集群并完成集群状态的同步，才能改变状态为online。添加的方法有以下两种：\n第一种：通过codis-fe添加，通过Add Proxy按钮，将admin_addr加入到集群中，如下图（具体操作要等到后面codis-fe启动后才可以）：\n第二种：通过codis-admin命令行工具添加，方法如下（添加3个proxy）：\n```\n/usr/local/codis3.2/bin/codis-admin --dashboard=127.0.0.1:18080 --create-proxy --addr 127.0.0.1:11080\n/usr/local/codis3.2/bin/codis-admin --dashboard=127.0.0.1:18080 --create-proxy -x 127.0.0.1:11081\n```\n其中–dashboard需要指定codis-dashboard的管理地址，–create-proxy指定为和codis-proxy的admin_addr地址,。添加过程中，codis-dashboard会完成如下一系列动作：\n1）获取proxy信息，对集群name以及auth进行验证，并将其信息写入到外部存储中；\n2）同步slots状态；\n3）标记proxy状态为online，此后proxy开始accept连接并开始提供服务；\nPS. 在添加codis-proxy的时候需要特别注意，这个地方容易出现各种问题，最好能一次性添加成功，不然就需要删除zookeeper数据了，然后重新开始。\n\n\n## step 12. 业务全部切换到新的codis-proxy,\n## step 13. 保证业务不再使用老集群proxy，可以check老集群后台的ops为0，之后，再promote新的codis-server为master, 完成升级\nPS. slave为了数据一致性，默认为只读。\n\n切换之后，就无法切换回来。codis2的server无法兼容codis3数据, 就是codis-server2为slave，codis3-server为master 无法兼容\n一般是低版本无法兼容高版本的 rdb 导致的。\n[21658] 21 Mar 18:53:32.735 # Can't handle RDB format version 7\n[21658] 21 Mar 18:53:32.735 # Fatal error loading the DB: Invalid argument. Exiting.\n\n\n## xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx其他常用操作\n##添加Redis Server Group（在集群中一台服务器上操作即可，也可以在面板图形界面操作)\n\n首先使用codis-admin工具创建组，按照上面的规划的，我们创建2个组即可：\n/usr/local/codis3.2/bin/codis-admin --dashboard=127.0.0.1:18080 --create-group --gid=1\n/usr/local/codis3.2/bin/codis-admin --dashboard=127.0.0.1:18080 --create-group --gid=2\n\n然后使用codis-admin工具给组添加Redis主机（2个主机为一个组）：\n/usr/local/codis3.2/bin/codis-admin --dashboard=127.0.0.1:18080 --group-add --gid=1 --addr=127.0.0.1:6379\n/usr/local/codis3.2/bin/codis-admin --dashboard=127.0.0.1:18081 --group-add --gid=1 --addr=127.0.0.1:6380\n\n/usr/local/codis3.2/bin/codis-admin --dashboard=127.0.0.1:18082 --group-add --gid=2 --addr=127.0.0.1:6381\n/usr/local/codis3.2/bin/codis-admin --dashboard=127.0.0.1:18083 --group-add --gid=2 --addr=127.0.0.1:6382\n\n把从库跟主库同步:\n/usr/local/codis3.2/bin/codis-admin --dashboard=127.0.0.1:18080 --sync-action --create --addr=127.0.0.1:6379\n/usr/local/codis3.2/bin/codis-admin --dashboard=127.0.0.1:18080 --sync-action --create --addr=127.0.0.1:6380\n需要注意的是如果当从库运行一段时间后挂掉了，那么重新启动后需要人为手动地将主从进行同步，执行上面的命令即可，或者图形界面操作（反之，如果主库挂了，马上又好了，这时候从库会自动重新连接上的，不需要人为干预）。\n\n若slave需要提升为master，操作如下:\n/usr/local/codis3.2/bin/codis-admin --dashboard=10.0.60.152:18080 --promote-server --gid=1 --addr=10.0.60.154:6379\n注意的是，当从库提升为主库后，那么原来的主库就会掉线，如果想把它作为现在主库的从库，还是需要人为干预的，因为这个涉及到数据安全性的问题。\n\n##初始化slots并设置server group服务的slot 范围（在集群中一台服务器上操作即可，也可以在面板图形界面操作）\n\nCodis采用Pre-sharding的技术来实现数据的分片, 默认分成1024个slots (0-1023)，对于每个key来说，通过以下公式确定所属的Slot Id : SlotId = crc32(key) %1024。每一个slot都会有一个且必须有一个特定的server group id来表示这个slot的数据由哪个server group来提供。\n\n/usr/local/codis3.2/bin/codis-admin --dashboard=10.0.60.152:18080 --slot-action --create-range --beg=0 --end=511 --gid=1\n/usr/local/codis3.2/bin/codis-admin --dashboard=10.0.60.152:18080 --slot-action --create-range --beg=512 --end=1023 --gid=2\n","slug":"codis2-x升级到codis3-2","published":1,"updated":"2018-05-10T05:06:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9cp000791wqvgnbx7k1","content":"<h2 id=\"step-1-配置迁移\"><a href=\"#step-1-配置迁移\" class=\"headerlink\" title=\"step 1.配置迁移\"></a>step 1.配置迁移</h2><p>step a.导出配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/codis3.2/bin/codis-admin --config-dump --product=apitest --zookeeper=10.0.0.40:2181 -1 | tee codis_v2.0.json</div></pre></td></tr></table></figure></p>\n<p>该命令会从 zookeeper 上拉取 /zk/codis/db_codis_v2.0 下全部的文件，并组织成 json 格式并输出。<br>选项 -1 表示配置文件是 Codis 1.x 版本，缺省是 Codis 3.x 版本。</p>\n<p>step b. 转换配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/codis3.2/bin/codis-admin --config-convert codis_v2.0.json | tee codis_v3.0.json</div></pre></td></tr></table></figure></p>\n<p>该命令会将 Codis 1.x 版本的配置文件中有效信息提取出来，并转成 Codis 3.x 版本的配置文件并输出。</p>\n<p>step c. 更新配置文件<br>注意：更新配置文件时，请确保 Codis 3.x 中该集群不存在，否则可能导致更新失败或者集群状态异常。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">NEW_PRODUCT_NAME=&quot;apitet_codis3.2&quot;</div><div class=\"line\">ZOOKEEPER_ADDR=&quot;10.0.0.40:2181&quot;</div><div class=\"line\">#/usr/local/codis3.2/bin/codis-admin --config-restore=codis_v3.0.json --product=$NEW_PRODUCT_NAME --zookeeper=$ZOOKEEPER_ADDR --confirm</div><div class=\"line\">/usr/local/codis3.2/bin/codis-admin --config-restore=codis_v3.0.json --product=apitest_codis3.2 --zookeeper=10.0.0.40:2181 --confirm</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h2 id=\"step-2-check新集群配置文件\"><a href=\"#step-2-check新集群配置文件\" class=\"headerlink\" title=\"step 2.check新集群配置文件\"></a>step 2.check新集群配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/zookeeper/bin/zkCli.sh -server 10.0.0.40:2181</div><div class=\"line\">mkdir -p /home/config/codis3.2</div><div class=\"line\">mkdir -p /home/logs/codis3.2</div><div class=\"line\">mkdir -p /home/data/codis3.2</div><div class=\"line\">chown -R codis:codis /home/config/codis3.2/</div><div class=\"line\">chown -R codis:codis /home/data/codis3.2/</div></pre></td></tr></table></figure>\n<h2 id=\"step-3-codis-dashboard-生成默认的配置文件\"><a href=\"#step-3-codis-dashboard-生成默认的配置文件\" class=\"headerlink\" title=\"step 3.codis-dashboard 生成默认的配置文件\"></a>step 3.codis-dashboard 生成默认的配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/codis3.2/bin/codis-dashboard --default-config | tee /home/config/codis3.2/dashboard.toml</div></pre></td></tr></table></figure>\n<p>PS. 修改其中相关配置:[coordinator_name=”zookeeper”, coordinator_addr, product_name, admin_addr];</p>\n<h2 id=\"step-4-配置supervisor，并启动dashboard\"><a href=\"#step-4-配置supervisor，并启动dashboard\" class=\"headerlink\" title=\"step 4.配置supervisor，并启动dashboard\"></a>step 4.配置supervisor，并启动dashboard</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nohup /usr/local/codis3.2/bin/codis-dashboard --ncpu=2 --config=/home/config/codis3.2/dashboard.toml --log=/home/logs/codis3.2/dashboard.log --log-level=WARN &amp;</div></pre></td></tr></table></figure>\n<h2 id=\"step-5-生成codis-fe配置文件-check编辑\"><a href=\"#step-5-生成codis-fe配置文件-check编辑\" class=\"headerlink\" title=\"step 5.生成codis-fe配置文件,check编辑\"></a>step 5.生成codis-fe配置文件,check编辑</h2><p>配置文件codis.json可以手动编辑，也可以通过codis-admin从外部存储（这里是zookeeper）中拉取，如下操作：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/codis3.2/bin/codis-admin --dashboard-list --zookeeper=10.0.0.40:2181 | tee /home/config/codis3.2/codis.json</div></pre></td></tr></table></figure></p>\n<h2 id=\"step-6-配置supervisor，启动codis-fe\"><a href=\"#step-6-配置supervisor，启动codis-fe\" class=\"headerlink\" title=\"step 6.配置supervisor，启动codis-fe\"></a>step 6.配置supervisor，启动codis-fe</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nohup /usr/local/codis3.2/bin/codis-fe --ncpu=2 --log=/home/logs/codis3.2/fe.log --log-level=WARN --dashboard-list=/home/config/codis3.2/codis.json --listen=0.0.0.0:8080 &amp;</div></pre></td></tr></table></figure>\n<h2 id=\"step-7-编辑codis-server配置文件\"><a href=\"#step-7-编辑codis-server配置文件\" class=\"headerlink\" title=\"step 7.编辑codis-server配置文件\"></a>step 7.编辑codis-server配置文件</h2><h2 id=\"step-8-配置supervisor，启动codis-server-添加到新集群做slave\"><a href=\"#step-8-配置supervisor，启动codis-server-添加到新集群做slave\" class=\"headerlink\" title=\"step 8.配置supervisor，启动codis-server, 添加到新集群做slave\"></a>step 8.配置supervisor，启动codis-server, 添加到新集群做slave</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/codis3.2/bin/codis-server /home/config/codis3.2/codis-server-14369.conf</div></pre></td></tr></table></figure>\n<p>PS. mkdir [dir] ;<br>    运行codis-server的当前用户，需要写权限「dir, /home/config/codis3.2/」,否则会导致主从同步失败;<br>    测试redis-cli -h 10.0.0.40 -p 14369 ping, 否则无法加入到server-group;</p>\n<pre><code>#Opening the temp file needed for MASTER &lt;-&gt; SLAVE synchronization: Permission denied\n#CONFIG REWRITE failed: Permission denied\n</code></pre><h2 id=\"step-9-codis-procxy-生成默认的配置文件\"><a href=\"#step-9-codis-procxy-生成默认的配置文件\" class=\"headerlink\" title=\"step 9.codis-procxy 生成默认的配置文件:\"></a>step 9.codis-procxy 生成默认的配置文件:</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/codis3.2/bin/codis-proxy --default-config | tee /home/config/codis3.2/proxy.toml</div></pre></td></tr></table></figure>\n<h2 id=\"step-10-配置supervisor，启动codis-proxy\"><a href=\"#step-10-配置supervisor，启动codis-proxy\" class=\"headerlink\" title=\"step 10. 配置supervisor，启动codis-proxy\"></a>step 10. 配置supervisor，启动codis-proxy</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nohup /usr/local/codis3.2/bin/codis-proxy --ncpu=2 --config=/home/config/codis3.2/proxy-19400.toml --log=/home/logs/codis3.2/proxy-19400.log --log-level=WARN &amp;</div></pre></td></tr></table></figure>\n<h2 id=\"step-11-集群添加codis-proxy\"><a href=\"#step-11-集群添加codis-proxy\" class=\"headerlink\" title=\"step 11. 集群添加codis-proxy\"></a>step 11. 集群添加codis-proxy</h2><p>codis-proxy启动后，处于waiting状态，监听proxy_addr地址，但是不会accept连接，添加到集群并完成集群状态的同步，才能改变状态为online。添加的方法有以下两种：<br>第一种：通过codis-fe添加，通过Add Proxy按钮，将admin_addr加入到集群中，如下图（具体操作要等到后面codis-fe启动后才可以）：<br>第二种：通过codis-admin命令行工具添加，方法如下（添加3个proxy）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/codis3.2/bin/codis-admin --dashboard=127.0.0.1:18080 --create-proxy --addr 127.0.0.1:11080</div><div class=\"line\">/usr/local/codis3.2/bin/codis-admin --dashboard=127.0.0.1:18080 --create-proxy -x 127.0.0.1:11081</div></pre></td></tr></table></figure></p>\n<p>其中–dashboard需要指定codis-dashboard的管理地址，–create-proxy指定为和codis-proxy的admin_addr地址,。添加过程中，codis-dashboard会完成如下一系列动作：<br>1）获取proxy信息，对集群name以及auth进行验证，并将其信息写入到外部存储中；<br>2）同步slots状态；<br>3）标记proxy状态为online，此后proxy开始accept连接并开始提供服务；<br>PS. 在添加codis-proxy的时候需要特别注意，这个地方容易出现各种问题，最好能一次性添加成功，不然就需要删除zookeeper数据了，然后重新开始。</p>\n<h2 id=\"step-12-业务全部切换到新的codis-proxy\"><a href=\"#step-12-业务全部切换到新的codis-proxy\" class=\"headerlink\" title=\"step 12. 业务全部切换到新的codis-proxy,\"></a>step 12. 业务全部切换到新的codis-proxy,</h2><h2 id=\"step-13-保证业务不再使用老集群proxy，可以check老集群后台的ops为0，之后，再promote新的codis-server为master-完成升级\"><a href=\"#step-13-保证业务不再使用老集群proxy，可以check老集群后台的ops为0，之后，再promote新的codis-server为master-完成升级\" class=\"headerlink\" title=\"step 13. 保证业务不再使用老集群proxy，可以check老集群后台的ops为0，之后，再promote新的codis-server为master, 完成升级\"></a>step 13. 保证业务不再使用老集群proxy，可以check老集群后台的ops为0，之后，再promote新的codis-server为master, 完成升级</h2><p>PS. slave为了数据一致性，默认为只读。</p>\n<p>切换之后，就无法切换回来。codis2的server无法兼容codis3数据, 就是codis-server2为slave，codis3-server为master 无法兼容<br>一般是低版本无法兼容高版本的 rdb 导致的。<br>[21658] 21 Mar 18:53:32.735 # Can’t handle RDB format version 7<br>[21658] 21 Mar 18:53:32.735 # Fatal error loading the DB: Invalid argument. Exiting.</p>\n<h2 id=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx其他常用操作\"><a href=\"#xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx其他常用操作\" class=\"headerlink\" title=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx其他常用操作\"></a>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx其他常用操作</h2><p>##添加Redis Server Group（在集群中一台服务器上操作即可，也可以在面板图形界面操作)</p>\n<p>首先使用codis-admin工具创建组，按照上面的规划的，我们创建2个组即可：<br>/usr/local/codis3.2/bin/codis-admin –dashboard=127.0.0.1:18080 –create-group –gid=1<br>/usr/local/codis3.2/bin/codis-admin –dashboard=127.0.0.1:18080 –create-group –gid=2</p>\n<p>然后使用codis-admin工具给组添加Redis主机（2个主机为一个组）：<br>/usr/local/codis3.2/bin/codis-admin –dashboard=127.0.0.1:18080 –group-add –gid=1 –addr=127.0.0.1:6379<br>/usr/local/codis3.2/bin/codis-admin –dashboard=127.0.0.1:18081 –group-add –gid=1 –addr=127.0.0.1:6380</p>\n<p>/usr/local/codis3.2/bin/codis-admin –dashboard=127.0.0.1:18082 –group-add –gid=2 –addr=127.0.0.1:6381<br>/usr/local/codis3.2/bin/codis-admin –dashboard=127.0.0.1:18083 –group-add –gid=2 –addr=127.0.0.1:6382</p>\n<p>把从库跟主库同步:<br>/usr/local/codis3.2/bin/codis-admin –dashboard=127.0.0.1:18080 –sync-action –create –addr=127.0.0.1:6379<br>/usr/local/codis3.2/bin/codis-admin –dashboard=127.0.0.1:18080 –sync-action –create –addr=127.0.0.1:6380<br>需要注意的是如果当从库运行一段时间后挂掉了，那么重新启动后需要人为手动地将主从进行同步，执行上面的命令即可，或者图形界面操作（反之，如果主库挂了，马上又好了，这时候从库会自动重新连接上的，不需要人为干预）。</p>\n<p>若slave需要提升为master，操作如下:<br>/usr/local/codis3.2/bin/codis-admin –dashboard=10.0.60.152:18080 –promote-server –gid=1 –addr=10.0.60.154:6379<br>注意的是，当从库提升为主库后，那么原来的主库就会掉线，如果想把它作为现在主库的从库，还是需要人为干预的，因为这个涉及到数据安全性的问题。</p>\n<p>##初始化slots并设置server group服务的slot 范围（在集群中一台服务器上操作即可，也可以在面板图形界面操作）</p>\n<p>Codis采用Pre-sharding的技术来实现数据的分片, 默认分成1024个slots (0-1023)，对于每个key来说，通过以下公式确定所属的Slot Id : SlotId = crc32(key) %1024。每一个slot都会有一个且必须有一个特定的server group id来表示这个slot的数据由哪个server group来提供。</p>\n<p>/usr/local/codis3.2/bin/codis-admin –dashboard=10.0.60.152:18080 –slot-action –create-range –beg=0 –end=511 –gid=1<br>/usr/local/codis3.2/bin/codis-admin –dashboard=10.0.60.152:18080 –slot-action –create-range –beg=512 –end=1023 –gid=2</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"step-1-配置迁移\"><a href=\"#step-1-配置迁移\" class=\"headerlink\" title=\"step 1.配置迁移\"></a>step 1.配置迁移</h2><p>step a.导出配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/codis3.2/bin/codis-admin --config-dump --product=apitest --zookeeper=10.0.0.40:2181 -1 | tee codis_v2.0.json</div></pre></td></tr></table></figure></p>\n<p>该命令会从 zookeeper 上拉取 /zk/codis/db_codis_v2.0 下全部的文件，并组织成 json 格式并输出。<br>选项 -1 表示配置文件是 Codis 1.x 版本，缺省是 Codis 3.x 版本。</p>\n<p>step b. 转换配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/codis3.2/bin/codis-admin --config-convert codis_v2.0.json | tee codis_v3.0.json</div></pre></td></tr></table></figure></p>\n<p>该命令会将 Codis 1.x 版本的配置文件中有效信息提取出来，并转成 Codis 3.x 版本的配置文件并输出。</p>\n<p>step c. 更新配置文件<br>注意：更新配置文件时，请确保 Codis 3.x 中该集群不存在，否则可能导致更新失败或者集群状态异常。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">NEW_PRODUCT_NAME=&quot;apitet_codis3.2&quot;</div><div class=\"line\">ZOOKEEPER_ADDR=&quot;10.0.0.40:2181&quot;</div><div class=\"line\">#/usr/local/codis3.2/bin/codis-admin --config-restore=codis_v3.0.json --product=$NEW_PRODUCT_NAME --zookeeper=$ZOOKEEPER_ADDR --confirm</div><div class=\"line\">/usr/local/codis3.2/bin/codis-admin --config-restore=codis_v3.0.json --product=apitest_codis3.2 --zookeeper=10.0.0.40:2181 --confirm</div></pre></td></tr></table></figure></p>","more":"<h2 id=\"step-2-check新集群配置文件\"><a href=\"#step-2-check新集群配置文件\" class=\"headerlink\" title=\"step 2.check新集群配置文件\"></a>step 2.check新集群配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/zookeeper/bin/zkCli.sh -server 10.0.0.40:2181</div><div class=\"line\">mkdir -p /home/config/codis3.2</div><div class=\"line\">mkdir -p /home/logs/codis3.2</div><div class=\"line\">mkdir -p /home/data/codis3.2</div><div class=\"line\">chown -R codis:codis /home/config/codis3.2/</div><div class=\"line\">chown -R codis:codis /home/data/codis3.2/</div></pre></td></tr></table></figure>\n<h2 id=\"step-3-codis-dashboard-生成默认的配置文件\"><a href=\"#step-3-codis-dashboard-生成默认的配置文件\" class=\"headerlink\" title=\"step 3.codis-dashboard 生成默认的配置文件\"></a>step 3.codis-dashboard 生成默认的配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/codis3.2/bin/codis-dashboard --default-config | tee /home/config/codis3.2/dashboard.toml</div></pre></td></tr></table></figure>\n<p>PS. 修改其中相关配置:[coordinator_name=”zookeeper”, coordinator_addr, product_name, admin_addr];</p>\n<h2 id=\"step-4-配置supervisor，并启动dashboard\"><a href=\"#step-4-配置supervisor，并启动dashboard\" class=\"headerlink\" title=\"step 4.配置supervisor，并启动dashboard\"></a>step 4.配置supervisor，并启动dashboard</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nohup /usr/local/codis3.2/bin/codis-dashboard --ncpu=2 --config=/home/config/codis3.2/dashboard.toml --log=/home/logs/codis3.2/dashboard.log --log-level=WARN &amp;</div></pre></td></tr></table></figure>\n<h2 id=\"step-5-生成codis-fe配置文件-check编辑\"><a href=\"#step-5-生成codis-fe配置文件-check编辑\" class=\"headerlink\" title=\"step 5.生成codis-fe配置文件,check编辑\"></a>step 5.生成codis-fe配置文件,check编辑</h2><p>配置文件codis.json可以手动编辑，也可以通过codis-admin从外部存储（这里是zookeeper）中拉取，如下操作：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/codis3.2/bin/codis-admin --dashboard-list --zookeeper=10.0.0.40:2181 | tee /home/config/codis3.2/codis.json</div></pre></td></tr></table></figure></p>\n<h2 id=\"step-6-配置supervisor，启动codis-fe\"><a href=\"#step-6-配置supervisor，启动codis-fe\" class=\"headerlink\" title=\"step 6.配置supervisor，启动codis-fe\"></a>step 6.配置supervisor，启动codis-fe</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nohup /usr/local/codis3.2/bin/codis-fe --ncpu=2 --log=/home/logs/codis3.2/fe.log --log-level=WARN --dashboard-list=/home/config/codis3.2/codis.json --listen=0.0.0.0:8080 &amp;</div></pre></td></tr></table></figure>\n<h2 id=\"step-7-编辑codis-server配置文件\"><a href=\"#step-7-编辑codis-server配置文件\" class=\"headerlink\" title=\"step 7.编辑codis-server配置文件\"></a>step 7.编辑codis-server配置文件</h2><h2 id=\"step-8-配置supervisor，启动codis-server-添加到新集群做slave\"><a href=\"#step-8-配置supervisor，启动codis-server-添加到新集群做slave\" class=\"headerlink\" title=\"step 8.配置supervisor，启动codis-server, 添加到新集群做slave\"></a>step 8.配置supervisor，启动codis-server, 添加到新集群做slave</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/codis3.2/bin/codis-server /home/config/codis3.2/codis-server-14369.conf</div></pre></td></tr></table></figure>\n<p>PS. mkdir [dir] ;<br>    运行codis-server的当前用户，需要写权限「dir, /home/config/codis3.2/」,否则会导致主从同步失败;<br>    测试redis-cli -h 10.0.0.40 -p 14369 ping, 否则无法加入到server-group;</p>\n<pre><code>#Opening the temp file needed for MASTER &lt;-&gt; SLAVE synchronization: Permission denied\n#CONFIG REWRITE failed: Permission denied\n</code></pre><h2 id=\"step-9-codis-procxy-生成默认的配置文件\"><a href=\"#step-9-codis-procxy-生成默认的配置文件\" class=\"headerlink\" title=\"step 9.codis-procxy 生成默认的配置文件:\"></a>step 9.codis-procxy 生成默认的配置文件:</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/codis3.2/bin/codis-proxy --default-config | tee /home/config/codis3.2/proxy.toml</div></pre></td></tr></table></figure>\n<h2 id=\"step-10-配置supervisor，启动codis-proxy\"><a href=\"#step-10-配置supervisor，启动codis-proxy\" class=\"headerlink\" title=\"step 10. 配置supervisor，启动codis-proxy\"></a>step 10. 配置supervisor，启动codis-proxy</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nohup /usr/local/codis3.2/bin/codis-proxy --ncpu=2 --config=/home/config/codis3.2/proxy-19400.toml --log=/home/logs/codis3.2/proxy-19400.log --log-level=WARN &amp;</div></pre></td></tr></table></figure>\n<h2 id=\"step-11-集群添加codis-proxy\"><a href=\"#step-11-集群添加codis-proxy\" class=\"headerlink\" title=\"step 11. 集群添加codis-proxy\"></a>step 11. 集群添加codis-proxy</h2><p>codis-proxy启动后，处于waiting状态，监听proxy_addr地址，但是不会accept连接，添加到集群并完成集群状态的同步，才能改变状态为online。添加的方法有以下两种：<br>第一种：通过codis-fe添加，通过Add Proxy按钮，将admin_addr加入到集群中，如下图（具体操作要等到后面codis-fe启动后才可以）：<br>第二种：通过codis-admin命令行工具添加，方法如下（添加3个proxy）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/codis3.2/bin/codis-admin --dashboard=127.0.0.1:18080 --create-proxy --addr 127.0.0.1:11080</div><div class=\"line\">/usr/local/codis3.2/bin/codis-admin --dashboard=127.0.0.1:18080 --create-proxy -x 127.0.0.1:11081</div></pre></td></tr></table></figure></p>\n<p>其中–dashboard需要指定codis-dashboard的管理地址，–create-proxy指定为和codis-proxy的admin_addr地址,。添加过程中，codis-dashboard会完成如下一系列动作：<br>1）获取proxy信息，对集群name以及auth进行验证，并将其信息写入到外部存储中；<br>2）同步slots状态；<br>3）标记proxy状态为online，此后proxy开始accept连接并开始提供服务；<br>PS. 在添加codis-proxy的时候需要特别注意，这个地方容易出现各种问题，最好能一次性添加成功，不然就需要删除zookeeper数据了，然后重新开始。</p>\n<h2 id=\"step-12-业务全部切换到新的codis-proxy\"><a href=\"#step-12-业务全部切换到新的codis-proxy\" class=\"headerlink\" title=\"step 12. 业务全部切换到新的codis-proxy,\"></a>step 12. 业务全部切换到新的codis-proxy,</h2><h2 id=\"step-13-保证业务不再使用老集群proxy，可以check老集群后台的ops为0，之后，再promote新的codis-server为master-完成升级\"><a href=\"#step-13-保证业务不再使用老集群proxy，可以check老集群后台的ops为0，之后，再promote新的codis-server为master-完成升级\" class=\"headerlink\" title=\"step 13. 保证业务不再使用老集群proxy，可以check老集群后台的ops为0，之后，再promote新的codis-server为master, 完成升级\"></a>step 13. 保证业务不再使用老集群proxy，可以check老集群后台的ops为0，之后，再promote新的codis-server为master, 完成升级</h2><p>PS. slave为了数据一致性，默认为只读。</p>\n<p>切换之后，就无法切换回来。codis2的server无法兼容codis3数据, 就是codis-server2为slave，codis3-server为master 无法兼容<br>一般是低版本无法兼容高版本的 rdb 导致的。<br>[21658] 21 Mar 18:53:32.735 # Can’t handle RDB format version 7<br>[21658] 21 Mar 18:53:32.735 # Fatal error loading the DB: Invalid argument. Exiting.</p>\n<h2 id=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx其他常用操作\"><a href=\"#xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx其他常用操作\" class=\"headerlink\" title=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx其他常用操作\"></a>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx其他常用操作</h2><p>##添加Redis Server Group（在集群中一台服务器上操作即可，也可以在面板图形界面操作)</p>\n<p>首先使用codis-admin工具创建组，按照上面的规划的，我们创建2个组即可：<br>/usr/local/codis3.2/bin/codis-admin –dashboard=127.0.0.1:18080 –create-group –gid=1<br>/usr/local/codis3.2/bin/codis-admin –dashboard=127.0.0.1:18080 –create-group –gid=2</p>\n<p>然后使用codis-admin工具给组添加Redis主机（2个主机为一个组）：<br>/usr/local/codis3.2/bin/codis-admin –dashboard=127.0.0.1:18080 –group-add –gid=1 –addr=127.0.0.1:6379<br>/usr/local/codis3.2/bin/codis-admin –dashboard=127.0.0.1:18081 –group-add –gid=1 –addr=127.0.0.1:6380</p>\n<p>/usr/local/codis3.2/bin/codis-admin –dashboard=127.0.0.1:18082 –group-add –gid=2 –addr=127.0.0.1:6381<br>/usr/local/codis3.2/bin/codis-admin –dashboard=127.0.0.1:18083 –group-add –gid=2 –addr=127.0.0.1:6382</p>\n<p>把从库跟主库同步:<br>/usr/local/codis3.2/bin/codis-admin –dashboard=127.0.0.1:18080 –sync-action –create –addr=127.0.0.1:6379<br>/usr/local/codis3.2/bin/codis-admin –dashboard=127.0.0.1:18080 –sync-action –create –addr=127.0.0.1:6380<br>需要注意的是如果当从库运行一段时间后挂掉了，那么重新启动后需要人为手动地将主从进行同步，执行上面的命令即可，或者图形界面操作（反之，如果主库挂了，马上又好了，这时候从库会自动重新连接上的，不需要人为干预）。</p>\n<p>若slave需要提升为master，操作如下:<br>/usr/local/codis3.2/bin/codis-admin –dashboard=10.0.60.152:18080 –promote-server –gid=1 –addr=10.0.60.154:6379<br>注意的是，当从库提升为主库后，那么原来的主库就会掉线，如果想把它作为现在主库的从库，还是需要人为干预的，因为这个涉及到数据安全性的问题。</p>\n<p>##初始化slots并设置server group服务的slot 范围（在集群中一台服务器上操作即可，也可以在面板图形界面操作）</p>\n<p>Codis采用Pre-sharding的技术来实现数据的分片, 默认分成1024个slots (0-1023)，对于每个key来说，通过以下公式确定所属的Slot Id : SlotId = crc32(key) %1024。每一个slot都会有一个且必须有一个特定的server group id来表示这个slot的数据由哪个server group来提供。</p>\n<p>/usr/local/codis3.2/bin/codis-admin –dashboard=10.0.60.152:18080 –slot-action –create-range –beg=0 –end=511 –gid=1<br>/usr/local/codis3.2/bin/codis-admin –dashboard=10.0.60.152:18080 –slot-action –create-range –beg=512 –end=1023 –gid=2</p>"},{"title":"docker.php7.redis","date":"2018-06-06T07:26:36.000Z","_content":"\ndocker build经常会报找不到redis包的问题\nNo releases available for package \"pecl.php.net/redis\"\n\n```yaml\nENV PHPREDIS_VERSION 3.0.0\n\nRUN mkdir -p /usr/src/php/ext/redis \\\n\t\t&& curl -L https://github.com/phpredis/phpredis/archive/$PHPREDIS_VERSION.tar.gz | tar xvz -C /usr/src/php/ext/redis --strip 1 \\\n\t\t&& echo 'redis' >> /usr/src/php-available-exts \\\n\t\t&& docker-php-ext-install redis\n```\n\n- [ How to install php-redis extension using the official PHP Docker image approach? ]( https://stackoverflow.com/questions/31369867/how-to-install-php-redis-extension-using-the-official-php-docker-image-approach/38567344#38567344 )\n","source":"_posts/docker-php7-redis.md","raw":"---\ntitle: docker.php7.redis\ndate: 2018-06-06 15:26:36\ntags: docker\ncategories: 运维\n---\n\ndocker build经常会报找不到redis包的问题\nNo releases available for package \"pecl.php.net/redis\"\n\n```yaml\nENV PHPREDIS_VERSION 3.0.0\n\nRUN mkdir -p /usr/src/php/ext/redis \\\n\t\t&& curl -L https://github.com/phpredis/phpredis/archive/$PHPREDIS_VERSION.tar.gz | tar xvz -C /usr/src/php/ext/redis --strip 1 \\\n\t\t&& echo 'redis' >> /usr/src/php-available-exts \\\n\t\t&& docker-php-ext-install redis\n```\n\n- [ How to install php-redis extension using the official PHP Docker image approach? ]( https://stackoverflow.com/questions/31369867/how-to-install-php-redis-extension-using-the-official-php-docker-image-approach/38567344#38567344 )\n","slug":"docker-php7-redis","published":1,"updated":"2018-06-06T07:32:03.000Z","_id":"cji2sk9cv000991wqkbi6beek","comments":1,"layout":"post","photos":[],"link":"","content":"<p>docker build经常会报找不到redis包的问题<br>No releases available for package “pecl.php.net/redis”</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">PHPREDIS_VERSION</span> <span class=\"number\">3.0</span><span class=\"number\">.0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">RUN</span> <span class=\"string\">mkdir</span> <span class=\"bullet\">-p</span> <span class=\"string\">/usr/src/php/ext/redis</span> <span class=\"string\">\\</span></div><div class=\"line\">\t\t<span class=\"string\">&amp;&amp;</span> <span class=\"string\">curl</span> <span class=\"bullet\">-L</span> <span class=\"attr\">https://github.com/phpredis/phpredis/archive/$PHPREDIS_VERSION.tar.gz</span> <span class=\"string\">| tar xvz -C /usr/src/php/ext/redis --strip 1 \\</span></div><div class=\"line\"><span class=\"string\">\t\t&amp;&amp; echo 'redis' &gt;&gt; /usr/src/php-available-exts \\</span></div><div class=\"line\"><span class=\"string\">\t\t&amp;&amp; docker-php-ext-install redis</span></div></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/31369867/how-to-install-php-redis-extension-using-the-official-php-docker-image-approach/38567344#38567344\" target=\"_blank\" rel=\"external\"> How to install php-redis extension using the official PHP Docker image approach? </a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>docker build经常会报找不到redis包的问题<br>No releases available for package “pecl.php.net/redis”</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">PHPREDIS_VERSION</span> <span class=\"number\">3.0</span><span class=\"number\">.0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">RUN</span> <span class=\"string\">mkdir</span> <span class=\"bullet\">-p</span> <span class=\"string\">/usr/src/php/ext/redis</span> <span class=\"string\">\\</span></div><div class=\"line\">\t\t<span class=\"string\">&amp;&amp;</span> <span class=\"string\">curl</span> <span class=\"bullet\">-L</span> <span class=\"attr\">https://github.com/phpredis/phpredis/archive/$PHPREDIS_VERSION.tar.gz</span> <span class=\"string\">| tar xvz -C /usr/src/php/ext/redis --strip 1 \\</span></div><div class=\"line\"><span class=\"string\">\t\t&amp;&amp; echo 'redis' &gt;&gt; /usr/src/php-available-exts \\</span></div><div class=\"line\"><span class=\"string\">\t\t&amp;&amp; docker-php-ext-install redis</span></div></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/31369867/how-to-install-php-redis-extension-using-the-official-php-docker-image-approach/38567344#38567344\" target=\"_blank\" rel=\"external\"> How to install php-redis extension using the official PHP Docker image approach? </a></li>\n</ul>\n"},{"title":"codis3.2后台展示一些说明","date":"2018-04-02T02:00:54.000Z","_content":"\nSession 中的：\ntotal: 从 Proxy 启动到当前时间已经处理的连接数\nalive: 当前 Porxy 中正在处理的连接数\nCommands 中的：\ntotal: 从 Proxy 启动到当前时间已经处理的命令个数\nfails: 从 Proxy 启动到当前时间处理失败的命令个数\nrsp.errs: 从 Proxy 启动到当前时间 Redis 返回 Errror 的命令个数\n","source":"_posts/codis3-2后台展示一些说明.md","raw":"---\ntitle: codis3.2后台展示一些说明\ndate: 2018-04-02 10:00:54\ntags: codis\n---\n\nSession 中的：\ntotal: 从 Proxy 启动到当前时间已经处理的连接数\nalive: 当前 Porxy 中正在处理的连接数\nCommands 中的：\ntotal: 从 Proxy 启动到当前时间已经处理的命令个数\nfails: 从 Proxy 启动到当前时间处理失败的命令个数\nrsp.errs: 从 Proxy 启动到当前时间 Redis 返回 Errror 的命令个数\n","slug":"codis3-2后台展示一些说明","published":1,"updated":"2018-04-02T02:02:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9cx000c91wqfnldeaxf","content":"<p>Session 中的：<br>total: 从 Proxy 启动到当前时间已经处理的连接数<br>alive: 当前 Porxy 中正在处理的连接数<br>Commands 中的：<br>total: 从 Proxy 启动到当前时间已经处理的命令个数<br>fails: 从 Proxy 启动到当前时间处理失败的命令个数<br>rsp.errs: 从 Proxy 启动到当前时间 Redis 返回 Errror 的命令个数</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Session 中的：<br>total: 从 Proxy 启动到当前时间已经处理的连接数<br>alive: 当前 Porxy 中正在处理的连接数<br>Commands 中的：<br>total: 从 Proxy 启动到当前时间已经处理的命令个数<br>fails: 从 Proxy 启动到当前时间处理失败的命令个数<br>rsp.errs: 从 Proxy 启动到当前时间 Redis 返回 Errror 的命令个数</p>\n"},{"title":"cap解释","date":"2018-03-30T05:27:43.000Z","_content":"\n一个分布式系统里面，节点组成的网络本来应该是连通的。然而可能因为一些故障，使得有些节点之间不连通了，整个网络就分成了几块区域。数据就散布在了这些不连通的区域中。这就叫分区。\n\n<!--more-->\n\n当你一个数据项只在一个节点中保存，那么分区出现后，和这个节点不连通的部分就访问不到这个数据了。这时分区就是无法容忍的。\n\n提高分区容忍性的办法就是一个数据项复制到多个节点上，那么出现分区之后，这一数据项就可能分布到各个区里。容忍性就提高了。\n\n然而，要把数据复制到多个节点，就会带来一致性的问题，就是多个节点上面的数据可能是不一致的。要保证一致，每次写操作就都要等待全部节点写成功，而这等待又会带来可用性的问题。\n\n**总的来说就是，数据存在的节点越多，分区容忍性越高，但要复制更新的数据就越多，一致性就越难保证。为了保证一致性，更新所有节点数据所需要的时间就越长，可用性就会降低。**\n\n作者：邬江\n链接：https://www.zhihu.com/question/54105974/answer/139037688\n来源：知乎\n","source":"_posts/cap解释.md","raw":"---\ntitle: cap解释\ndate: 2018-03-30 13:27:43\ntags: cap\ncategories: 分布式\n---\n\n一个分布式系统里面，节点组成的网络本来应该是连通的。然而可能因为一些故障，使得有些节点之间不连通了，整个网络就分成了几块区域。数据就散布在了这些不连通的区域中。这就叫分区。\n\n<!--more-->\n\n当你一个数据项只在一个节点中保存，那么分区出现后，和这个节点不连通的部分就访问不到这个数据了。这时分区就是无法容忍的。\n\n提高分区容忍性的办法就是一个数据项复制到多个节点上，那么出现分区之后，这一数据项就可能分布到各个区里。容忍性就提高了。\n\n然而，要把数据复制到多个节点，就会带来一致性的问题，就是多个节点上面的数据可能是不一致的。要保证一致，每次写操作就都要等待全部节点写成功，而这等待又会带来可用性的问题。\n\n**总的来说就是，数据存在的节点越多，分区容忍性越高，但要复制更新的数据就越多，一致性就越难保证。为了保证一致性，更新所有节点数据所需要的时间就越长，可用性就会降低。**\n\n作者：邬江\n链接：https://www.zhihu.com/question/54105974/answer/139037688\n来源：知乎\n","slug":"cap解释","published":1,"updated":"2018-03-30T05:29:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9cz000d91wq0dsautrk","content":"<p>一个分布式系统里面，节点组成的网络本来应该是连通的。然而可能因为一些故障，使得有些节点之间不连通了，整个网络就分成了几块区域。数据就散布在了这些不连通的区域中。这就叫分区。</p>\n<a id=\"more\"></a>\n<p>当你一个数据项只在一个节点中保存，那么分区出现后，和这个节点不连通的部分就访问不到这个数据了。这时分区就是无法容忍的。</p>\n<p>提高分区容忍性的办法就是一个数据项复制到多个节点上，那么出现分区之后，这一数据项就可能分布到各个区里。容忍性就提高了。</p>\n<p>然而，要把数据复制到多个节点，就会带来一致性的问题，就是多个节点上面的数据可能是不一致的。要保证一致，每次写操作就都要等待全部节点写成功，而这等待又会带来可用性的问题。</p>\n<p><strong>总的来说就是，数据存在的节点越多，分区容忍性越高，但要复制更新的数据就越多，一致性就越难保证。为了保证一致性，更新所有节点数据所需要的时间就越长，可用性就会降低。</strong></p>\n<p>作者：邬江<br>链接：<a href=\"https://www.zhihu.com/question/54105974/answer/139037688\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/54105974/answer/139037688</a><br>来源：知乎</p>\n","site":{"data":{}},"excerpt":"<p>一个分布式系统里面，节点组成的网络本来应该是连通的。然而可能因为一些故障，使得有些节点之间不连通了，整个网络就分成了几块区域。数据就散布在了这些不连通的区域中。这就叫分区。</p>","more":"<p>当你一个数据项只在一个节点中保存，那么分区出现后，和这个节点不连通的部分就访问不到这个数据了。这时分区就是无法容忍的。</p>\n<p>提高分区容忍性的办法就是一个数据项复制到多个节点上，那么出现分区之后，这一数据项就可能分布到各个区里。容忍性就提高了。</p>\n<p>然而，要把数据复制到多个节点，就会带来一致性的问题，就是多个节点上面的数据可能是不一致的。要保证一致，每次写操作就都要等待全部节点写成功，而这等待又会带来可用性的问题。</p>\n<p><strong>总的来说就是，数据存在的节点越多，分区容忍性越高，但要复制更新的数据就越多，一致性就越难保证。为了保证一致性，更新所有节点数据所需要的时间就越长，可用性就会降低。</strong></p>\n<p>作者：邬江<br>链接：<a href=\"https://www.zhihu.com/question/54105974/answer/139037688\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/54105974/answer/139037688</a><br>来源：知乎</p>"},{"uuid":"adba71d0-0571-11e7-a54e-9d702a77433f","title":"elasticsearch5.0升级问题","date":"2017-03-10T09:12:26.000Z","_content":"\n\nelasticsearch 5.0 安装过程中遇到了一些问题，通过查找资料几乎都解决掉了，这里简单记录一下 ，供以后查阅参考，也希望可以帮助遇到同样问题的你。\n\n<!--more-->\n问题一：警告提示\n\n```shell\n[2016-11-06T16:27:21,712][WARN ][o.e.b.JNANatives ] unable to install syscall filter: \njava.lang.UnsupportedOperationException: seccomp unavailable: requires kernel 3.5+ with CONFIG_SECCOMP and CONFIG_SECCOMP_FILTER compiled in\nat org.elasticsearch.bootstrap.Seccomp.linuxImpl(Seccomp.java:349) ~[elasticsearch-5.0.0.jar:5.0.0]\nat org.elasticsearch.bootstrap.Seccomp.init(Seccomp.java:630) ~[elasticsearch-5.0.0.jar:5.0.0]\n```\n\n报了一大串错误，其实只是一个警告。\n\n解决：使用linux版本，就不会出现此类问题了。\n\n \n\n问题二：ERROR: bootstrap checks failed\n\n```shell\nmax file descriptors [4096] for elasticsearch process likely too low, increase to at least [65536]\nmax number of threads [1024] for user [lishang] likely too low, increase to at least [2048]\n```\n\n解决：切换到root用户，编辑limits.conf 添加类似如下内容\n\nvi /etc/security/limits.conf \n\n添加如下内容:\n\n* soft nofile 65536\n\n* hard nofile 131072\n\n* soft nproc 2048\n\n* hard nproc 4096\n\n \n\n问题三：max number of threads [1024] for user [lish] likely too low, increase to at least [2048]\n\n解决：切换到root用户，进入limits.d目录下修改配置文件。\n\nvi /etc/security/limits.d/90-nproc.conf \n\n修改如下内容：\n\n* soft nproc 1024\n\n#修改为\n\n* soft nproc 2048\n \n\n问题四：max virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]\n\n解决：切换到root用户修改配置sysctl.conf\n\nvi /etc/sysctl.conf \n\n添加下面配置：\n\nvm.max_map_count=655360\n\n并执行命令：\n\nsysctl -p\n\n然后，重新启动elasticsearch，即可启动成功。\n","source":"_posts/elasticsearch5-0升级问题.md","raw":"---\nuuid: adba71d0-0571-11e7-a54e-9d702a77433f\ntitle: elasticsearch5.0升级问题\ndate: 2017-03-10 17:12:26\ntags:\n---\n\n\nelasticsearch 5.0 安装过程中遇到了一些问题，通过查找资料几乎都解决掉了，这里简单记录一下 ，供以后查阅参考，也希望可以帮助遇到同样问题的你。\n\n<!--more-->\n问题一：警告提示\n\n```shell\n[2016-11-06T16:27:21,712][WARN ][o.e.b.JNANatives ] unable to install syscall filter: \njava.lang.UnsupportedOperationException: seccomp unavailable: requires kernel 3.5+ with CONFIG_SECCOMP and CONFIG_SECCOMP_FILTER compiled in\nat org.elasticsearch.bootstrap.Seccomp.linuxImpl(Seccomp.java:349) ~[elasticsearch-5.0.0.jar:5.0.0]\nat org.elasticsearch.bootstrap.Seccomp.init(Seccomp.java:630) ~[elasticsearch-5.0.0.jar:5.0.0]\n```\n\n报了一大串错误，其实只是一个警告。\n\n解决：使用linux版本，就不会出现此类问题了。\n\n \n\n问题二：ERROR: bootstrap checks failed\n\n```shell\nmax file descriptors [4096] for elasticsearch process likely too low, increase to at least [65536]\nmax number of threads [1024] for user [lishang] likely too low, increase to at least [2048]\n```\n\n解决：切换到root用户，编辑limits.conf 添加类似如下内容\n\nvi /etc/security/limits.conf \n\n添加如下内容:\n\n* soft nofile 65536\n\n* hard nofile 131072\n\n* soft nproc 2048\n\n* hard nproc 4096\n\n \n\n问题三：max number of threads [1024] for user [lish] likely too low, increase to at least [2048]\n\n解决：切换到root用户，进入limits.d目录下修改配置文件。\n\nvi /etc/security/limits.d/90-nproc.conf \n\n修改如下内容：\n\n* soft nproc 1024\n\n#修改为\n\n* soft nproc 2048\n \n\n问题四：max virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]\n\n解决：切换到root用户修改配置sysctl.conf\n\nvi /etc/sysctl.conf \n\n添加下面配置：\n\nvm.max_map_count=655360\n\n并执行命令：\n\nsysctl -p\n\n然后，重新启动elasticsearch，即可启动成功。\n","slug":"elasticsearch5-0升级问题","published":1,"updated":"2017-08-15T02:57:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9d1000g91wqz6r3engb","content":"<p>elasticsearch 5.0 安装过程中遇到了一些问题，通过查找资料几乎都解决掉了，这里简单记录一下 ，供以后查阅参考，也希望可以帮助遇到同样问题的你。</p>\n<a id=\"more\"></a>\n<p>问题一：警告提示</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[2016-11-06T16:27:21,712][WARN ][o.e.b.JNANatives ] unable to install syscall filter: </div><div class=\"line\">java.lang.UnsupportedOperationException: seccomp unavailable: requires kernel 3.5+ with CONFIG_SECCOMP and CONFIG_SECCOMP_FILTER compiled in</div><div class=\"line\">at org.elasticsearch.bootstrap.Seccomp.linuxImpl(Seccomp.java:349) ~[elasticsearch-5.0.0.jar:5.0.0]</div><div class=\"line\">at org.elasticsearch.bootstrap.Seccomp.init(Seccomp.java:630) ~[elasticsearch-5.0.0.jar:5.0.0]</div></pre></td></tr></table></figure>\n<p>报了一大串错误，其实只是一个警告。</p>\n<p>解决：使用linux版本，就不会出现此类问题了。</p>\n<p>问题二：ERROR: bootstrap checks failed</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">max file descriptors [4096] for elasticsearch process likely too low, increase to at least [65536]</div><div class=\"line\">max number of threads [1024] for user [lishang] likely too low, increase to at least [2048]</div></pre></td></tr></table></figure>\n<p>解决：切换到root用户，编辑limits.conf 添加类似如下内容</p>\n<p>vi /etc/security/limits.conf </p>\n<p>添加如下内容:</p>\n<ul>\n<li><p>soft nofile 65536</p>\n</li>\n<li><p>hard nofile 131072</p>\n</li>\n<li><p>soft nproc 2048</p>\n</li>\n<li><p>hard nproc 4096</p>\n</li>\n</ul>\n<p>问题三：max number of threads [1024] for user [lish] likely too low, increase to at least [2048]</p>\n<p>解决：切换到root用户，进入limits.d目录下修改配置文件。</p>\n<p>vi /etc/security/limits.d/90-nproc.conf </p>\n<p>修改如下内容：</p>\n<ul>\n<li>soft nproc 1024</li>\n</ul>\n<p>#修改为</p>\n<ul>\n<li>soft nproc 2048</li>\n</ul>\n<p>问题四：max virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]</p>\n<p>解决：切换到root用户修改配置sysctl.conf</p>\n<p>vi /etc/sysctl.conf </p>\n<p>添加下面配置：</p>\n<p>vm.max_map_count=655360</p>\n<p>并执行命令：</p>\n<p>sysctl -p</p>\n<p>然后，重新启动elasticsearch，即可启动成功。</p>\n","site":{"data":{}},"excerpt":"<p>elasticsearch 5.0 安装过程中遇到了一些问题，通过查找资料几乎都解决掉了，这里简单记录一下 ，供以后查阅参考，也希望可以帮助遇到同样问题的你。</p>","more":"<p>问题一：警告提示</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[2016-11-06T16:27:21,712][WARN ][o.e.b.JNANatives ] unable to install syscall filter: </div><div class=\"line\">java.lang.UnsupportedOperationException: seccomp unavailable: requires kernel 3.5+ with CONFIG_SECCOMP and CONFIG_SECCOMP_FILTER compiled in</div><div class=\"line\">at org.elasticsearch.bootstrap.Seccomp.linuxImpl(Seccomp.java:349) ~[elasticsearch-5.0.0.jar:5.0.0]</div><div class=\"line\">at org.elasticsearch.bootstrap.Seccomp.init(Seccomp.java:630) ~[elasticsearch-5.0.0.jar:5.0.0]</div></pre></td></tr></table></figure>\n<p>报了一大串错误，其实只是一个警告。</p>\n<p>解决：使用linux版本，就不会出现此类问题了。</p>\n<p>问题二：ERROR: bootstrap checks failed</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">max file descriptors [4096] for elasticsearch process likely too low, increase to at least [65536]</div><div class=\"line\">max number of threads [1024] for user [lishang] likely too low, increase to at least [2048]</div></pre></td></tr></table></figure>\n<p>解决：切换到root用户，编辑limits.conf 添加类似如下内容</p>\n<p>vi /etc/security/limits.conf </p>\n<p>添加如下内容:</p>\n<ul>\n<li><p>soft nofile 65536</p>\n</li>\n<li><p>hard nofile 131072</p>\n</li>\n<li><p>soft nproc 2048</p>\n</li>\n<li><p>hard nproc 4096</p>\n</li>\n</ul>\n<p>问题三：max number of threads [1024] for user [lish] likely too low, increase to at least [2048]</p>\n<p>解决：切换到root用户，进入limits.d目录下修改配置文件。</p>\n<p>vi /etc/security/limits.d/90-nproc.conf </p>\n<p>修改如下内容：</p>\n<ul>\n<li>soft nproc 1024</li>\n</ul>\n<p>#修改为</p>\n<ul>\n<li>soft nproc 2048</li>\n</ul>\n<p>问题四：max virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]</p>\n<p>解决：切换到root用户修改配置sysctl.conf</p>\n<p>vi /etc/sysctl.conf </p>\n<p>添加下面配置：</p>\n<p>vm.max_map_count=655360</p>\n<p>并执行命令：</p>\n<p>sysctl -p</p>\n<p>然后，重新启动elasticsearch，即可启动成功。</p>"},{"title":"git提交规范小工具Commitizen","date":"2018-04-23T08:08:15.000Z","_content":"\n安装步骤\n\nConventional commit messages as a global utility\nInstall commitizen globally, if you have not already.\n\n> npm install -g commitizen\n\nInstall your preferred commitizen adapter globally, for example cz-conventional-changelog\n\n> npm install -g cz-conventional-changelog\n\nCreate a .czrc file in your home directory, with path referring to the preferred, globally installed, commitizen adapter\n\n> echo '{ \"path\": \"cz-conventional-changelog\" }' > ~/.czrc\n\n<!--more-->\n\n````bash\n➜  Dresshelper git:(liu-master) ✗ git cz\ncz-cli@2.8.6, cz-conventional-changelog@1.2.0\n\nLine 1 will be cropped at 100 characters. All other lines will be wrapped after 100 characters.\n\n? Select the type of change that you're committing: (Use arrow keys)\n❯ feat:     A new feature\n  fix:      A bug fix\n  docs:     Documentation only changes\n  style:    Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc.)\n  refactor: A code change that neither fixes a bug or adds a feature\n  perf:     A code change that improves performance\n  test:     Adding missing tests\n  chore:    Changes to the build process or auxiliary tools and libraries such as documentation generation\n  revert:   Reverts a previous commit\n````\n","source":"_posts/git提交规范小工具Commitizen.md","raw":"---\ntitle: git提交规范小工具Commitizen\ndate: 2018-04-23 16:08:15\ntags: git\ncategories: tools\n---\n\n安装步骤\n\nConventional commit messages as a global utility\nInstall commitizen globally, if you have not already.\n\n> npm install -g commitizen\n\nInstall your preferred commitizen adapter globally, for example cz-conventional-changelog\n\n> npm install -g cz-conventional-changelog\n\nCreate a .czrc file in your home directory, with path referring to the preferred, globally installed, commitizen adapter\n\n> echo '{ \"path\": \"cz-conventional-changelog\" }' > ~/.czrc\n\n<!--more-->\n\n````bash\n➜  Dresshelper git:(liu-master) ✗ git cz\ncz-cli@2.8.6, cz-conventional-changelog@1.2.0\n\nLine 1 will be cropped at 100 characters. All other lines will be wrapped after 100 characters.\n\n? Select the type of change that you're committing: (Use arrow keys)\n❯ feat:     A new feature\n  fix:      A bug fix\n  docs:     Documentation only changes\n  style:    Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc.)\n  refactor: A code change that neither fixes a bug or adds a feature\n  perf:     A code change that improves performance\n  test:     Adding missing tests\n  chore:    Changes to the build process or auxiliary tools and libraries such as documentation generation\n  revert:   Reverts a previous commit\n````\n","slug":"git提交规范小工具Commitizen","published":1,"updated":"2018-04-23T08:14:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9d4000j91wqvfr9oxp5","content":"<p>安装步骤</p>\n<p>Conventional commit messages as a global utility<br>Install commitizen globally, if you have not already.</p>\n<blockquote>\n<p>npm install -g commitizen</p>\n</blockquote>\n<p>Install your preferred commitizen adapter globally, for example cz-conventional-changelog</p>\n<blockquote>\n<p>npm install -g cz-conventional-changelog</p>\n</blockquote>\n<p>Create a .czrc file in your home directory, with path referring to the preferred, globally installed, commitizen adapter</p>\n<blockquote>\n<p>echo ‘{ “path”: “cz-conventional-changelog” }’ &gt; ~/.czrc</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  Dresshelper git:(liu-master) ✗ git cz</div><div class=\"line\">cz-cli@2.8.6, cz-conventional-changelog@1.2.0</div><div class=\"line\"></div><div class=\"line\">Line 1 will be cropped at 100 characters. All other lines will be wrapped after 100 characters.</div><div class=\"line\"></div><div class=\"line\">? Select the <span class=\"built_in\">type</span> of change that you<span class=\"string\">'re committing: (Use arrow keys)</span></div><div class=\"line\"><span class=\"string\">❯ feat:     A new feature</span></div><div class=\"line\"><span class=\"string\">  fix:      A bug fix</span></div><div class=\"line\"><span class=\"string\">  docs:     Documentation only changes</span></div><div class=\"line\"><span class=\"string\">  style:    Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc.)</span></div><div class=\"line\"><span class=\"string\">  refactor: A code change that neither fixes a bug or adds a feature</span></div><div class=\"line\"><span class=\"string\">  perf:     A code change that improves performance</span></div><div class=\"line\"><span class=\"string\">  test:     Adding missing tests</span></div><div class=\"line\"><span class=\"string\">  chore:    Changes to the build process or auxiliary tools and libraries such as documentation generation</span></div><div class=\"line\"><span class=\"string\">  revert:   Reverts a previous commit</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>安装步骤</p>\n<p>Conventional commit messages as a global utility<br>Install commitizen globally, if you have not already.</p>\n<blockquote>\n<p>npm install -g commitizen</p>\n</blockquote>\n<p>Install your preferred commitizen adapter globally, for example cz-conventional-changelog</p>\n<blockquote>\n<p>npm install -g cz-conventional-changelog</p>\n</blockquote>\n<p>Create a .czrc file in your home directory, with path referring to the preferred, globally installed, commitizen adapter</p>\n<blockquote>\n<p>echo ‘{ “path”: “cz-conventional-changelog” }’ &gt; ~/.czrc</p>\n</blockquote>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  Dresshelper git:(liu-master) ✗ git cz</div><div class=\"line\">cz-cli@2.8.6, cz-conventional-changelog@1.2.0</div><div class=\"line\"></div><div class=\"line\">Line 1 will be cropped at 100 characters. All other lines will be wrapped after 100 characters.</div><div class=\"line\"></div><div class=\"line\">? Select the <span class=\"built_in\">type</span> of change that you<span class=\"string\">'re committing: (Use arrow keys)</span></div><div class=\"line\"><span class=\"string\">❯ feat:     A new feature</span></div><div class=\"line\"><span class=\"string\">  fix:      A bug fix</span></div><div class=\"line\"><span class=\"string\">  docs:     Documentation only changes</span></div><div class=\"line\"><span class=\"string\">  style:    Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc.)</span></div><div class=\"line\"><span class=\"string\">  refactor: A code change that neither fixes a bug or adds a feature</span></div><div class=\"line\"><span class=\"string\">  perf:     A code change that improves performance</span></div><div class=\"line\"><span class=\"string\">  test:     Adding missing tests</span></div><div class=\"line\"><span class=\"string\">  chore:    Changes to the build process or auxiliary tools and libraries such as documentation generation</span></div><div class=\"line\"><span class=\"string\">  revert:   Reverts a previous commit</span></div></pre></td></tr></table></figure>"},{"uuid":"6a0a6020-30dd-11e7-b627-e906de4ca710","title":"explain详解.md","date":"2017-05-04T15:21:58.000Z","_content":"","source":"_posts/explain详解-md.md","raw":"---\nuuid: 6a0a6020-30dd-11e7-b627-e906de4ca710\ntitle: explain详解.md\ndate: 2017-05-04 23:21:58\ntags: mysql\n---\n","slug":"explain详解-md","published":1,"updated":"2017-08-15T02:57:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9da000m91wqel4518aa","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n<!--more-->\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n<!--more-->\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-08-04T16:50:28.000Z","updated":"2017-08-15T02:57:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9dp000o91wq8js8xaic","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<a id=\"more\"></a>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>","more":"<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>"},{"title":"codis主从同步之后显示不一致问题","date":"2018-03-30T03:56:50.000Z","_content":"\n搭建codis2升级到codis3之后，\ncodis-server-2.x做master，codis-server-3.x做slave；\n同步完成后发现主从的内存大小和keys数量完全不一致……\n\n<!--more-->\n\n![](/images/codis-image.png)\n\n\n### salve日志\n\n```\n18006:S 29 Mar 13:34:11.294 # CONFIG REWRITE executed with success.\n18006:S 29 Mar 13:34:11.884 * Connecting to MASTER 10.0.0.63:4379\n18006:S 29 Mar 13:34:11.884 * MASTER <-> SLAVE sync started\n18006:S 29 Mar 13:34:11.885 * Non blocking connect for SYNC fired the event.\n18006:S 29 Mar 13:34:11.886 * Master replied to PING, replication can continue...\n18006:S 29 Mar 13:34:11.886 * (Non critical) Master does not understand REPLCONF capa: -ERR Unrecognized REPLCONF option: capa\n18006:S 29 Mar 13:34:11.886 * Partial resynchronization not possible (no cached master)\n18006:S 29 Mar 13:34:11.886 * Full resync from master: 07703b01bfc5721ea125b3a483e4fe6c34266c7b:1\n18006:S 29 Mar 13:34:37.704 * MASTER <-> SLAVE sync: receiving 657248822 bytes from master\n18006:S 29 Mar 13:34:41.533 * MASTER <-> SLAVE sync: Flushing old data\n18006:S 29 Mar 13:34:41.533 * MASTER <-> SLAVE sync: Loading DB in memory\n18006:S 29 Mar 13:35:05.369 * MASTER <-> SLAVE sync: Finished with success\n```\n看着没什么异常.\n\n\n### master的replication\n\n```\nrole:master\nconnected_slaves:1\nslave0:ip=10.0.0.64,port=14359,state=online,offset=224734716,lag=0\nmaster_repl_offset:224734716\nrepl_backlog_active:1\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:223686141\nrepl_backlog_histlen:1048576\n```\nmaster和slave的offset是一致的，所以说明主从的同步是一致完全的。\n\n\n### 结论\n那就是我们对下面几个参数的理解有问题了:\n```\ndb0:keys=4155148,expires=4097878,avg_ttl=0\t\n```\n表示0号数据库有 keys 个键、已经被删除的过期键数为expires、键到期的平均剩余时间为avg_ttl ms.\n\n```\n3179850-3135922 = 43,928\n3179598-3135670 = 43,928\n\n4156449-4099179 = 57,270\n4155509-4098239 = 57,270\n```\nkeys-expires主从相等说明是没问题的。\n\n\n\n而salve的avg_ttl，redis是不统计的，所以一直是0\n\n### 参考\n- https://github.com/CodisLabs/codis/issues/645\n- https://github.com/CodisLabs/redis-port/issues/35\n- redis设计与实现\n\n","source":"_posts/codis主从同步之后显示不一致问题.md","raw":"---\ntitle: codis主从同步之后显示不一致问题\ndate: 2018-03-30 11:56:50\ntags: codis\ncategory: 运维\n---\n\n搭建codis2升级到codis3之后，\ncodis-server-2.x做master，codis-server-3.x做slave；\n同步完成后发现主从的内存大小和keys数量完全不一致……\n\n<!--more-->\n\n![](/images/codis-image.png)\n\n\n### salve日志\n\n```\n18006:S 29 Mar 13:34:11.294 # CONFIG REWRITE executed with success.\n18006:S 29 Mar 13:34:11.884 * Connecting to MASTER 10.0.0.63:4379\n18006:S 29 Mar 13:34:11.884 * MASTER <-> SLAVE sync started\n18006:S 29 Mar 13:34:11.885 * Non blocking connect for SYNC fired the event.\n18006:S 29 Mar 13:34:11.886 * Master replied to PING, replication can continue...\n18006:S 29 Mar 13:34:11.886 * (Non critical) Master does not understand REPLCONF capa: -ERR Unrecognized REPLCONF option: capa\n18006:S 29 Mar 13:34:11.886 * Partial resynchronization not possible (no cached master)\n18006:S 29 Mar 13:34:11.886 * Full resync from master: 07703b01bfc5721ea125b3a483e4fe6c34266c7b:1\n18006:S 29 Mar 13:34:37.704 * MASTER <-> SLAVE sync: receiving 657248822 bytes from master\n18006:S 29 Mar 13:34:41.533 * MASTER <-> SLAVE sync: Flushing old data\n18006:S 29 Mar 13:34:41.533 * MASTER <-> SLAVE sync: Loading DB in memory\n18006:S 29 Mar 13:35:05.369 * MASTER <-> SLAVE sync: Finished with success\n```\n看着没什么异常.\n\n\n### master的replication\n\n```\nrole:master\nconnected_slaves:1\nslave0:ip=10.0.0.64,port=14359,state=online,offset=224734716,lag=0\nmaster_repl_offset:224734716\nrepl_backlog_active:1\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:223686141\nrepl_backlog_histlen:1048576\n```\nmaster和slave的offset是一致的，所以说明主从的同步是一致完全的。\n\n\n### 结论\n那就是我们对下面几个参数的理解有问题了:\n```\ndb0:keys=4155148,expires=4097878,avg_ttl=0\t\n```\n表示0号数据库有 keys 个键、已经被删除的过期键数为expires、键到期的平均剩余时间为avg_ttl ms.\n\n```\n3179850-3135922 = 43,928\n3179598-3135670 = 43,928\n\n4156449-4099179 = 57,270\n4155509-4098239 = 57,270\n```\nkeys-expires主从相等说明是没问题的。\n\n\n\n而salve的avg_ttl，redis是不统计的，所以一直是0\n\n### 参考\n- https://github.com/CodisLabs/codis/issues/645\n- https://github.com/CodisLabs/redis-port/issues/35\n- redis设计与实现\n\n","slug":"codis主从同步之后显示不一致问题","published":1,"updated":"2018-04-02T02:28:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9dt000s91wqtsxbd452","content":"<p>搭建codis2升级到codis3之后，<br>codis-server-2.x做master，codis-server-3.x做slave；<br>同步完成后发现主从的内存大小和keys数量完全不一致……</p>\n<a id=\"more\"></a>\n<p><img src=\"/images/codis-image.png\" alt=\"\"></p>\n<h3 id=\"salve日志\"><a href=\"#salve日志\" class=\"headerlink\" title=\"salve日志\"></a>salve日志</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">18006:S 29 Mar 13:34:11.294 # CONFIG REWRITE executed with success.</div><div class=\"line\">18006:S 29 Mar 13:34:11.884 * Connecting to MASTER 10.0.0.63:4379</div><div class=\"line\">18006:S 29 Mar 13:34:11.884 * MASTER &lt;-&gt; SLAVE sync started</div><div class=\"line\">18006:S 29 Mar 13:34:11.885 * Non blocking connect for SYNC fired the event.</div><div class=\"line\">18006:S 29 Mar 13:34:11.886 * Master replied to PING, replication can continue...</div><div class=\"line\">18006:S 29 Mar 13:34:11.886 * (Non critical) Master does not understand REPLCONF capa: -ERR Unrecognized REPLCONF option: capa</div><div class=\"line\">18006:S 29 Mar 13:34:11.886 * Partial resynchronization not possible (no cached master)</div><div class=\"line\">18006:S 29 Mar 13:34:11.886 * Full resync from master: 07703b01bfc5721ea125b3a483e4fe6c34266c7b:1</div><div class=\"line\">18006:S 29 Mar 13:34:37.704 * MASTER &lt;-&gt; SLAVE sync: receiving 657248822 bytes from master</div><div class=\"line\">18006:S 29 Mar 13:34:41.533 * MASTER &lt;-&gt; SLAVE sync: Flushing old data</div><div class=\"line\">18006:S 29 Mar 13:34:41.533 * MASTER &lt;-&gt; SLAVE sync: Loading DB in memory</div><div class=\"line\">18006:S 29 Mar 13:35:05.369 * MASTER &lt;-&gt; SLAVE sync: Finished with success</div></pre></td></tr></table></figure>\n<p>看着没什么异常.</p>\n<h3 id=\"master的replication\"><a href=\"#master的replication\" class=\"headerlink\" title=\"master的replication\"></a>master的replication</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">role:master</div><div class=\"line\">connected_slaves:1</div><div class=\"line\">slave0:ip=10.0.0.64,port=14359,state=online,offset=224734716,lag=0</div><div class=\"line\">master_repl_offset:224734716</div><div class=\"line\">repl_backlog_active:1</div><div class=\"line\">repl_backlog_size:1048576</div><div class=\"line\">repl_backlog_first_byte_offset:223686141</div><div class=\"line\">repl_backlog_histlen:1048576</div></pre></td></tr></table></figure>\n<p>master和slave的offset是一致的，所以说明主从的同步是一致完全的。</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>那就是我们对下面几个参数的理解有问题了:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db0:keys=4155148,expires=4097878,avg_ttl=0</div></pre></td></tr></table></figure></p>\n<p>表示0号数据库有 keys 个键、已经被删除的过期键数为expires、键到期的平均剩余时间为avg_ttl ms.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">3179850-3135922 = 43,928</div><div class=\"line\">3179598-3135670 = 43,928</div><div class=\"line\"></div><div class=\"line\">4156449-4099179 = 57,270</div><div class=\"line\">4155509-4098239 = 57,270</div></pre></td></tr></table></figure>\n<p>keys-expires主从相等说明是没问题的。</p>\n<p>而salve的avg_ttl，redis是不统计的，所以一直是0</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://github.com/CodisLabs/codis/issues/645\" target=\"_blank\" rel=\"external\">https://github.com/CodisLabs/codis/issues/645</a></li>\n<li><a href=\"https://github.com/CodisLabs/redis-port/issues/35\" target=\"_blank\" rel=\"external\">https://github.com/CodisLabs/redis-port/issues/35</a></li>\n<li>redis设计与实现</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>搭建codis2升级到codis3之后，<br>codis-server-2.x做master，codis-server-3.x做slave；<br>同步完成后发现主从的内存大小和keys数量完全不一致……</p>","more":"<p><img src=\"/images/codis-image.png\" alt=\"\"></p>\n<h3 id=\"salve日志\"><a href=\"#salve日志\" class=\"headerlink\" title=\"salve日志\"></a>salve日志</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">18006:S 29 Mar 13:34:11.294 # CONFIG REWRITE executed with success.</div><div class=\"line\">18006:S 29 Mar 13:34:11.884 * Connecting to MASTER 10.0.0.63:4379</div><div class=\"line\">18006:S 29 Mar 13:34:11.884 * MASTER &lt;-&gt; SLAVE sync started</div><div class=\"line\">18006:S 29 Mar 13:34:11.885 * Non blocking connect for SYNC fired the event.</div><div class=\"line\">18006:S 29 Mar 13:34:11.886 * Master replied to PING, replication can continue...</div><div class=\"line\">18006:S 29 Mar 13:34:11.886 * (Non critical) Master does not understand REPLCONF capa: -ERR Unrecognized REPLCONF option: capa</div><div class=\"line\">18006:S 29 Mar 13:34:11.886 * Partial resynchronization not possible (no cached master)</div><div class=\"line\">18006:S 29 Mar 13:34:11.886 * Full resync from master: 07703b01bfc5721ea125b3a483e4fe6c34266c7b:1</div><div class=\"line\">18006:S 29 Mar 13:34:37.704 * MASTER &lt;-&gt; SLAVE sync: receiving 657248822 bytes from master</div><div class=\"line\">18006:S 29 Mar 13:34:41.533 * MASTER &lt;-&gt; SLAVE sync: Flushing old data</div><div class=\"line\">18006:S 29 Mar 13:34:41.533 * MASTER &lt;-&gt; SLAVE sync: Loading DB in memory</div><div class=\"line\">18006:S 29 Mar 13:35:05.369 * MASTER &lt;-&gt; SLAVE sync: Finished with success</div></pre></td></tr></table></figure>\n<p>看着没什么异常.</p>\n<h3 id=\"master的replication\"><a href=\"#master的replication\" class=\"headerlink\" title=\"master的replication\"></a>master的replication</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">role:master</div><div class=\"line\">connected_slaves:1</div><div class=\"line\">slave0:ip=10.0.0.64,port=14359,state=online,offset=224734716,lag=0</div><div class=\"line\">master_repl_offset:224734716</div><div class=\"line\">repl_backlog_active:1</div><div class=\"line\">repl_backlog_size:1048576</div><div class=\"line\">repl_backlog_first_byte_offset:223686141</div><div class=\"line\">repl_backlog_histlen:1048576</div></pre></td></tr></table></figure>\n<p>master和slave的offset是一致的，所以说明主从的同步是一致完全的。</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>那就是我们对下面几个参数的理解有问题了:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db0:keys=4155148,expires=4097878,avg_ttl=0</div></pre></td></tr></table></figure></p>\n<p>表示0号数据库有 keys 个键、已经被删除的过期键数为expires、键到期的平均剩余时间为avg_ttl ms.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">3179850-3135922 = 43,928</div><div class=\"line\">3179598-3135670 = 43,928</div><div class=\"line\"></div><div class=\"line\">4156449-4099179 = 57,270</div><div class=\"line\">4155509-4098239 = 57,270</div></pre></td></tr></table></figure>\n<p>keys-expires主从相等说明是没问题的。</p>\n<p>而salve的avg_ttl，redis是不统计的，所以一直是0</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://github.com/CodisLabs/codis/issues/645\" target=\"_blank\" rel=\"external\">https://github.com/CodisLabs/codis/issues/645</a></li>\n<li><a href=\"https://github.com/CodisLabs/redis-port/issues/35\" target=\"_blank\" rel=\"external\">https://github.com/CodisLabs/redis-port/issues/35</a></li>\n<li>redis设计与实现</li>\n</ul>"},{"title":"iterm-lrzsz","date":"2018-03-21T01:50:21.000Z","_content":"\n用过secureCRT，都知道lrzsz在服务器上上传下载文件有多方便。\n这里有个工具[iterm2-zmodem](https://github.com/mmastrac/iterm2-zmodem.git)，简单配置下，也很实用\n\n\n### Save the iterm2-send-zmodem.sh and iterm2-recv-zmodem.sh scripts in /usr/local/bin/\n\nchmod +x /usr/local/bin/iterm2-send-zmodem.sh \nchmod +x /usr/local/bin/iterm2-recv-zmodem.sh \n\n### Preferences=>Profiles=>Advanced=>Triggers=>edit Set up Triggers in iTerm 2 like so:\n\n```\nRegular expression: rz waiting to receive.\\*\\*B0100\nAction: Run Silent Coprocess\nParameters: /usr/local/bin/iterm2-send-zmodem.sh\nInstant: checked\n\nRegular expression: \\*\\*B00000000000000\nAction: Run Silent Coprocess\nParameters: /usr/local/bin/iterm2-recv-zmodem.sh\nInstant: checked\n```\n","source":"_posts/iterm-lrzsz.md","raw":"---\ntitle: iterm-lrzsz\ndate: 2018-03-21 09:50:21\ntags: [ iterm , lrzsz ]\ncategories: tools\n---\n\n用过secureCRT，都知道lrzsz在服务器上上传下载文件有多方便。\n这里有个工具[iterm2-zmodem](https://github.com/mmastrac/iterm2-zmodem.git)，简单配置下，也很实用\n\n\n### Save the iterm2-send-zmodem.sh and iterm2-recv-zmodem.sh scripts in /usr/local/bin/\n\nchmod +x /usr/local/bin/iterm2-send-zmodem.sh \nchmod +x /usr/local/bin/iterm2-recv-zmodem.sh \n\n### Preferences=>Profiles=>Advanced=>Triggers=>edit Set up Triggers in iTerm 2 like so:\n\n```\nRegular expression: rz waiting to receive.\\*\\*B0100\nAction: Run Silent Coprocess\nParameters: /usr/local/bin/iterm2-send-zmodem.sh\nInstant: checked\n\nRegular expression: \\*\\*B00000000000000\nAction: Run Silent Coprocess\nParameters: /usr/local/bin/iterm2-recv-zmodem.sh\nInstant: checked\n```\n","slug":"iterm-lrzsz","published":1,"updated":"2018-03-21T02:30:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9dw000u91wqznkfzenu","content":"<p>用过secureCRT，都知道lrzsz在服务器上上传下载文件有多方便。<br>这里有个工具<a href=\"https://github.com/mmastrac/iterm2-zmodem.git\" target=\"_blank\" rel=\"external\">iterm2-zmodem</a>，简单配置下，也很实用</p>\n<h3 id=\"Save-the-iterm2-send-zmodem-sh-and-iterm2-recv-zmodem-sh-scripts-in-usr-local-bin\"><a href=\"#Save-the-iterm2-send-zmodem-sh-and-iterm2-recv-zmodem-sh-scripts-in-usr-local-bin\" class=\"headerlink\" title=\"Save the iterm2-send-zmodem.sh and iterm2-recv-zmodem.sh scripts in /usr/local/bin/\"></a>Save the iterm2-send-zmodem.sh and iterm2-recv-zmodem.sh scripts in /usr/local/bin/</h3><p>chmod +x /usr/local/bin/iterm2-send-zmodem.sh<br>chmod +x /usr/local/bin/iterm2-recv-zmodem.sh </p>\n<h3 id=\"Preferences-gt-Profiles-gt-Advanced-gt-Triggers-gt-edit-Set-up-Triggers-in-iTerm-2-like-so\"><a href=\"#Preferences-gt-Profiles-gt-Advanced-gt-Triggers-gt-edit-Set-up-Triggers-in-iTerm-2-like-so\" class=\"headerlink\" title=\"Preferences=&gt;Profiles=&gt;Advanced=&gt;Triggers=&gt;edit Set up Triggers in iTerm 2 like so:\"></a>Preferences=&gt;Profiles=&gt;Advanced=&gt;Triggers=&gt;edit Set up Triggers in iTerm 2 like so:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Regular expression: rz waiting to receive.\\*\\*B0100</div><div class=\"line\">Action: Run Silent Coprocess</div><div class=\"line\">Parameters: /usr/local/bin/iterm2-send-zmodem.sh</div><div class=\"line\">Instant: checked</div><div class=\"line\"></div><div class=\"line\">Regular expression: \\*\\*B00000000000000</div><div class=\"line\">Action: Run Silent Coprocess</div><div class=\"line\">Parameters: /usr/local/bin/iterm2-recv-zmodem.sh</div><div class=\"line\">Instant: checked</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>用过secureCRT，都知道lrzsz在服务器上上传下载文件有多方便。<br>这里有个工具<a href=\"https://github.com/mmastrac/iterm2-zmodem.git\" target=\"_blank\" rel=\"external\">iterm2-zmodem</a>，简单配置下，也很实用</p>\n<h3 id=\"Save-the-iterm2-send-zmodem-sh-and-iterm2-recv-zmodem-sh-scripts-in-usr-local-bin\"><a href=\"#Save-the-iterm2-send-zmodem-sh-and-iterm2-recv-zmodem-sh-scripts-in-usr-local-bin\" class=\"headerlink\" title=\"Save the iterm2-send-zmodem.sh and iterm2-recv-zmodem.sh scripts in /usr/local/bin/\"></a>Save the iterm2-send-zmodem.sh and iterm2-recv-zmodem.sh scripts in /usr/local/bin/</h3><p>chmod +x /usr/local/bin/iterm2-send-zmodem.sh<br>chmod +x /usr/local/bin/iterm2-recv-zmodem.sh </p>\n<h3 id=\"Preferences-gt-Profiles-gt-Advanced-gt-Triggers-gt-edit-Set-up-Triggers-in-iTerm-2-like-so\"><a href=\"#Preferences-gt-Profiles-gt-Advanced-gt-Triggers-gt-edit-Set-up-Triggers-in-iTerm-2-like-so\" class=\"headerlink\" title=\"Preferences=&gt;Profiles=&gt;Advanced=&gt;Triggers=&gt;edit Set up Triggers in iTerm 2 like so:\"></a>Preferences=&gt;Profiles=&gt;Advanced=&gt;Triggers=&gt;edit Set up Triggers in iTerm 2 like so:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Regular expression: rz waiting to receive.\\*\\*B0100</div><div class=\"line\">Action: Run Silent Coprocess</div><div class=\"line\">Parameters: /usr/local/bin/iterm2-send-zmodem.sh</div><div class=\"line\">Instant: checked</div><div class=\"line\"></div><div class=\"line\">Regular expression: \\*\\*B00000000000000</div><div class=\"line\">Action: Run Silent Coprocess</div><div class=\"line\">Parameters: /usr/local/bin/iterm2-recv-zmodem.sh</div><div class=\"line\">Instant: checked</div></pre></td></tr></table></figure>\n"},{"title":"hexo install","date":"2017-08-04T17:10:07.000Z","_content":"\n## npm install hexo-deployer-git –save\n安装之后可以使用hexo deploy一键部署到github\n\n## hexo new 文章标题\n\n## hexo generate\n生成静态文件\n\n## hexo p\nhexo publish\n\n## hexo d\nhexo deploy#部署\n<!---more-->\n\n## hexo clean\n清除缓存 网页正常情况下可以忽略此条命令\n\n## hexo server\n本地服务可以调试预览\nHexo 会监视文件变动并自动更新，您无须重启服务器。\n\n## hexo server -s\n静态模式\n\n## hexo server -p 5000\n更改端口\n\n## hexo server -i 192.168.1.1\n自定义 IP\n","source":"_posts/hexo-install.md","raw":"---\ntitle: hexo install\ndate: 2017-08-05 01:10:07\ntags: note\n---\n\n## npm install hexo-deployer-git –save\n安装之后可以使用hexo deploy一键部署到github\n\n## hexo new 文章标题\n\n## hexo generate\n生成静态文件\n\n## hexo p\nhexo publish\n\n## hexo d\nhexo deploy#部署\n<!---more-->\n\n## hexo clean\n清除缓存 网页正常情况下可以忽略此条命令\n\n## hexo server\n本地服务可以调试预览\nHexo 会监视文件变动并自动更新，您无须重启服务器。\n\n## hexo server -s\n静态模式\n\n## hexo server -p 5000\n更改端口\n\n## hexo server -i 192.168.1.1\n自定义 IP\n","slug":"hexo-install","published":1,"updated":"2018-03-21T02:45:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9dy000z91wq9rm1br9s","content":"<h2 id=\"npm-install-hexo-deployer-git-–save\"><a href=\"#npm-install-hexo-deployer-git-–save\" class=\"headerlink\" title=\"npm install hexo-deployer-git –save\"></a>npm install hexo-deployer-git –save</h2><p>安装之后可以使用hexo deploy一键部署到github</p>\n<h2 id=\"hexo-new-文章标题\"><a href=\"#hexo-new-文章标题\" class=\"headerlink\" title=\"hexo new 文章标题\"></a>hexo new 文章标题</h2><h2 id=\"hexo-generate\"><a href=\"#hexo-generate\" class=\"headerlink\" title=\"hexo generate\"></a>hexo generate</h2><p>生成静态文件</p>\n<h2 id=\"hexo-p\"><a href=\"#hexo-p\" class=\"headerlink\" title=\"hexo p\"></a>hexo p</h2><p>hexo publish</p>\n<h2 id=\"hexo-d\"><a href=\"#hexo-d\" class=\"headerlink\" title=\"hexo d\"></a>hexo d</h2><p>hexo deploy#部署<br><a id=\"more\"></a></p>\n<h2 id=\"hexo-clean\"><a href=\"#hexo-clean\" class=\"headerlink\" title=\"hexo clean\"></a>hexo clean</h2><p>清除缓存 网页正常情况下可以忽略此条命令</p>\n<h2 id=\"hexo-server\"><a href=\"#hexo-server\" class=\"headerlink\" title=\"hexo server\"></a>hexo server</h2><p>本地服务可以调试预览<br>Hexo 会监视文件变动并自动更新，您无须重启服务器。</p>\n<h2 id=\"hexo-server-s\"><a href=\"#hexo-server-s\" class=\"headerlink\" title=\"hexo server -s\"></a>hexo server -s</h2><p>静态模式</p>\n<h2 id=\"hexo-server-p-5000\"><a href=\"#hexo-server-p-5000\" class=\"headerlink\" title=\"hexo server -p 5000\"></a>hexo server -p 5000</h2><p>更改端口</p>\n<h2 id=\"hexo-server-i-192-168-1-1\"><a href=\"#hexo-server-i-192-168-1-1\" class=\"headerlink\" title=\"hexo server -i 192.168.1.1\"></a>hexo server -i 192.168.1.1</h2><p>自定义 IP</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"npm-install-hexo-deployer-git-–save\"><a href=\"#npm-install-hexo-deployer-git-–save\" class=\"headerlink\" title=\"npm install hexo-deployer-git –save\"></a>npm install hexo-deployer-git –save</h2><p>安装之后可以使用hexo deploy一键部署到github</p>\n<h2 id=\"hexo-new-文章标题\"><a href=\"#hexo-new-文章标题\" class=\"headerlink\" title=\"hexo new 文章标题\"></a>hexo new 文章标题</h2><h2 id=\"hexo-generate\"><a href=\"#hexo-generate\" class=\"headerlink\" title=\"hexo generate\"></a>hexo generate</h2><p>生成静态文件</p>\n<h2 id=\"hexo-p\"><a href=\"#hexo-p\" class=\"headerlink\" title=\"hexo p\"></a>hexo p</h2><p>hexo publish</p>\n<h2 id=\"hexo-d\"><a href=\"#hexo-d\" class=\"headerlink\" title=\"hexo d\"></a>hexo d</h2><p>hexo deploy#部署<br>","more":"</p>\n<h2 id=\"hexo-clean\"><a href=\"#hexo-clean\" class=\"headerlink\" title=\"hexo clean\"></a>hexo clean</h2><p>清除缓存 网页正常情况下可以忽略此条命令</p>\n<h2 id=\"hexo-server\"><a href=\"#hexo-server\" class=\"headerlink\" title=\"hexo server\"></a>hexo server</h2><p>本地服务可以调试预览<br>Hexo 会监视文件变动并自动更新，您无须重启服务器。</p>\n<h2 id=\"hexo-server-s\"><a href=\"#hexo-server-s\" class=\"headerlink\" title=\"hexo server -s\"></a>hexo server -s</h2><p>静态模式</p>\n<h2 id=\"hexo-server-p-5000\"><a href=\"#hexo-server-p-5000\" class=\"headerlink\" title=\"hexo server -p 5000\"></a>hexo server -p 5000</h2><p>更改端口</p>\n<h2 id=\"hexo-server-i-192-168-1-1\"><a href=\"#hexo-server-i-192-168-1-1\" class=\"headerlink\" title=\"hexo server -i 192.168.1.1\"></a>hexo server -i 192.168.1.1</h2><p>自定义 IP</p>"},{"title":"hexo blog","date":"2017-01-03T16:11:54.000Z","_content":"- hexo安装\n[hexo install](https://hexo.io/zh-cn/docs/setup.html)\n- hexo next主题\n[next theme](http://theme-next.iissnan.com/getting-started.html)\n- npm install hexo-deployer-git --save\n\t安装之后可以使用hexo deploy一键部署到github\n- hexo new 文章标题\n- hexo generate\n\t生成静态文件\n- hexo p == hexo publish\n- hexo d == hexo deploy#部署\n- hexo clean #清除缓存 网页正常情况下可以忽略此条命令\n- hexo server\n\t本地服务可以调试预览\n\thexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。\n\thexo server -s #静态模式\n\thexo server -p 5000 #更改端口\n\thexo server -i 192.168.1.1 #自定义 IP\n\n<!--more-->\n\n```\n\ttags:\n\t  - tag1\n\t  - tag2\n\tcategories: xxx\n```\n冒号后面要有空格\n应该在 ---之上，---下面是页面内容\n令：要添加tags和categories页面；且主题的配置文件和站点的配置文件tags和categories的注释要打开\n\n- 添加标签\nhexo new page tags\n确认站点配置文件里有tag_dir: tags\n确认主题配置文件里有tags: /tags\n编辑站点的source/tags/index.md，添加\n\n```\ntitle: tags\ndate: 2015-10-20 06:49:50\ntype: \"tags\"\ncomments: false\n```\n\n- 添加分类\nhexo new page categories\n确认站点配置文件里有category_dir: categories\n确认主题配置文件里有categories: /categories\n编辑站点的source/categories/index.md，添加\n\n```\ntitle: categories\ndate: 2015-10-20 06:49:50\ntype: \"categories\"\ncomments: false\n```\n","source":"_posts/hexo-blog.md","raw":"---\ntitle: hexo blog\ndate: 2017-01-04 00:11:54\ntags: blog\n---\n- hexo安装\n[hexo install](https://hexo.io/zh-cn/docs/setup.html)\n- hexo next主题\n[next theme](http://theme-next.iissnan.com/getting-started.html)\n- npm install hexo-deployer-git --save\n\t安装之后可以使用hexo deploy一键部署到github\n- hexo new 文章标题\n- hexo generate\n\t生成静态文件\n- hexo p == hexo publish\n- hexo d == hexo deploy#部署\n- hexo clean #清除缓存 网页正常情况下可以忽略此条命令\n- hexo server\n\t本地服务可以调试预览\n\thexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。\n\thexo server -s #静态模式\n\thexo server -p 5000 #更改端口\n\thexo server -i 192.168.1.1 #自定义 IP\n\n<!--more-->\n\n```\n\ttags:\n\t  - tag1\n\t  - tag2\n\tcategories: xxx\n```\n冒号后面要有空格\n应该在 ---之上，---下面是页面内容\n令：要添加tags和categories页面；且主题的配置文件和站点的配置文件tags和categories的注释要打开\n\n- 添加标签\nhexo new page tags\n确认站点配置文件里有tag_dir: tags\n确认主题配置文件里有tags: /tags\n编辑站点的source/tags/index.md，添加\n\n```\ntitle: tags\ndate: 2015-10-20 06:49:50\ntype: \"tags\"\ncomments: false\n```\n\n- 添加分类\nhexo new page categories\n确认站点配置文件里有category_dir: categories\n确认主题配置文件里有categories: /categories\n编辑站点的source/categories/index.md，添加\n\n```\ntitle: categories\ndate: 2015-10-20 06:49:50\ntype: \"categories\"\ncomments: false\n```\n","slug":"hexo-blog","published":1,"updated":"2018-03-21T02:40:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9dz001291wqf6bidlr5","content":"<ul>\n<li>hexo安装<br><a href=\"https://hexo.io/zh-cn/docs/setup.html\" target=\"_blank\" rel=\"external\">hexo install</a></li>\n<li>hexo next主题<br><a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">next theme</a></li>\n<li>npm install hexo-deployer-git –save<br>  安装之后可以使用hexo deploy一键部署到github</li>\n<li>hexo new 文章标题</li>\n<li>hexo generate<br>  生成静态文件</li>\n<li>hexo p == hexo publish</li>\n<li>hexo d == hexo deploy#部署</li>\n<li>hexo clean #清除缓存 网页正常情况下可以忽略此条命令</li>\n<li>hexo server<br>  本地服务可以调试预览<br>  hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。<br>  hexo server -s #静态模式<br>  hexo server -p 5000 #更改端口<br>  hexo server -i 192.168.1.1 #自定义 IP</li>\n</ul>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">tags:</div><div class=\"line\">  - tag1</div><div class=\"line\">  - tag2</div><div class=\"line\">categories: xxx</div></pre></td></tr></table></figure>\n<p>冒号后面要有空格<br>应该在 —之上，—下面是页面内容<br>令：要添加tags和categories页面；且主题的配置文件和站点的配置文件tags和categories的注释要打开</p>\n<ul>\n<li>添加标签<br>hexo new page tags<br>确认站点配置文件里有tag_dir: tags<br>确认主题配置文件里有tags: /tags<br>编辑站点的source/tags/index.md，添加</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: tags</div><div class=\"line\">date: 2015-10-20 06:49:50</div><div class=\"line\">type: &quot;tags&quot;</div><div class=\"line\">comments: false</div></pre></td></tr></table></figure>\n<ul>\n<li>添加分类<br>hexo new page categories<br>确认站点配置文件里有category_dir: categories<br>确认主题配置文件里有categories: /categories<br>编辑站点的source/categories/index.md，添加</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: categories</div><div class=\"line\">date: 2015-10-20 06:49:50</div><div class=\"line\">type: &quot;categories&quot;</div><div class=\"line\">comments: false</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<ul>\n<li>hexo安装<br><a href=\"https://hexo.io/zh-cn/docs/setup.html\" target=\"_blank\" rel=\"external\">hexo install</a></li>\n<li>hexo next主题<br><a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">next theme</a></li>\n<li>npm install hexo-deployer-git –save<br>  安装之后可以使用hexo deploy一键部署到github</li>\n<li>hexo new 文章标题</li>\n<li>hexo generate<br>  生成静态文件</li>\n<li>hexo p == hexo publish</li>\n<li>hexo d == hexo deploy#部署</li>\n<li>hexo clean #清除缓存 网页正常情况下可以忽略此条命令</li>\n<li>hexo server<br>  本地服务可以调试预览<br>  hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。<br>  hexo server -s #静态模式<br>  hexo server -p 5000 #更改端口<br>  hexo server -i 192.168.1.1 #自定义 IP</li>\n</ul>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">tags:</div><div class=\"line\">  - tag1</div><div class=\"line\">  - tag2</div><div class=\"line\">categories: xxx</div></pre></td></tr></table></figure>\n<p>冒号后面要有空格<br>应该在 —之上，—下面是页面内容<br>令：要添加tags和categories页面；且主题的配置文件和站点的配置文件tags和categories的注释要打开</p>\n<ul>\n<li>添加标签<br>hexo new page tags<br>确认站点配置文件里有tag_dir: tags<br>确认主题配置文件里有tags: /tags<br>编辑站点的source/tags/index.md，添加</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: tags</div><div class=\"line\">date: 2015-10-20 06:49:50</div><div class=\"line\">type: &quot;tags&quot;</div><div class=\"line\">comments: false</div></pre></td></tr></table></figure>\n<ul>\n<li>添加分类<br>hexo new page categories<br>确认站点配置文件里有category_dir: categories<br>确认主题配置文件里有categories: /categories<br>编辑站点的source/categories/index.md，添加</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: categories</div><div class=\"line\">date: 2015-10-20 06:49:50</div><div class=\"line\">type: &quot;categories&quot;</div><div class=\"line\">comments: false</div></pre></td></tr></table></figure>"},{"title":"kubernetes安装","date":"2017-08-04T09:53:20.000Z","_content":"\n## 安装minikube\n\n```\ncurl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.7.1/minikube-darwin-amd64\nchmod +x minikube\nsudo mv minikube /usr/local/bin/\n```\n\n\n## 启动minikube\n```\nminikube start\nminikube status\n```\n\n\n## 安装kubectl\n\n```\ncurl -Lo kubectl http://storage.googleapis.com/kubernetes-release/release/v1.3.0/bin/darwin/amd64/kubectl\nchmod +x kubectl\nsudo mv kubectl /usr/local/bin/\n```\n\n\n## 查看\n\n```\nkubectl get pods --all-namespaces\neval $(minikube docker-env)\n```\n\n\n## 参考doc\n[Kubernetes in 30 minutes with minikube on Mac](http://www.rushiagr.com/blog/2016/08/16/kubernetes-in-30-minutes-with-minikube-on-mac/)\n","source":"_posts/kubernetes安装.md","raw":"---\ntitle: kubernetes安装\ndate: 2017-08-04 17:53:20\ntags: kubernetes\ncategories: 运维\n---\n\n## 安装minikube\n\n```\ncurl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.7.1/minikube-darwin-amd64\nchmod +x minikube\nsudo mv minikube /usr/local/bin/\n```\n\n\n## 启动minikube\n```\nminikube start\nminikube status\n```\n\n\n## 安装kubectl\n\n```\ncurl -Lo kubectl http://storage.googleapis.com/kubernetes-release/release/v1.3.0/bin/darwin/amd64/kubectl\nchmod +x kubectl\nsudo mv kubectl /usr/local/bin/\n```\n\n\n## 查看\n\n```\nkubectl get pods --all-namespaces\neval $(minikube docker-env)\n```\n\n\n## 参考doc\n[Kubernetes in 30 minutes with minikube on Mac](http://www.rushiagr.com/blog/2016/08/16/kubernetes-in-30-minutes-with-minikube-on-mac/)\n","slug":"kubernetes安装","published":1,"updated":"2018-03-21T02:34:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9e1001791wqbh3bnrql","content":"<h2 id=\"安装minikube\"><a href=\"#安装minikube\" class=\"headerlink\" title=\"安装minikube\"></a>安装minikube</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.7.1/minikube-darwin-amd64</div><div class=\"line\">chmod +x minikube</div><div class=\"line\">sudo mv minikube /usr/local/bin/</div></pre></td></tr></table></figure>\n<h2 id=\"启动minikube\"><a href=\"#启动minikube\" class=\"headerlink\" title=\"启动minikube\"></a>启动minikube</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">minikube start</div><div class=\"line\">minikube status</div></pre></td></tr></table></figure>\n<h2 id=\"安装kubectl\"><a href=\"#安装kubectl\" class=\"headerlink\" title=\"安装kubectl\"></a>安装kubectl</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -Lo kubectl http://storage.googleapis.com/kubernetes-release/release/v1.3.0/bin/darwin/amd64/kubectl</div><div class=\"line\">chmod +x kubectl</div><div class=\"line\">sudo mv kubectl /usr/local/bin/</div></pre></td></tr></table></figure>\n<h2 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">kubectl get pods --all-namespaces</div><div class=\"line\">eval $(minikube docker-env)</div></pre></td></tr></table></figure>\n<h2 id=\"参考doc\"><a href=\"#参考doc\" class=\"headerlink\" title=\"参考doc\"></a>参考doc</h2><p><a href=\"http://www.rushiagr.com/blog/2016/08/16/kubernetes-in-30-minutes-with-minikube-on-mac/\" target=\"_blank\" rel=\"external\">Kubernetes in 30 minutes with minikube on Mac</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装minikube\"><a href=\"#安装minikube\" class=\"headerlink\" title=\"安装minikube\"></a>安装minikube</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.7.1/minikube-darwin-amd64</div><div class=\"line\">chmod +x minikube</div><div class=\"line\">sudo mv minikube /usr/local/bin/</div></pre></td></tr></table></figure>\n<h2 id=\"启动minikube\"><a href=\"#启动minikube\" class=\"headerlink\" title=\"启动minikube\"></a>启动minikube</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">minikube start</div><div class=\"line\">minikube status</div></pre></td></tr></table></figure>\n<h2 id=\"安装kubectl\"><a href=\"#安装kubectl\" class=\"headerlink\" title=\"安装kubectl\"></a>安装kubectl</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -Lo kubectl http://storage.googleapis.com/kubernetes-release/release/v1.3.0/bin/darwin/amd64/kubectl</div><div class=\"line\">chmod +x kubectl</div><div class=\"line\">sudo mv kubectl /usr/local/bin/</div></pre></td></tr></table></figure>\n<h2 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">kubectl get pods --all-namespaces</div><div class=\"line\">eval $(minikube docker-env)</div></pre></td></tr></table></figure>\n<h2 id=\"参考doc\"><a href=\"#参考doc\" class=\"headerlink\" title=\"参考doc\"></a>参考doc</h2><p><a href=\"http://www.rushiagr.com/blog/2016/08/16/kubernetes-in-30-minutes-with-minikube-on-mac/\" target=\"_blank\" rel=\"external\">Kubernetes in 30 minutes with minikube on Mac</a></p>\n"},{"uuid":"074389f0-d749-11e6-b682-1dff7bae05e3","title":"note","date":"2017-01-10T15:25:33.000Z","_content":"\n- MVC是观察者模式(Observer), 策略模式(Strategy)和组合模式(Composite)三个设计模式的演变，MVC是模式的组合\n- 高性能离不开异步，异步离不开队列，而其内部都是Producer-Comsumer模式的原理\n\n<!--more-->\n","source":"_posts/note.md","raw":"---\nuuid: 074389f0-d749-11e6-b682-1dff7bae05e3\ntitle: note\ndate: 2017-01-10 23:25:33\ntags: note\n---\n\n- MVC是观察者模式(Observer), 策略模式(Strategy)和组合模式(Composite)三个设计模式的演变，MVC是模式的组合\n- 高性能离不开异步，异步离不开队列，而其内部都是Producer-Comsumer模式的原理\n\n<!--more-->\n","slug":"note","published":1,"updated":"2017-08-15T02:57:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9e4001991wq5atibm2f","content":"<ul>\n<li>MVC是观察者模式(Observer), 策略模式(Strategy)和组合模式(Composite)三个设计模式的演变，MVC是模式的组合</li>\n<li>高性能离不开异步，异步离不开队列，而其内部都是Producer-Comsumer模式的原理</li>\n</ul>\n<a id=\"more\"></a>\n","site":{"data":{}},"excerpt":"<ul>\n<li>MVC是观察者模式(Observer), 策略模式(Strategy)和组合模式(Composite)三个设计模式的演变，MVC是模式的组合</li>\n<li>高性能离不开异步，异步离不开队列，而其内部都是Producer-Comsumer模式的原理</li>\n</ul>","more":""},{"title":"number bit","date":"2017-01-04T14:54:04.000Z","_content":"\n```php\npublic function test()\n{\n\t$advId = 1458013447;\n\t$id = 5;\n\techo $total = $advId << 32 | $id;\n\techo PHP_EOL;\n\n\techo $result = $total & 0xFFFFFFFF;\n\techo PHP_EOL;\n\techo $result = $total >> 32 & 0xFFFFFFFF;\n\techo PHP_EOL;\n}\n```\n","source":"_posts/number-bit.md","raw":"---\ntitle: number bit\ndate: 2017-01-04 22:54:04\ntags: php\n---\n\n```php\npublic function test()\n{\n\t$advId = 1458013447;\n\t$id = 5;\n\techo $total = $advId << 32 | $id;\n\techo PHP_EOL;\n\n\techo $result = $total & 0xFFFFFFFF;\n\techo PHP_EOL;\n\techo $result = $total >> 32 & 0xFFFFFFFF;\n\techo PHP_EOL;\n}\n```\n","slug":"number-bit","published":1,"updated":"2017-08-15T02:57:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9e7001b91wqs9d8pfnu","content":"<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">\t$advId = <span class=\"number\">1458013447</span>;</div><div class=\"line\">\t$id = <span class=\"number\">5</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> $total = $advId &lt;&lt; <span class=\"number\">32</span> | $id;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> PHP_EOL;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">echo</span> $result = $total &amp; <span class=\"number\">0xFFFFFFFF</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> PHP_EOL;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> $result = $total &gt;&gt; <span class=\"number\">32</span> &amp; <span class=\"number\">0xFFFFFFFF</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> PHP_EOL;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">\t$advId = <span class=\"number\">1458013447</span>;</div><div class=\"line\">\t$id = <span class=\"number\">5</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> $total = $advId &lt;&lt; <span class=\"number\">32</span> | $id;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> PHP_EOL;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">echo</span> $result = $total &amp; <span class=\"number\">0xFFFFFFFF</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> PHP_EOL;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> $result = $total &gt;&gt; <span class=\"number\">32</span> &amp; <span class=\"number\">0xFFFFFFFF</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> PHP_EOL;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"php extension","date":"2017-01-07T16:23:28.000Z","_content":"\nPHP扩展（PECL）跟PHP引擎一样都是使用C语言开发。PHP核心开发组成员鸟哥Laruence使用的是VIM进行PHP开发。\nhttp://www.laruence.com/2011/09/13/2139.html\n书籍: http://www.walu.cc/phpbook/\n案例: php-src/ext\nPECL开发邮件组: http://news.php.net/php.pecl.dev\n尽量编写一些phpt测试用例,php-src/tests下有很多参考.\n测试时用--enable-debug编译PHP,要做到执行你的扩展逻辑,不输出任何错误信息.\n用valgrind检测内存泄露.\n<!--more-->\n\nPHP异步网络扩展Swoole作者博客： http://rango.swoole.com/\nPHP中文分词扩展SCWS和XunSearch全文搜索引擎作者博客： http://hightman.cn\nPHP代码加密扩展php-beast作者博客：http://my.oschina.net/liexusong/blog\n\n如果你在Linux上要使用IDE开发，可以看看Eclipse CDT或者[Qt Creator](http://my.oschina.net/eechen/blog/166969)。\n\n构建PHP扩展:\nhttp://wiki.swoole.com/wiki/page/238.html (视频教程)\nhttp://php.net/manual/zh/internals2.buildsys.php\nphp-src/ext/ext_skel脚本用于生成PECL扩展源码骨架.\n","source":"_posts/php-extension.md","raw":"---\ntitle: php extension\ndate: 2017-01-08 00:23:28\ntags: php\n---\n\nPHP扩展（PECL）跟PHP引擎一样都是使用C语言开发。PHP核心开发组成员鸟哥Laruence使用的是VIM进行PHP开发。\nhttp://www.laruence.com/2011/09/13/2139.html\n书籍: http://www.walu.cc/phpbook/\n案例: php-src/ext\nPECL开发邮件组: http://news.php.net/php.pecl.dev\n尽量编写一些phpt测试用例,php-src/tests下有很多参考.\n测试时用--enable-debug编译PHP,要做到执行你的扩展逻辑,不输出任何错误信息.\n用valgrind检测内存泄露.\n<!--more-->\n\nPHP异步网络扩展Swoole作者博客： http://rango.swoole.com/\nPHP中文分词扩展SCWS和XunSearch全文搜索引擎作者博客： http://hightman.cn\nPHP代码加密扩展php-beast作者博客：http://my.oschina.net/liexusong/blog\n\n如果你在Linux上要使用IDE开发，可以看看Eclipse CDT或者[Qt Creator](http://my.oschina.net/eechen/blog/166969)。\n\n构建PHP扩展:\nhttp://wiki.swoole.com/wiki/page/238.html (视频教程)\nhttp://php.net/manual/zh/internals2.buildsys.php\nphp-src/ext/ext_skel脚本用于生成PECL扩展源码骨架.\n","slug":"php-extension","published":1,"updated":"2017-08-15T02:57:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9ea001f91wqegpmysxe","content":"<p>PHP扩展（PECL）跟PHP引擎一样都是使用C语言开发。PHP核心开发组成员鸟哥Laruence使用的是VIM进行PHP开发。<br><a href=\"http://www.laruence.com/2011/09/13/2139.html\" target=\"_blank\" rel=\"external\">http://www.laruence.com/2011/09/13/2139.html</a><br>书籍: <a href=\"http://www.walu.cc/phpbook/\" target=\"_blank\" rel=\"external\">http://www.walu.cc/phpbook/</a><br>案例: php-src/ext<br>PECL开发邮件组: <a href=\"http://news.php.net/php.pecl.dev\" target=\"_blank\" rel=\"external\">http://news.php.net/php.pecl.dev</a><br>尽量编写一些phpt测试用例,php-src/tests下有很多参考.<br>测试时用–enable-debug编译PHP,要做到执行你的扩展逻辑,不输出任何错误信息.<br>用valgrind检测内存泄露.<br><a id=\"more\"></a></p>\n<p>PHP异步网络扩展Swoole作者博客： <a href=\"http://rango.swoole.com/\" target=\"_blank\" rel=\"external\">http://rango.swoole.com/</a><br>PHP中文分词扩展SCWS和XunSearch全文搜索引擎作者博客： <a href=\"http://hightman.cn\" target=\"_blank\" rel=\"external\">http://hightman.cn</a><br>PHP代码加密扩展php-beast作者博客：<a href=\"http://my.oschina.net/liexusong/blog\" target=\"_blank\" rel=\"external\">http://my.oschina.net/liexusong/blog</a></p>\n<p>如果你在Linux上要使用IDE开发，可以看看Eclipse CDT或者<a href=\"http://my.oschina.net/eechen/blog/166969\" target=\"_blank\" rel=\"external\">Qt Creator</a>。</p>\n<p>构建PHP扩展:<br><a href=\"http://wiki.swoole.com/wiki/page/238.html\" target=\"_blank\" rel=\"external\">http://wiki.swoole.com/wiki/page/238.html</a> (视频教程)<br><a href=\"http://php.net/manual/zh/internals2.buildsys.php\" target=\"_blank\" rel=\"external\">http://php.net/manual/zh/internals2.buildsys.php</a><br>php-src/ext/ext_skel脚本用于生成PECL扩展源码骨架.</p>\n","site":{"data":{}},"excerpt":"<p>PHP扩展（PECL）跟PHP引擎一样都是使用C语言开发。PHP核心开发组成员鸟哥Laruence使用的是VIM进行PHP开发。<br><a href=\"http://www.laruence.com/2011/09/13/2139.html\" target=\"_blank\" rel=\"external\">http://www.laruence.com/2011/09/13/2139.html</a><br>书籍: <a href=\"http://www.walu.cc/phpbook/\" target=\"_blank\" rel=\"external\">http://www.walu.cc/phpbook/</a><br>案例: php-src/ext<br>PECL开发邮件组: <a href=\"http://news.php.net/php.pecl.dev\" target=\"_blank\" rel=\"external\">http://news.php.net/php.pecl.dev</a><br>尽量编写一些phpt测试用例,php-src/tests下有很多参考.<br>测试时用–enable-debug编译PHP,要做到执行你的扩展逻辑,不输出任何错误信息.<br>用valgrind检测内存泄露.<br>","more":"</p>\n<p>PHP异步网络扩展Swoole作者博客： <a href=\"http://rango.swoole.com/\" target=\"_blank\" rel=\"external\">http://rango.swoole.com/</a><br>PHP中文分词扩展SCWS和XunSearch全文搜索引擎作者博客： <a href=\"http://hightman.cn\" target=\"_blank\" rel=\"external\">http://hightman.cn</a><br>PHP代码加密扩展php-beast作者博客：<a href=\"http://my.oschina.net/liexusong/blog\" target=\"_blank\" rel=\"external\">http://my.oschina.net/liexusong/blog</a></p>\n<p>如果你在Linux上要使用IDE开发，可以看看Eclipse CDT或者<a href=\"http://my.oschina.net/eechen/blog/166969\" target=\"_blank\" rel=\"external\">Qt Creator</a>。</p>\n<p>构建PHP扩展:<br><a href=\"http://wiki.swoole.com/wiki/page/238.html\" target=\"_blank\" rel=\"external\">http://wiki.swoole.com/wiki/page/238.html</a> (视频教程)<br><a href=\"http://php.net/manual/zh/internals2.buildsys.php\" target=\"_blank\" rel=\"external\">http://php.net/manual/zh/internals2.buildsys.php</a><br>php-src/ext/ext_skel脚本用于生成PECL扩展源码骨架.</p>"},{"title":"mysql术语摘要","date":"2018-05-04T03:05:01.000Z","_content":"\n> 原文：https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_crash_recovery\n\n<!--more-->\n\n## ACID\n\nAn acronym standing for atomicity, consistency, isolation, and durability. These properties are all desirable in a database system, and are all closely tied to the notion of a transaction. The transactional features of InnoDB adhere to the ACID principles.\n\nTransactions are atomic units of work that can be committed or rolled back. When a transaction makes multiple changes to the database, either all the changes succeed when the transaction is committed, or all the changes are undone when the transaction is rolled back.\n\nThe database remains in a consistent state at all times — after each commit or rollback, and while transactions are in progress. If related data is being updated across multiple tables, queries see either all old values or all new values, not a mix of old and new values.\n\nTransactions are protected (isolated) from each other while they are in progress; they cannot interfere with each other or see each other's uncommitted data. This isolation is achieved through the locking mechanism. Experienced users can adjust the isolation level, trading off less protection in favor of increased performance and concurrency, when they can be sure that the transactions really do not interfere with each other.\n\nThe results of transactions are durable: once a commit operation succeeds, the changes made by that transaction are safe from power failures, system crashes, race conditions, or other potential dangers that many non-database applications are vulnerable to. Durability typically involves writing to disk storage, with a certain amount of redundancy to protect against power failures or software crashes during write operations. (In InnoDB, the doublewrite buffer assists with durability.)\n\nSee Also atomic, commit, concurrency, doublewrite buffer, isolation level, locking, rollback, transaction.\n\n\n```\nACID \n\n缩写代表原子性，一致性，隔离性和耐久性。这些属性在数据库系统中都是可取的，并且都与事务的概念密切相关 。InnoDB坚持ACID原则的事务特征。\n\n事务是可以提交或回滚的原子工作单元。当事务对数据库进行多重更改时，或者在事务提交时所有更改都成功，或者在事务回滚时撤消所有更改。\n\n数据库始终保持一致状态 - 每次提交或回滚之后，以及事务处理正在进行中。如果相关数据在多个表中进行更新，则查询会查看所有旧值或全部新值，而不是旧值和新值的混合。\n\n事务在进行时会相互保护（隔离）; 他们不能互相干扰或看到对方未提交的数据。这种隔离是通过锁定机制实现的。有经验的用户可以调整隔离级别，当他们可以确定事务真的不会互相干扰时，可以减少保护，以提高性能和并发性。\n\n事务的结果是持久的：一旦提交操作成功，该事务所做的更改对电源故障，系统崩溃，竞态条件或许多非数据库应用程序易受攻击的其他潜在危险都是安全的。耐久性通常涉及到写入磁盘存储，并具有一定的冗余度以防止写操作期间的电源故障或软件崩溃。（在 InnoDB，双写缓冲区协助耐用性。）\n\n另请参见atomic，commit，concurrency，doublewrite buffer，隔离级别，锁定，回滚，事务。\n\n```\n\n## atomic\n\nIn the SQL context, transactions are units of work that either succeed entirely (when committed) or have no effect at all (when rolled back). The indivisible (\"atomic\") property of transactions is the “A” in the acronym ACID.\n\nSee Also ACID, commit, rollback, transaction.\n\n```\n原子\n\n在SQL上下文中， 事务要么是完全成功（ 提交时）或要么根本没有任何作用（回滚时）的工作单元。事务的不可分割（“原子”）属性是首字母缩写 ACID中的 “ A ”。\n\n另请参见ACID，提交，回滚，事务。\n\n```\n\n## autocommit\n\nA setting that causes a commit operation after each SQL statement. This mode is not recommended for working with InnoDB tables with transactions that span several statements. It can help performance for read-only transactions on InnoDB tables, where it minimizes overhead from locking and generation of undo data, especially in MySQL 5.6.4 and up. It is also appropriate for working with MyISAM tables, where transactions are not applicable.\n\nSee Also commit, locking, read-only transaction, SQL, transaction, undo.\n\n```\n自动提交\n\n该设置会在每个SQL语句之后导致提交操作。不建议使用这种模式来处理跨多个语句的事务的InnoDB表。\n它可以帮助InnoDB表执行只读事务，从而最大限度地减少了锁定和生成撤销数据的开销，特别是在MySQL 5.6.4及更高版本中.\n对于不支持事务的MyISAM表来说，这也是合适的。\n\n另请参阅提交，锁定，只读事务，SQL，事务，撤消。\n\n```\n\n\n## commit\nA SQL statement that ends a transaction, making permanent any changes made by the transaction. It is the opposite of rollback, which undoes any changes made in the transaction.\n\nInnoDB uses an optimistic mechanism for commits, so that changes can be written to the data files before the commit actually occurs. This technique makes the commit itself faster, with the tradeoff that more work is required in case of a rollback.\n\nBy default, MySQL uses the autocommit setting, which automatically issues a commit following each SQL statement.\n\nSee Also autocommit, optimistic, rollback, SQL, transaction.\n\n\n```\n提交\n\n结束事务的SQL语句，永久保留事务所做的任何更改。它与回滚相反 ，它撤销了事务中所做的任何更改。\n\nInnoDB使用提交的乐观机制，以便在提交实际发生之前将更改写入数据文件。这种技术使得提交本身的速度更快，在回滚的情况下需要做更多的工作。\n\n默认情况下，MySQL使用 autocommit设置，该设置会在每个SQL语句之后自动发出提交。\n\n另请参阅autocommit，optimistic，回滚，SQL，事务。\n\n```\n\n## locking\n\nThe system of protecting a transaction from seeing or changing data that is being queried or changed by other transactions. The locking strategy must balance reliability and consistency of database operations (the principles of the ACID philosophy) against the performance needed for good concurrency. Fine-tuning the locking strategy often involves choosing an isolation level and ensuring all your database operations are safe and reliable for that isolation level.\n\nSee Also ACID, concurrency, isolation level, locking, transaction.\n\n```\n锁定\n保护事务免于查看或更改其他交易正在查询或更改的数据的系统 。\n锁定策略必须平衡数据库操作（ACID原理的原则）的可靠性和一致性以及良好并发性所需的性能。\n微调锁定策略通常涉及选择隔离级别并确保所有数据库操作对于该隔离级别安全可靠。\n\n另请参阅ACID，并发性，隔离级别，锁定，事务。\n```\n\n\n## locking read\nA SELECT statement that also performs a locking operation on an InnoDB table. Either SELECT ... FOR UPDATE or SELECT ... LOCK IN SHARE MODE. It has the potential to produce a deadlock, depending on the isolation level of the transaction. The opposite of a non-locking read. Not allowed for global tables in a read-only transaction.\n\nSELECT ... FOR SHARE replaces SELECT ... LOCK IN SHARE MODE in MySQL 8.0.1, but LOCK IN SHARE MODE remains available for backward compatibility.\n\nSee Section 14.5.2.4, “Locking Reads”.\n\nSee Also deadlock, isolation level, locking, non-locking read, read-only transaction.\n\n```\n锁定读取\n一个SELECT语句，它也对InnoDB表执行锁定操作。无论是SELECT ... FOR UPDATE或SELECT ... LOCK IN SHARE MODE。它有可能产生死锁，具体取决于事务的隔离级别。与非锁定读取相反。不允许在只读事务中使用全局表 。\n\nSELECT ... FOR SHARE取代SELECT ... LOCK IN SHARE MODEMySQL 8.0.1，但 LOCK IN SHARE MODE仍可用于向后兼容。\n\n请参见第14.5.2.4节“锁定读取”。\n\n另请参阅死锁，隔离级别，锁定，非锁定读取，只读事务。\n```\n\n\n## non-locking read\n\nA query that does not use the SELECT ... FOR UPDATE or SELECT ... LOCK IN SHARE MODE clauses. The only kind of query allowed for global tables in a read-only transaction. The opposite of a locking read. See Section 14.5.2.3, “Consistent Nonlocking Reads”.\n\nSELECT ... FOR SHARE replaces SELECT ... LOCK IN SHARE MODE in MySQL 8.0.1, but LOCK IN SHARE MODE remains available for backward compatibility.\n\nSee Also locking read, query, read-only transaction.\n\n```\n不使用SELECT ... FOR UPDATE或SELECT ... LOCK IN SHARE MODE子句的查询。 唯一一种查询允许在只读事务中使用全局表。 与锁定读取相反。 请参见第14.5.2.3节“一致性非锁定读取”。\n\nSELECT ... FOR SHARE替换MySQL 8.0.1中的SELECT ... LOCK IN SHARE MODE，但LOCK IN SHARE MODE仍然可用于向后兼容。\n\n另请参阅锁定读取，查询，只读事务。\n```\n\n\n## read-only transaction\nA type of transaction that can be optimized for InnoDB tables by eliminating some of the bookkeeping involved with creating a read view for each transaction. Can only perform non-locking read queries. It can be started explicitly with the syntax START TRANSACTION READ ONLY, or automatically under certain conditions. See Section 8.5.3, “Optimizing InnoDB Read-Only Transactions” for details.\n\nSee Also non-locking read, read view, transaction.\n\n```\n只读事务\n通过消除为每个事务创建读取视图所涉及的一些簿记，可以针对InnoDB表优化的一类事务。 只能执行非锁定读取查询。 它可以使用语法START TRANSACTION READ ONLY来明确启动，或者在特定条件下自动启动。 有关详细信息，请参见第8.5.3节“优化InnoDB只读事务”。\n\n另请参阅非锁定读取，读取视图，事务。\n\n```\n\n\n## row\n\nThe logical data structure defined by a set of columns. A set of rows makes up a table. Within InnoDB data files, each page can contain one or more rows.\n\nAlthough InnoDB uses the term row format for consistency with MySQL syntax, the row format is a property of each table and applies to all rows in that table.\n\nSee Also column, data files, page, row format, table.\n```\n逻辑数据结构由一组列定义。一组行构成一张表。在InnoDB数据文件中，每个页面可以包含一行或多行。\n\n虽然InnoDB使用术语行格式与MySQL语法保持一致，但行格式是每个表的属性，并适用于该表中的所有行。\n```\n\n\n## row lock\nA lock that prevents a row from being accessed in an incompatible way by another transaction. Other rows in the same table can be freely written to by other transactions. This is the type of locking done by DML operations on InnoDB tables.\n\nContrast with table locks used by MyISAM, or during DDL operations on InnoDB tables that cannot be done with online DDL; those locks block concurrent access to the table.\n\nSee Also DDL, DML, InnoDB, lock, locking, online DDL, table lock, transaction.\n\n\n","source":"_posts/mysql术语摘要.md","raw":"---\ntitle: mysql术语摘要\ndate: 2018-05-04 11:05:01\ntags: 翻译\n---\n\n> 原文：https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_crash_recovery\n\n<!--more-->\n\n## ACID\n\nAn acronym standing for atomicity, consistency, isolation, and durability. These properties are all desirable in a database system, and are all closely tied to the notion of a transaction. The transactional features of InnoDB adhere to the ACID principles.\n\nTransactions are atomic units of work that can be committed or rolled back. When a transaction makes multiple changes to the database, either all the changes succeed when the transaction is committed, or all the changes are undone when the transaction is rolled back.\n\nThe database remains in a consistent state at all times — after each commit or rollback, and while transactions are in progress. If related data is being updated across multiple tables, queries see either all old values or all new values, not a mix of old and new values.\n\nTransactions are protected (isolated) from each other while they are in progress; they cannot interfere with each other or see each other's uncommitted data. This isolation is achieved through the locking mechanism. Experienced users can adjust the isolation level, trading off less protection in favor of increased performance and concurrency, when they can be sure that the transactions really do not interfere with each other.\n\nThe results of transactions are durable: once a commit operation succeeds, the changes made by that transaction are safe from power failures, system crashes, race conditions, or other potential dangers that many non-database applications are vulnerable to. Durability typically involves writing to disk storage, with a certain amount of redundancy to protect against power failures or software crashes during write operations. (In InnoDB, the doublewrite buffer assists with durability.)\n\nSee Also atomic, commit, concurrency, doublewrite buffer, isolation level, locking, rollback, transaction.\n\n\n```\nACID \n\n缩写代表原子性，一致性，隔离性和耐久性。这些属性在数据库系统中都是可取的，并且都与事务的概念密切相关 。InnoDB坚持ACID原则的事务特征。\n\n事务是可以提交或回滚的原子工作单元。当事务对数据库进行多重更改时，或者在事务提交时所有更改都成功，或者在事务回滚时撤消所有更改。\n\n数据库始终保持一致状态 - 每次提交或回滚之后，以及事务处理正在进行中。如果相关数据在多个表中进行更新，则查询会查看所有旧值或全部新值，而不是旧值和新值的混合。\n\n事务在进行时会相互保护（隔离）; 他们不能互相干扰或看到对方未提交的数据。这种隔离是通过锁定机制实现的。有经验的用户可以调整隔离级别，当他们可以确定事务真的不会互相干扰时，可以减少保护，以提高性能和并发性。\n\n事务的结果是持久的：一旦提交操作成功，该事务所做的更改对电源故障，系统崩溃，竞态条件或许多非数据库应用程序易受攻击的其他潜在危险都是安全的。耐久性通常涉及到写入磁盘存储，并具有一定的冗余度以防止写操作期间的电源故障或软件崩溃。（在 InnoDB，双写缓冲区协助耐用性。）\n\n另请参见atomic，commit，concurrency，doublewrite buffer，隔离级别，锁定，回滚，事务。\n\n```\n\n## atomic\n\nIn the SQL context, transactions are units of work that either succeed entirely (when committed) or have no effect at all (when rolled back). The indivisible (\"atomic\") property of transactions is the “A” in the acronym ACID.\n\nSee Also ACID, commit, rollback, transaction.\n\n```\n原子\n\n在SQL上下文中， 事务要么是完全成功（ 提交时）或要么根本没有任何作用（回滚时）的工作单元。事务的不可分割（“原子”）属性是首字母缩写 ACID中的 “ A ”。\n\n另请参见ACID，提交，回滚，事务。\n\n```\n\n## autocommit\n\nA setting that causes a commit operation after each SQL statement. This mode is not recommended for working with InnoDB tables with transactions that span several statements. It can help performance for read-only transactions on InnoDB tables, where it minimizes overhead from locking and generation of undo data, especially in MySQL 5.6.4 and up. It is also appropriate for working with MyISAM tables, where transactions are not applicable.\n\nSee Also commit, locking, read-only transaction, SQL, transaction, undo.\n\n```\n自动提交\n\n该设置会在每个SQL语句之后导致提交操作。不建议使用这种模式来处理跨多个语句的事务的InnoDB表。\n它可以帮助InnoDB表执行只读事务，从而最大限度地减少了锁定和生成撤销数据的开销，特别是在MySQL 5.6.4及更高版本中.\n对于不支持事务的MyISAM表来说，这也是合适的。\n\n另请参阅提交，锁定，只读事务，SQL，事务，撤消。\n\n```\n\n\n## commit\nA SQL statement that ends a transaction, making permanent any changes made by the transaction. It is the opposite of rollback, which undoes any changes made in the transaction.\n\nInnoDB uses an optimistic mechanism for commits, so that changes can be written to the data files before the commit actually occurs. This technique makes the commit itself faster, with the tradeoff that more work is required in case of a rollback.\n\nBy default, MySQL uses the autocommit setting, which automatically issues a commit following each SQL statement.\n\nSee Also autocommit, optimistic, rollback, SQL, transaction.\n\n\n```\n提交\n\n结束事务的SQL语句，永久保留事务所做的任何更改。它与回滚相反 ，它撤销了事务中所做的任何更改。\n\nInnoDB使用提交的乐观机制，以便在提交实际发生之前将更改写入数据文件。这种技术使得提交本身的速度更快，在回滚的情况下需要做更多的工作。\n\n默认情况下，MySQL使用 autocommit设置，该设置会在每个SQL语句之后自动发出提交。\n\n另请参阅autocommit，optimistic，回滚，SQL，事务。\n\n```\n\n## locking\n\nThe system of protecting a transaction from seeing or changing data that is being queried or changed by other transactions. The locking strategy must balance reliability and consistency of database operations (the principles of the ACID philosophy) against the performance needed for good concurrency. Fine-tuning the locking strategy often involves choosing an isolation level and ensuring all your database operations are safe and reliable for that isolation level.\n\nSee Also ACID, concurrency, isolation level, locking, transaction.\n\n```\n锁定\n保护事务免于查看或更改其他交易正在查询或更改的数据的系统 。\n锁定策略必须平衡数据库操作（ACID原理的原则）的可靠性和一致性以及良好并发性所需的性能。\n微调锁定策略通常涉及选择隔离级别并确保所有数据库操作对于该隔离级别安全可靠。\n\n另请参阅ACID，并发性，隔离级别，锁定，事务。\n```\n\n\n## locking read\nA SELECT statement that also performs a locking operation on an InnoDB table. Either SELECT ... FOR UPDATE or SELECT ... LOCK IN SHARE MODE. It has the potential to produce a deadlock, depending on the isolation level of the transaction. The opposite of a non-locking read. Not allowed for global tables in a read-only transaction.\n\nSELECT ... FOR SHARE replaces SELECT ... LOCK IN SHARE MODE in MySQL 8.0.1, but LOCK IN SHARE MODE remains available for backward compatibility.\n\nSee Section 14.5.2.4, “Locking Reads”.\n\nSee Also deadlock, isolation level, locking, non-locking read, read-only transaction.\n\n```\n锁定读取\n一个SELECT语句，它也对InnoDB表执行锁定操作。无论是SELECT ... FOR UPDATE或SELECT ... LOCK IN SHARE MODE。它有可能产生死锁，具体取决于事务的隔离级别。与非锁定读取相反。不允许在只读事务中使用全局表 。\n\nSELECT ... FOR SHARE取代SELECT ... LOCK IN SHARE MODEMySQL 8.0.1，但 LOCK IN SHARE MODE仍可用于向后兼容。\n\n请参见第14.5.2.4节“锁定读取”。\n\n另请参阅死锁，隔离级别，锁定，非锁定读取，只读事务。\n```\n\n\n## non-locking read\n\nA query that does not use the SELECT ... FOR UPDATE or SELECT ... LOCK IN SHARE MODE clauses. The only kind of query allowed for global tables in a read-only transaction. The opposite of a locking read. See Section 14.5.2.3, “Consistent Nonlocking Reads”.\n\nSELECT ... FOR SHARE replaces SELECT ... LOCK IN SHARE MODE in MySQL 8.0.1, but LOCK IN SHARE MODE remains available for backward compatibility.\n\nSee Also locking read, query, read-only transaction.\n\n```\n不使用SELECT ... FOR UPDATE或SELECT ... LOCK IN SHARE MODE子句的查询。 唯一一种查询允许在只读事务中使用全局表。 与锁定读取相反。 请参见第14.5.2.3节“一致性非锁定读取”。\n\nSELECT ... FOR SHARE替换MySQL 8.0.1中的SELECT ... LOCK IN SHARE MODE，但LOCK IN SHARE MODE仍然可用于向后兼容。\n\n另请参阅锁定读取，查询，只读事务。\n```\n\n\n## read-only transaction\nA type of transaction that can be optimized for InnoDB tables by eliminating some of the bookkeeping involved with creating a read view for each transaction. Can only perform non-locking read queries. It can be started explicitly with the syntax START TRANSACTION READ ONLY, or automatically under certain conditions. See Section 8.5.3, “Optimizing InnoDB Read-Only Transactions” for details.\n\nSee Also non-locking read, read view, transaction.\n\n```\n只读事务\n通过消除为每个事务创建读取视图所涉及的一些簿记，可以针对InnoDB表优化的一类事务。 只能执行非锁定读取查询。 它可以使用语法START TRANSACTION READ ONLY来明确启动，或者在特定条件下自动启动。 有关详细信息，请参见第8.5.3节“优化InnoDB只读事务”。\n\n另请参阅非锁定读取，读取视图，事务。\n\n```\n\n\n## row\n\nThe logical data structure defined by a set of columns. A set of rows makes up a table. Within InnoDB data files, each page can contain one or more rows.\n\nAlthough InnoDB uses the term row format for consistency with MySQL syntax, the row format is a property of each table and applies to all rows in that table.\n\nSee Also column, data files, page, row format, table.\n```\n逻辑数据结构由一组列定义。一组行构成一张表。在InnoDB数据文件中，每个页面可以包含一行或多行。\n\n虽然InnoDB使用术语行格式与MySQL语法保持一致，但行格式是每个表的属性，并适用于该表中的所有行。\n```\n\n\n## row lock\nA lock that prevents a row from being accessed in an incompatible way by another transaction. Other rows in the same table can be freely written to by other transactions. This is the type of locking done by DML operations on InnoDB tables.\n\nContrast with table locks used by MyISAM, or during DDL operations on InnoDB tables that cannot be done with online DDL; those locks block concurrent access to the table.\n\nSee Also DDL, DML, InnoDB, lock, locking, online DDL, table lock, transaction.\n\n\n","slug":"mysql术语摘要","published":1,"updated":"2018-05-04T07:06:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9ec001i91wq058fqvg0","content":"<blockquote>\n<p>原文：<a href=\"https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_crash_recovery\" target=\"_blank\" rel=\"external\">https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_crash_recovery</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"ACID\"><a href=\"#ACID\" class=\"headerlink\" title=\"ACID\"></a>ACID</h2><p>An acronym standing for atomicity, consistency, isolation, and durability. These properties are all desirable in a database system, and are all closely tied to the notion of a transaction. The transactional features of InnoDB adhere to the ACID principles.</p>\n<p>Transactions are atomic units of work that can be committed or rolled back. When a transaction makes multiple changes to the database, either all the changes succeed when the transaction is committed, or all the changes are undone when the transaction is rolled back.</p>\n<p>The database remains in a consistent state at all times — after each commit or rollback, and while transactions are in progress. If related data is being updated across multiple tables, queries see either all old values or all new values, not a mix of old and new values.</p>\n<p>Transactions are protected (isolated) from each other while they are in progress; they cannot interfere with each other or see each other’s uncommitted data. This isolation is achieved through the locking mechanism. Experienced users can adjust the isolation level, trading off less protection in favor of increased performance and concurrency, when they can be sure that the transactions really do not interfere with each other.</p>\n<p>The results of transactions are durable: once a commit operation succeeds, the changes made by that transaction are safe from power failures, system crashes, race conditions, or other potential dangers that many non-database applications are vulnerable to. Durability typically involves writing to disk storage, with a certain amount of redundancy to protect against power failures or software crashes during write operations. (In InnoDB, the doublewrite buffer assists with durability.)</p>\n<p>See Also atomic, commit, concurrency, doublewrite buffer, isolation level, locking, rollback, transaction.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">ACID </div><div class=\"line\"></div><div class=\"line\">缩写代表原子性，一致性，隔离性和耐久性。这些属性在数据库系统中都是可取的，并且都与事务的概念密切相关 。InnoDB坚持ACID原则的事务特征。</div><div class=\"line\"></div><div class=\"line\">事务是可以提交或回滚的原子工作单元。当事务对数据库进行多重更改时，或者在事务提交时所有更改都成功，或者在事务回滚时撤消所有更改。</div><div class=\"line\"></div><div class=\"line\">数据库始终保持一致状态 - 每次提交或回滚之后，以及事务处理正在进行中。如果相关数据在多个表中进行更新，则查询会查看所有旧值或全部新值，而不是旧值和新值的混合。</div><div class=\"line\"></div><div class=\"line\">事务在进行时会相互保护（隔离）; 他们不能互相干扰或看到对方未提交的数据。这种隔离是通过锁定机制实现的。有经验的用户可以调整隔离级别，当他们可以确定事务真的不会互相干扰时，可以减少保护，以提高性能和并发性。</div><div class=\"line\"></div><div class=\"line\">事务的结果是持久的：一旦提交操作成功，该事务所做的更改对电源故障，系统崩溃，竞态条件或许多非数据库应用程序易受攻击的其他潜在危险都是安全的。耐久性通常涉及到写入磁盘存储，并具有一定的冗余度以防止写操作期间的电源故障或软件崩溃。（在 InnoDB，双写缓冲区协助耐用性。）</div><div class=\"line\"></div><div class=\"line\">另请参见atomic，commit，concurrency，doublewrite buffer，隔离级别，锁定，回滚，事务。</div></pre></td></tr></table></figure>\n<h2 id=\"atomic\"><a href=\"#atomic\" class=\"headerlink\" title=\"atomic\"></a>atomic</h2><p>In the SQL context, transactions are units of work that either succeed entirely (when committed) or have no effect at all (when rolled back). The indivisible (“atomic”) property of transactions is the “A” in the acronym ACID.</p>\n<p>See Also ACID, commit, rollback, transaction.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">原子</div><div class=\"line\"></div><div class=\"line\">在SQL上下文中， 事务要么是完全成功（ 提交时）或要么根本没有任何作用（回滚时）的工作单元。事务的不可分割（“原子”）属性是首字母缩写 ACID中的 “ A ”。</div><div class=\"line\"></div><div class=\"line\">另请参见ACID，提交，回滚，事务。</div></pre></td></tr></table></figure>\n<h2 id=\"autocommit\"><a href=\"#autocommit\" class=\"headerlink\" title=\"autocommit\"></a>autocommit</h2><p>A setting that causes a commit operation after each SQL statement. This mode is not recommended for working with InnoDB tables with transactions that span several statements. It can help performance for read-only transactions on InnoDB tables, where it minimizes overhead from locking and generation of undo data, especially in MySQL 5.6.4 and up. It is also appropriate for working with MyISAM tables, where transactions are not applicable.</p>\n<p>See Also commit, locking, read-only transaction, SQL, transaction, undo.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">自动提交</div><div class=\"line\"></div><div class=\"line\">该设置会在每个SQL语句之后导致提交操作。不建议使用这种模式来处理跨多个语句的事务的InnoDB表。</div><div class=\"line\">它可以帮助InnoDB表执行只读事务，从而最大限度地减少了锁定和生成撤销数据的开销，特别是在MySQL 5.6.4及更高版本中.</div><div class=\"line\">对于不支持事务的MyISAM表来说，这也是合适的。</div><div class=\"line\"></div><div class=\"line\">另请参阅提交，锁定，只读事务，SQL，事务，撤消。</div></pre></td></tr></table></figure>\n<h2 id=\"commit\"><a href=\"#commit\" class=\"headerlink\" title=\"commit\"></a>commit</h2><p>A SQL statement that ends a transaction, making permanent any changes made by the transaction. It is the opposite of rollback, which undoes any changes made in the transaction.</p>\n<p>InnoDB uses an optimistic mechanism for commits, so that changes can be written to the data files before the commit actually occurs. This technique makes the commit itself faster, with the tradeoff that more work is required in case of a rollback.</p>\n<p>By default, MySQL uses the autocommit setting, which automatically issues a commit following each SQL statement.</p>\n<p>See Also autocommit, optimistic, rollback, SQL, transaction.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">提交</div><div class=\"line\"></div><div class=\"line\">结束事务的SQL语句，永久保留事务所做的任何更改。它与回滚相反 ，它撤销了事务中所做的任何更改。</div><div class=\"line\"></div><div class=\"line\">InnoDB使用提交的乐观机制，以便在提交实际发生之前将更改写入数据文件。这种技术使得提交本身的速度更快，在回滚的情况下需要做更多的工作。</div><div class=\"line\"></div><div class=\"line\">默认情况下，MySQL使用 autocommit设置，该设置会在每个SQL语句之后自动发出提交。</div><div class=\"line\"></div><div class=\"line\">另请参阅autocommit，optimistic，回滚，SQL，事务。</div></pre></td></tr></table></figure>\n<h2 id=\"locking\"><a href=\"#locking\" class=\"headerlink\" title=\"locking\"></a>locking</h2><p>The system of protecting a transaction from seeing or changing data that is being queried or changed by other transactions. The locking strategy must balance reliability and consistency of database operations (the principles of the ACID philosophy) against the performance needed for good concurrency. Fine-tuning the locking strategy often involves choosing an isolation level and ensuring all your database operations are safe and reliable for that isolation level.</p>\n<p>See Also ACID, concurrency, isolation level, locking, transaction.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">锁定</div><div class=\"line\">保护事务免于查看或更改其他交易正在查询或更改的数据的系统 。</div><div class=\"line\">锁定策略必须平衡数据库操作（ACID原理的原则）的可靠性和一致性以及良好并发性所需的性能。</div><div class=\"line\">微调锁定策略通常涉及选择隔离级别并确保所有数据库操作对于该隔离级别安全可靠。</div><div class=\"line\"></div><div class=\"line\">另请参阅ACID，并发性，隔离级别，锁定，事务。</div></pre></td></tr></table></figure>\n<h2 id=\"locking-read\"><a href=\"#locking-read\" class=\"headerlink\" title=\"locking read\"></a>locking read</h2><p>A SELECT statement that also performs a locking operation on an InnoDB table. Either SELECT … FOR UPDATE or SELECT … LOCK IN SHARE MODE. It has the potential to produce a deadlock, depending on the isolation level of the transaction. The opposite of a non-locking read. Not allowed for global tables in a read-only transaction.</p>\n<p>SELECT … FOR SHARE replaces SELECT … LOCK IN SHARE MODE in MySQL 8.0.1, but LOCK IN SHARE MODE remains available for backward compatibility.</p>\n<p>See Section 14.5.2.4, “Locking Reads”.</p>\n<p>See Also deadlock, isolation level, locking, non-locking read, read-only transaction.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">锁定读取</div><div class=\"line\">一个SELECT语句，它也对InnoDB表执行锁定操作。无论是SELECT ... FOR UPDATE或SELECT ... LOCK IN SHARE MODE。它有可能产生死锁，具体取决于事务的隔离级别。与非锁定读取相反。不允许在只读事务中使用全局表 。</div><div class=\"line\"></div><div class=\"line\">SELECT ... FOR SHARE取代SELECT ... LOCK IN SHARE MODEMySQL 8.0.1，但 LOCK IN SHARE MODE仍可用于向后兼容。</div><div class=\"line\"></div><div class=\"line\">请参见第14.5.2.4节“锁定读取”。</div><div class=\"line\"></div><div class=\"line\">另请参阅死锁，隔离级别，锁定，非锁定读取，只读事务。</div></pre></td></tr></table></figure>\n<h2 id=\"non-locking-read\"><a href=\"#non-locking-read\" class=\"headerlink\" title=\"non-locking read\"></a>non-locking read</h2><p>A query that does not use the SELECT … FOR UPDATE or SELECT … LOCK IN SHARE MODE clauses. The only kind of query allowed for global tables in a read-only transaction. The opposite of a locking read. See Section 14.5.2.3, “Consistent Nonlocking Reads”.</p>\n<p>SELECT … FOR SHARE replaces SELECT … LOCK IN SHARE MODE in MySQL 8.0.1, but LOCK IN SHARE MODE remains available for backward compatibility.</p>\n<p>See Also locking read, query, read-only transaction.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">不使用SELECT ... FOR UPDATE或SELECT ... LOCK IN SHARE MODE子句的查询。 唯一一种查询允许在只读事务中使用全局表。 与锁定读取相反。 请参见第14.5.2.3节“一致性非锁定读取”。</div><div class=\"line\"></div><div class=\"line\">SELECT ... FOR SHARE替换MySQL 8.0.1中的SELECT ... LOCK IN SHARE MODE，但LOCK IN SHARE MODE仍然可用于向后兼容。</div><div class=\"line\"></div><div class=\"line\">另请参阅锁定读取，查询，只读事务。</div></pre></td></tr></table></figure>\n<h2 id=\"read-only-transaction\"><a href=\"#read-only-transaction\" class=\"headerlink\" title=\"read-only transaction\"></a>read-only transaction</h2><p>A type of transaction that can be optimized for InnoDB tables by eliminating some of the bookkeeping involved with creating a read view for each transaction. Can only perform non-locking read queries. It can be started explicitly with the syntax START TRANSACTION READ ONLY, or automatically under certain conditions. See Section 8.5.3, “Optimizing InnoDB Read-Only Transactions” for details.</p>\n<p>See Also non-locking read, read view, transaction.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">只读事务</div><div class=\"line\">通过消除为每个事务创建读取视图所涉及的一些簿记，可以针对InnoDB表优化的一类事务。 只能执行非锁定读取查询。 它可以使用语法START TRANSACTION READ ONLY来明确启动，或者在特定条件下自动启动。 有关详细信息，请参见第8.5.3节“优化InnoDB只读事务”。</div><div class=\"line\"></div><div class=\"line\">另请参阅非锁定读取，读取视图，事务。</div></pre></td></tr></table></figure>\n<h2 id=\"row\"><a href=\"#row\" class=\"headerlink\" title=\"row\"></a>row</h2><p>The logical data structure defined by a set of columns. A set of rows makes up a table. Within InnoDB data files, each page can contain one or more rows.</p>\n<p>Although InnoDB uses the term row format for consistency with MySQL syntax, the row format is a property of each table and applies to all rows in that table.</p>\n<p>See Also column, data files, page, row format, table.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">逻辑数据结构由一组列定义。一组行构成一张表。在InnoDB数据文件中，每个页面可以包含一行或多行。</div><div class=\"line\"></div><div class=\"line\">虽然InnoDB使用术语行格式与MySQL语法保持一致，但行格式是每个表的属性，并适用于该表中的所有行。</div></pre></td></tr></table></figure></p>\n<h2 id=\"row-lock\"><a href=\"#row-lock\" class=\"headerlink\" title=\"row lock\"></a>row lock</h2><p>A lock that prevents a row from being accessed in an incompatible way by another transaction. Other rows in the same table can be freely written to by other transactions. This is the type of locking done by DML operations on InnoDB tables.</p>\n<p>Contrast with table locks used by MyISAM, or during DDL operations on InnoDB tables that cannot be done with online DDL; those locks block concurrent access to the table.</p>\n<p>See Also DDL, DML, InnoDB, lock, locking, online DDL, table lock, transaction.</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>原文：<a href=\"https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_crash_recovery\" target=\"_blank\" rel=\"external\">https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_crash_recovery</a></p>\n</blockquote>","more":"<h2 id=\"ACID\"><a href=\"#ACID\" class=\"headerlink\" title=\"ACID\"></a>ACID</h2><p>An acronym standing for atomicity, consistency, isolation, and durability. These properties are all desirable in a database system, and are all closely tied to the notion of a transaction. The transactional features of InnoDB adhere to the ACID principles.</p>\n<p>Transactions are atomic units of work that can be committed or rolled back. When a transaction makes multiple changes to the database, either all the changes succeed when the transaction is committed, or all the changes are undone when the transaction is rolled back.</p>\n<p>The database remains in a consistent state at all times — after each commit or rollback, and while transactions are in progress. If related data is being updated across multiple tables, queries see either all old values or all new values, not a mix of old and new values.</p>\n<p>Transactions are protected (isolated) from each other while they are in progress; they cannot interfere with each other or see each other’s uncommitted data. This isolation is achieved through the locking mechanism. Experienced users can adjust the isolation level, trading off less protection in favor of increased performance and concurrency, when they can be sure that the transactions really do not interfere with each other.</p>\n<p>The results of transactions are durable: once a commit operation succeeds, the changes made by that transaction are safe from power failures, system crashes, race conditions, or other potential dangers that many non-database applications are vulnerable to. Durability typically involves writing to disk storage, with a certain amount of redundancy to protect against power failures or software crashes during write operations. (In InnoDB, the doublewrite buffer assists with durability.)</p>\n<p>See Also atomic, commit, concurrency, doublewrite buffer, isolation level, locking, rollback, transaction.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">ACID </div><div class=\"line\"></div><div class=\"line\">缩写代表原子性，一致性，隔离性和耐久性。这些属性在数据库系统中都是可取的，并且都与事务的概念密切相关 。InnoDB坚持ACID原则的事务特征。</div><div class=\"line\"></div><div class=\"line\">事务是可以提交或回滚的原子工作单元。当事务对数据库进行多重更改时，或者在事务提交时所有更改都成功，或者在事务回滚时撤消所有更改。</div><div class=\"line\"></div><div class=\"line\">数据库始终保持一致状态 - 每次提交或回滚之后，以及事务处理正在进行中。如果相关数据在多个表中进行更新，则查询会查看所有旧值或全部新值，而不是旧值和新值的混合。</div><div class=\"line\"></div><div class=\"line\">事务在进行时会相互保护（隔离）; 他们不能互相干扰或看到对方未提交的数据。这种隔离是通过锁定机制实现的。有经验的用户可以调整隔离级别，当他们可以确定事务真的不会互相干扰时，可以减少保护，以提高性能和并发性。</div><div class=\"line\"></div><div class=\"line\">事务的结果是持久的：一旦提交操作成功，该事务所做的更改对电源故障，系统崩溃，竞态条件或许多非数据库应用程序易受攻击的其他潜在危险都是安全的。耐久性通常涉及到写入磁盘存储，并具有一定的冗余度以防止写操作期间的电源故障或软件崩溃。（在 InnoDB，双写缓冲区协助耐用性。）</div><div class=\"line\"></div><div class=\"line\">另请参见atomic，commit，concurrency，doublewrite buffer，隔离级别，锁定，回滚，事务。</div></pre></td></tr></table></figure>\n<h2 id=\"atomic\"><a href=\"#atomic\" class=\"headerlink\" title=\"atomic\"></a>atomic</h2><p>In the SQL context, transactions are units of work that either succeed entirely (when committed) or have no effect at all (when rolled back). The indivisible (“atomic”) property of transactions is the “A” in the acronym ACID.</p>\n<p>See Also ACID, commit, rollback, transaction.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">原子</div><div class=\"line\"></div><div class=\"line\">在SQL上下文中， 事务要么是完全成功（ 提交时）或要么根本没有任何作用（回滚时）的工作单元。事务的不可分割（“原子”）属性是首字母缩写 ACID中的 “ A ”。</div><div class=\"line\"></div><div class=\"line\">另请参见ACID，提交，回滚，事务。</div></pre></td></tr></table></figure>\n<h2 id=\"autocommit\"><a href=\"#autocommit\" class=\"headerlink\" title=\"autocommit\"></a>autocommit</h2><p>A setting that causes a commit operation after each SQL statement. This mode is not recommended for working with InnoDB tables with transactions that span several statements. It can help performance for read-only transactions on InnoDB tables, where it minimizes overhead from locking and generation of undo data, especially in MySQL 5.6.4 and up. It is also appropriate for working with MyISAM tables, where transactions are not applicable.</p>\n<p>See Also commit, locking, read-only transaction, SQL, transaction, undo.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">自动提交</div><div class=\"line\"></div><div class=\"line\">该设置会在每个SQL语句之后导致提交操作。不建议使用这种模式来处理跨多个语句的事务的InnoDB表。</div><div class=\"line\">它可以帮助InnoDB表执行只读事务，从而最大限度地减少了锁定和生成撤销数据的开销，特别是在MySQL 5.6.4及更高版本中.</div><div class=\"line\">对于不支持事务的MyISAM表来说，这也是合适的。</div><div class=\"line\"></div><div class=\"line\">另请参阅提交，锁定，只读事务，SQL，事务，撤消。</div></pre></td></tr></table></figure>\n<h2 id=\"commit\"><a href=\"#commit\" class=\"headerlink\" title=\"commit\"></a>commit</h2><p>A SQL statement that ends a transaction, making permanent any changes made by the transaction. It is the opposite of rollback, which undoes any changes made in the transaction.</p>\n<p>InnoDB uses an optimistic mechanism for commits, so that changes can be written to the data files before the commit actually occurs. This technique makes the commit itself faster, with the tradeoff that more work is required in case of a rollback.</p>\n<p>By default, MySQL uses the autocommit setting, which automatically issues a commit following each SQL statement.</p>\n<p>See Also autocommit, optimistic, rollback, SQL, transaction.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">提交</div><div class=\"line\"></div><div class=\"line\">结束事务的SQL语句，永久保留事务所做的任何更改。它与回滚相反 ，它撤销了事务中所做的任何更改。</div><div class=\"line\"></div><div class=\"line\">InnoDB使用提交的乐观机制，以便在提交实际发生之前将更改写入数据文件。这种技术使得提交本身的速度更快，在回滚的情况下需要做更多的工作。</div><div class=\"line\"></div><div class=\"line\">默认情况下，MySQL使用 autocommit设置，该设置会在每个SQL语句之后自动发出提交。</div><div class=\"line\"></div><div class=\"line\">另请参阅autocommit，optimistic，回滚，SQL，事务。</div></pre></td></tr></table></figure>\n<h2 id=\"locking\"><a href=\"#locking\" class=\"headerlink\" title=\"locking\"></a>locking</h2><p>The system of protecting a transaction from seeing or changing data that is being queried or changed by other transactions. The locking strategy must balance reliability and consistency of database operations (the principles of the ACID philosophy) against the performance needed for good concurrency. Fine-tuning the locking strategy often involves choosing an isolation level and ensuring all your database operations are safe and reliable for that isolation level.</p>\n<p>See Also ACID, concurrency, isolation level, locking, transaction.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">锁定</div><div class=\"line\">保护事务免于查看或更改其他交易正在查询或更改的数据的系统 。</div><div class=\"line\">锁定策略必须平衡数据库操作（ACID原理的原则）的可靠性和一致性以及良好并发性所需的性能。</div><div class=\"line\">微调锁定策略通常涉及选择隔离级别并确保所有数据库操作对于该隔离级别安全可靠。</div><div class=\"line\"></div><div class=\"line\">另请参阅ACID，并发性，隔离级别，锁定，事务。</div></pre></td></tr></table></figure>\n<h2 id=\"locking-read\"><a href=\"#locking-read\" class=\"headerlink\" title=\"locking read\"></a>locking read</h2><p>A SELECT statement that also performs a locking operation on an InnoDB table. Either SELECT … FOR UPDATE or SELECT … LOCK IN SHARE MODE. It has the potential to produce a deadlock, depending on the isolation level of the transaction. The opposite of a non-locking read. Not allowed for global tables in a read-only transaction.</p>\n<p>SELECT … FOR SHARE replaces SELECT … LOCK IN SHARE MODE in MySQL 8.0.1, but LOCK IN SHARE MODE remains available for backward compatibility.</p>\n<p>See Section 14.5.2.4, “Locking Reads”.</p>\n<p>See Also deadlock, isolation level, locking, non-locking read, read-only transaction.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">锁定读取</div><div class=\"line\">一个SELECT语句，它也对InnoDB表执行锁定操作。无论是SELECT ... FOR UPDATE或SELECT ... LOCK IN SHARE MODE。它有可能产生死锁，具体取决于事务的隔离级别。与非锁定读取相反。不允许在只读事务中使用全局表 。</div><div class=\"line\"></div><div class=\"line\">SELECT ... FOR SHARE取代SELECT ... LOCK IN SHARE MODEMySQL 8.0.1，但 LOCK IN SHARE MODE仍可用于向后兼容。</div><div class=\"line\"></div><div class=\"line\">请参见第14.5.2.4节“锁定读取”。</div><div class=\"line\"></div><div class=\"line\">另请参阅死锁，隔离级别，锁定，非锁定读取，只读事务。</div></pre></td></tr></table></figure>\n<h2 id=\"non-locking-read\"><a href=\"#non-locking-read\" class=\"headerlink\" title=\"non-locking read\"></a>non-locking read</h2><p>A query that does not use the SELECT … FOR UPDATE or SELECT … LOCK IN SHARE MODE clauses. The only kind of query allowed for global tables in a read-only transaction. The opposite of a locking read. See Section 14.5.2.3, “Consistent Nonlocking Reads”.</p>\n<p>SELECT … FOR SHARE replaces SELECT … LOCK IN SHARE MODE in MySQL 8.0.1, but LOCK IN SHARE MODE remains available for backward compatibility.</p>\n<p>See Also locking read, query, read-only transaction.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">不使用SELECT ... FOR UPDATE或SELECT ... LOCK IN SHARE MODE子句的查询。 唯一一种查询允许在只读事务中使用全局表。 与锁定读取相反。 请参见第14.5.2.3节“一致性非锁定读取”。</div><div class=\"line\"></div><div class=\"line\">SELECT ... FOR SHARE替换MySQL 8.0.1中的SELECT ... LOCK IN SHARE MODE，但LOCK IN SHARE MODE仍然可用于向后兼容。</div><div class=\"line\"></div><div class=\"line\">另请参阅锁定读取，查询，只读事务。</div></pre></td></tr></table></figure>\n<h2 id=\"read-only-transaction\"><a href=\"#read-only-transaction\" class=\"headerlink\" title=\"read-only transaction\"></a>read-only transaction</h2><p>A type of transaction that can be optimized for InnoDB tables by eliminating some of the bookkeeping involved with creating a read view for each transaction. Can only perform non-locking read queries. It can be started explicitly with the syntax START TRANSACTION READ ONLY, or automatically under certain conditions. See Section 8.5.3, “Optimizing InnoDB Read-Only Transactions” for details.</p>\n<p>See Also non-locking read, read view, transaction.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">只读事务</div><div class=\"line\">通过消除为每个事务创建读取视图所涉及的一些簿记，可以针对InnoDB表优化的一类事务。 只能执行非锁定读取查询。 它可以使用语法START TRANSACTION READ ONLY来明确启动，或者在特定条件下自动启动。 有关详细信息，请参见第8.5.3节“优化InnoDB只读事务”。</div><div class=\"line\"></div><div class=\"line\">另请参阅非锁定读取，读取视图，事务。</div></pre></td></tr></table></figure>\n<h2 id=\"row\"><a href=\"#row\" class=\"headerlink\" title=\"row\"></a>row</h2><p>The logical data structure defined by a set of columns. A set of rows makes up a table. Within InnoDB data files, each page can contain one or more rows.</p>\n<p>Although InnoDB uses the term row format for consistency with MySQL syntax, the row format is a property of each table and applies to all rows in that table.</p>\n<p>See Also column, data files, page, row format, table.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">逻辑数据结构由一组列定义。一组行构成一张表。在InnoDB数据文件中，每个页面可以包含一行或多行。</div><div class=\"line\"></div><div class=\"line\">虽然InnoDB使用术语行格式与MySQL语法保持一致，但行格式是每个表的属性，并适用于该表中的所有行。</div></pre></td></tr></table></figure></p>\n<h2 id=\"row-lock\"><a href=\"#row-lock\" class=\"headerlink\" title=\"row lock\"></a>row lock</h2><p>A lock that prevents a row from being accessed in an incompatible way by another transaction. Other rows in the same table can be freely written to by other transactions. This is the type of locking done by DML operations on InnoDB tables.</p>\n<p>Contrast with table locks used by MyISAM, or during DDL operations on InnoDB tables that cannot be done with online DDL; those locks block concurrent access to the table.</p>\n<p>See Also DDL, DML, InnoDB, lock, locking, online DDL, table lock, transaction.</p>"},{"uuid":"a26ff6c0-3a54-11e7-b496-b5e2f51b1564","title":"php的yield和生成器","date":"2017-05-16T16:28:03.000Z","_content":"\n相比较迭代器，**生成器**提供了一种更容易的方法来实现简单的对象迭代，性能开销和复杂性都大大降低。\n\n一个生成器函数看起来像一个普通的函数，不同的是普通函数返回一个值，而一个生成可以yield生成许多它所需要的值，并且每一次的生成返回值只是暂停当前的执行状态，当下次调用生成器函数时，PHP会从上次暂停的状态继续执行下去。\n\n<!--more-->\n我们在使用生成器的时候可以像关联数组那样指定一个键名对应生成的值。如下生成一个键值对与定义一个关联数组相似。\n\n```php\nfunction xrange($start, $limit, $step = 1) {\n    for ($i = $start, $j = 0; $i <= $limit; $i += $step, $j++) {\n        // 给予键值\n        yield $j => $i;\n    }\n}\n\n$xrange = xrange(1, 10, 2);\nforeach ($xrange as $key => $value) {\n    echo $key . ' => ' . $value . \"\\n\";\n}\n\n```\n\n实际上生成器函数返回的是一个Generator对象，这个对象不能通过new实例化，并且实现了Iterator接口。\n\n```php\nGenerator implements Iterator {\n    public mixed current(void)\n    public mixed key(void)\n    public void next(void)\n    public void rewind(void)\n    // 向生成器传入一个值\n    public mixed send(mixed $value)\n    public void throw(Exception $exception)\n    public bool valid(void)\n    // 序列化回调\n    public void __wakeup(void)\n}\n```\n\n可以看到出了实现Iterator的接口之外Generator还添加了send方法，用来向生成器传入一个值，并且当做yield表达式的结果，然后继续执行生成器，直到遇到下一个yield后会再次停住。\n\n```php\nfunction printer() {\n    while(true) {\n        echo 'receive: ' . yield . \"\\n\";\n    }\n}\n\n$printer = printer();\n$printer->send('Hello');\n$printer->send('world');\n```\n\n以上的例子会输出：\n```shell\nreceive: Hello\nreceive: world\n```\n\n在上面的例子中，经过第一个send()方法，yield表达式的值变为Hello，之后执行echo语句，输出第一条结果receive: Hello，输出完毕后继续执行到第二个yield处，只不过当前的语句没有执行到底，不会执行输出。如果将例子改改就能够看出来yield的继续执行到哪里。\n\n```php\nfunction printer() {\n    $i = 1;\n    while(true) {\n        echo 'this is the yield ' . $i . \"\\n\";\n        echo 'receive: ' . yield . \"\\n\";\n        $i++;\n    }\n}\n\n$printer = printer();\n$printer->send('Hello');\n$printer->send('world');\n\n```\n\n这次的输出便会变为:\n\n```shell\nthis is the yield 1\nreceive: hello\nthis is the yield 2\nreceive: world\nthis is the yield 3\n```\n\n这边可以清楚的看出send之后的继续执行到第二个yield处，之前的代码照常执行。\n\n我们再对例子进行适当的修改：\n\n```php\nfunction printer() {\n    $i = 1;\n    while(true) {\n        echo 'this is the yield ' . (yield $i) . \"\\n\";\n        $i++;\n    }\n}\n\n$printer = printer();\nvar_dump($printer->send('first'));\nvar_dump($printer->send('second'));\n```\n\n执行一下会发现结果为:\n\n```shell\nthis is the yield first\nint(2)\nthis is the yield second\nint(3)\n```\n\n让我们来看一下，是不是发现了问题，跑出来的结果不是从1开始的而是从2开始，这是为啥嘞，我们来分析一下：\n在此之前我们先来跑另外一段代码：\n\n```php\nfunction printer() {\n    $i = 1;\n    while(true) {\n        echo 'this is the yield ' . (yield $i) . \"\\n\";\n        $i++;\n    }\n}\n\n$printer = printer();\nvar_dump($printer->current());\nvar_dump($printer->send('first'));\nvar_dump($printer->send('second'));\n```\n\n这个时候我们会发现执行的结果变成了:\n\n```shell\nint(1)\nthis is the yield first\nint(2)\nthis is the yield second\nint(3)\n```\n\n可以看到在第一次调用生成器函数的时候，生成器已经执行到了第一个yield表达式处，所以在$printer->send('first')之前，生成器便已经yield 1出来了，只是没有对这个生成的值进行接收处理，在send()了之后，echo语句便会紧接着完整的执行，执行完毕继续执行$i++，下次循环便是var_dump(2)。\n\n至此，我们看到了yield不仅能够返回数据而且还可以接收数据，而且两者可以同时进行，此时yield便成了数据双向传输的工具，这就为了实现协程提供了可能性。\n\n\n\n参考[在PHP中使用协程实现多任务调度](http://www.laruence.com/2015/05/28/3038.html)\n加深理解\n","source":"_posts/php的yield和生成器.md","raw":"---\nuuid: a26ff6c0-3a54-11e7-b496-b5e2f51b1564\ntitle: php的yield和生成器\ndate: 2017-05-17 00:28:03\ntags: php\n---\n\n相比较迭代器，**生成器**提供了一种更容易的方法来实现简单的对象迭代，性能开销和复杂性都大大降低。\n\n一个生成器函数看起来像一个普通的函数，不同的是普通函数返回一个值，而一个生成可以yield生成许多它所需要的值，并且每一次的生成返回值只是暂停当前的执行状态，当下次调用生成器函数时，PHP会从上次暂停的状态继续执行下去。\n\n<!--more-->\n我们在使用生成器的时候可以像关联数组那样指定一个键名对应生成的值。如下生成一个键值对与定义一个关联数组相似。\n\n```php\nfunction xrange($start, $limit, $step = 1) {\n    for ($i = $start, $j = 0; $i <= $limit; $i += $step, $j++) {\n        // 给予键值\n        yield $j => $i;\n    }\n}\n\n$xrange = xrange(1, 10, 2);\nforeach ($xrange as $key => $value) {\n    echo $key . ' => ' . $value . \"\\n\";\n}\n\n```\n\n实际上生成器函数返回的是一个Generator对象，这个对象不能通过new实例化，并且实现了Iterator接口。\n\n```php\nGenerator implements Iterator {\n    public mixed current(void)\n    public mixed key(void)\n    public void next(void)\n    public void rewind(void)\n    // 向生成器传入一个值\n    public mixed send(mixed $value)\n    public void throw(Exception $exception)\n    public bool valid(void)\n    // 序列化回调\n    public void __wakeup(void)\n}\n```\n\n可以看到出了实现Iterator的接口之外Generator还添加了send方法，用来向生成器传入一个值，并且当做yield表达式的结果，然后继续执行生成器，直到遇到下一个yield后会再次停住。\n\n```php\nfunction printer() {\n    while(true) {\n        echo 'receive: ' . yield . \"\\n\";\n    }\n}\n\n$printer = printer();\n$printer->send('Hello');\n$printer->send('world');\n```\n\n以上的例子会输出：\n```shell\nreceive: Hello\nreceive: world\n```\n\n在上面的例子中，经过第一个send()方法，yield表达式的值变为Hello，之后执行echo语句，输出第一条结果receive: Hello，输出完毕后继续执行到第二个yield处，只不过当前的语句没有执行到底，不会执行输出。如果将例子改改就能够看出来yield的继续执行到哪里。\n\n```php\nfunction printer() {\n    $i = 1;\n    while(true) {\n        echo 'this is the yield ' . $i . \"\\n\";\n        echo 'receive: ' . yield . \"\\n\";\n        $i++;\n    }\n}\n\n$printer = printer();\n$printer->send('Hello');\n$printer->send('world');\n\n```\n\n这次的输出便会变为:\n\n```shell\nthis is the yield 1\nreceive: hello\nthis is the yield 2\nreceive: world\nthis is the yield 3\n```\n\n这边可以清楚的看出send之后的继续执行到第二个yield处，之前的代码照常执行。\n\n我们再对例子进行适当的修改：\n\n```php\nfunction printer() {\n    $i = 1;\n    while(true) {\n        echo 'this is the yield ' . (yield $i) . \"\\n\";\n        $i++;\n    }\n}\n\n$printer = printer();\nvar_dump($printer->send('first'));\nvar_dump($printer->send('second'));\n```\n\n执行一下会发现结果为:\n\n```shell\nthis is the yield first\nint(2)\nthis is the yield second\nint(3)\n```\n\n让我们来看一下，是不是发现了问题，跑出来的结果不是从1开始的而是从2开始，这是为啥嘞，我们来分析一下：\n在此之前我们先来跑另外一段代码：\n\n```php\nfunction printer() {\n    $i = 1;\n    while(true) {\n        echo 'this is the yield ' . (yield $i) . \"\\n\";\n        $i++;\n    }\n}\n\n$printer = printer();\nvar_dump($printer->current());\nvar_dump($printer->send('first'));\nvar_dump($printer->send('second'));\n```\n\n这个时候我们会发现执行的结果变成了:\n\n```shell\nint(1)\nthis is the yield first\nint(2)\nthis is the yield second\nint(3)\n```\n\n可以看到在第一次调用生成器函数的时候，生成器已经执行到了第一个yield表达式处，所以在$printer->send('first')之前，生成器便已经yield 1出来了，只是没有对这个生成的值进行接收处理，在send()了之后，echo语句便会紧接着完整的执行，执行完毕继续执行$i++，下次循环便是var_dump(2)。\n\n至此，我们看到了yield不仅能够返回数据而且还可以接收数据，而且两者可以同时进行，此时yield便成了数据双向传输的工具，这就为了实现协程提供了可能性。\n\n\n\n参考[在PHP中使用协程实现多任务调度](http://www.laruence.com/2015/05/28/3038.html)\n加深理解\n","slug":"php的yield和生成器","published":1,"updated":"2017-08-15T02:57:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9ed001k91wq9zg6cymz","content":"<p>相比较迭代器，<strong>生成器</strong>提供了一种更容易的方法来实现简单的对象迭代，性能开销和复杂性都大大降低。</p>\n<p>一个生成器函数看起来像一个普通的函数，不同的是普通函数返回一个值，而一个生成可以yield生成许多它所需要的值，并且每一次的生成返回值只是暂停当前的执行状态，当下次调用生成器函数时，PHP会从上次暂停的状态继续执行下去。</p>\n<a id=\"more\"></a>\n<p>我们在使用生成器的时候可以像关联数组那样指定一个键名对应生成的值。如下生成一个键值对与定义一个关联数组相似。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">xrange</span><span class=\"params\">($start, $limit, $step = <span class=\"number\">1</span>)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> ($i = $start, $j = <span class=\"number\">0</span>; $i &lt;= $limit; $i += $step, $j++) &#123;</div><div class=\"line\">        <span class=\"comment\">// 给予键值</span></div><div class=\"line\">        <span class=\"keyword\">yield</span> $j =&gt; $i;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$xrange = xrange(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"keyword\">foreach</span> ($xrange <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> $key . <span class=\"string\">' =&gt; '</span> . $value . <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实际上生成器函数返回的是一个Generator对象，这个对象不能通过new实例化，并且实现了Iterator接口。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Generator implements Iterator &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> mixed current(void)</div><div class=\"line\">    <span class=\"keyword\">public</span> mixed key(void)</div><div class=\"line\">    <span class=\"keyword\">public</span> void next(void)</div><div class=\"line\">    <span class=\"keyword\">public</span> void rewind(void)</div><div class=\"line\">    <span class=\"comment\">// 向生成器传入一个值</span></div><div class=\"line\">    <span class=\"keyword\">public</span> mixed send(mixed $value)</div><div class=\"line\">    <span class=\"keyword\">public</span> void <span class=\"keyword\">throw</span>(<span class=\"keyword\">Exception</span> $exception)</div><div class=\"line\">    <span class=\"keyword\">public</span> bool valid(void)</div><div class=\"line\">    <span class=\"comment\">// 序列化回调</span></div><div class=\"line\">    <span class=\"keyword\">public</span> void __wakeup(void)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看到出了实现Iterator的接口之外Generator还添加了send方法，用来向生成器传入一个值，并且当做yield表达式的结果，然后继续执行生成器，直到遇到下一个yield后会再次停住。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'receive: '</span> . <span class=\"keyword\">yield</span> . <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$printer = printer();</div><div class=\"line\">$printer-&gt;send(<span class=\"string\">'Hello'</span>);</div><div class=\"line\">$printer-&gt;send(<span class=\"string\">'world'</span>);</div></pre></td></tr></table></figure>\n<p>以上的例子会输出：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">receive: Hello</div><div class=\"line\">receive: world</div></pre></td></tr></table></figure></p>\n<p>在上面的例子中，经过第一个send()方法，yield表达式的值变为Hello，之后执行echo语句，输出第一条结果receive: Hello，输出完毕后继续执行到第二个yield处，只不过当前的语句没有执行到底，不会执行输出。如果将例子改改就能够看出来yield的继续执行到哪里。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    $i = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'this is the yield '</span> . $i . <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'receive: '</span> . <span class=\"keyword\">yield</span> . <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">        $i++;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$printer = printer();</div><div class=\"line\">$printer-&gt;send(<span class=\"string\">'Hello'</span>);</div><div class=\"line\">$printer-&gt;send(<span class=\"string\">'world'</span>);</div></pre></td></tr></table></figure>\n<p>这次的输出便会变为:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">this is the yield 1</div><div class=\"line\">receive: hello</div><div class=\"line\">this is the yield 2</div><div class=\"line\">receive: world</div><div class=\"line\">this is the yield 3</div></pre></td></tr></table></figure>\n<p>这边可以清楚的看出send之后的继续执行到第二个yield处，之前的代码照常执行。</p>\n<p>我们再对例子进行适当的修改：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    $i = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'this is the yield '</span> . (<span class=\"keyword\">yield</span> $i) . <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">        $i++;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$printer = printer();</div><div class=\"line\">var_dump($printer-&gt;send(<span class=\"string\">'first'</span>));</div><div class=\"line\">var_dump($printer-&gt;send(<span class=\"string\">'second'</span>));</div></pre></td></tr></table></figure>\n<p>执行一下会发现结果为:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">this is the yield first</div><div class=\"line\">int(2)</div><div class=\"line\">this is the yield second</div><div class=\"line\">int(3)</div></pre></td></tr></table></figure>\n<p>让我们来看一下，是不是发现了问题，跑出来的结果不是从1开始的而是从2开始，这是为啥嘞，我们来分析一下：<br>在此之前我们先来跑另外一段代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    $i = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'this is the yield '</span> . (<span class=\"keyword\">yield</span> $i) . <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">        $i++;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$printer = printer();</div><div class=\"line\">var_dump($printer-&gt;current());</div><div class=\"line\">var_dump($printer-&gt;send(<span class=\"string\">'first'</span>));</div><div class=\"line\">var_dump($printer-&gt;send(<span class=\"string\">'second'</span>));</div></pre></td></tr></table></figure>\n<p>这个时候我们会发现执行的结果变成了:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">int(1)</div><div class=\"line\">this is the yield first</div><div class=\"line\">int(2)</div><div class=\"line\">this is the yield second</div><div class=\"line\">int(3)</div></pre></td></tr></table></figure>\n<p>可以看到在第一次调用生成器函数的时候，生成器已经执行到了第一个yield表达式处，所以在$printer-&gt;send(‘first’)之前，生成器便已经yield 1出来了，只是没有对这个生成的值进行接收处理，在send()了之后，echo语句便会紧接着完整的执行，执行完毕继续执行$i++，下次循环便是var_dump(2)。</p>\n<p>至此，我们看到了yield不仅能够返回数据而且还可以接收数据，而且两者可以同时进行，此时yield便成了数据双向传输的工具，这就为了实现协程提供了可能性。</p>\n<p>参考<a href=\"http://www.laruence.com/2015/05/28/3038.html\" target=\"_blank\" rel=\"external\">在PHP中使用协程实现多任务调度</a><br>加深理解</p>\n","site":{"data":{}},"excerpt":"<p>相比较迭代器，<strong>生成器</strong>提供了一种更容易的方法来实现简单的对象迭代，性能开销和复杂性都大大降低。</p>\n<p>一个生成器函数看起来像一个普通的函数，不同的是普通函数返回一个值，而一个生成可以yield生成许多它所需要的值，并且每一次的生成返回值只是暂停当前的执行状态，当下次调用生成器函数时，PHP会从上次暂停的状态继续执行下去。</p>","more":"<p>我们在使用生成器的时候可以像关联数组那样指定一个键名对应生成的值。如下生成一个键值对与定义一个关联数组相似。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">xrange</span><span class=\"params\">($start, $limit, $step = <span class=\"number\">1</span>)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> ($i = $start, $j = <span class=\"number\">0</span>; $i &lt;= $limit; $i += $step, $j++) &#123;</div><div class=\"line\">        <span class=\"comment\">// 给予键值</span></div><div class=\"line\">        <span class=\"keyword\">yield</span> $j =&gt; $i;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$xrange = xrange(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"keyword\">foreach</span> ($xrange <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> $key . <span class=\"string\">' =&gt; '</span> . $value . <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实际上生成器函数返回的是一个Generator对象，这个对象不能通过new实例化，并且实现了Iterator接口。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Generator implements Iterator &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> mixed current(void)</div><div class=\"line\">    <span class=\"keyword\">public</span> mixed key(void)</div><div class=\"line\">    <span class=\"keyword\">public</span> void next(void)</div><div class=\"line\">    <span class=\"keyword\">public</span> void rewind(void)</div><div class=\"line\">    <span class=\"comment\">// 向生成器传入一个值</span></div><div class=\"line\">    <span class=\"keyword\">public</span> mixed send(mixed $value)</div><div class=\"line\">    <span class=\"keyword\">public</span> void <span class=\"keyword\">throw</span>(<span class=\"keyword\">Exception</span> $exception)</div><div class=\"line\">    <span class=\"keyword\">public</span> bool valid(void)</div><div class=\"line\">    <span class=\"comment\">// 序列化回调</span></div><div class=\"line\">    <span class=\"keyword\">public</span> void __wakeup(void)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看到出了实现Iterator的接口之外Generator还添加了send方法，用来向生成器传入一个值，并且当做yield表达式的结果，然后继续执行生成器，直到遇到下一个yield后会再次停住。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'receive: '</span> . <span class=\"keyword\">yield</span> . <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$printer = printer();</div><div class=\"line\">$printer-&gt;send(<span class=\"string\">'Hello'</span>);</div><div class=\"line\">$printer-&gt;send(<span class=\"string\">'world'</span>);</div></pre></td></tr></table></figure>\n<p>以上的例子会输出：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">receive: Hello</div><div class=\"line\">receive: world</div></pre></td></tr></table></figure></p>\n<p>在上面的例子中，经过第一个send()方法，yield表达式的值变为Hello，之后执行echo语句，输出第一条结果receive: Hello，输出完毕后继续执行到第二个yield处，只不过当前的语句没有执行到底，不会执行输出。如果将例子改改就能够看出来yield的继续执行到哪里。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    $i = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'this is the yield '</span> . $i . <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'receive: '</span> . <span class=\"keyword\">yield</span> . <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">        $i++;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$printer = printer();</div><div class=\"line\">$printer-&gt;send(<span class=\"string\">'Hello'</span>);</div><div class=\"line\">$printer-&gt;send(<span class=\"string\">'world'</span>);</div></pre></td></tr></table></figure>\n<p>这次的输出便会变为:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">this is the yield 1</div><div class=\"line\">receive: hello</div><div class=\"line\">this is the yield 2</div><div class=\"line\">receive: world</div><div class=\"line\">this is the yield 3</div></pre></td></tr></table></figure>\n<p>这边可以清楚的看出send之后的继续执行到第二个yield处，之前的代码照常执行。</p>\n<p>我们再对例子进行适当的修改：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    $i = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'this is the yield '</span> . (<span class=\"keyword\">yield</span> $i) . <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">        $i++;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$printer = printer();</div><div class=\"line\">var_dump($printer-&gt;send(<span class=\"string\">'first'</span>));</div><div class=\"line\">var_dump($printer-&gt;send(<span class=\"string\">'second'</span>));</div></pre></td></tr></table></figure>\n<p>执行一下会发现结果为:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">this is the yield first</div><div class=\"line\">int(2)</div><div class=\"line\">this is the yield second</div><div class=\"line\">int(3)</div></pre></td></tr></table></figure>\n<p>让我们来看一下，是不是发现了问题，跑出来的结果不是从1开始的而是从2开始，这是为啥嘞，我们来分析一下：<br>在此之前我们先来跑另外一段代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    $i = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'this is the yield '</span> . (<span class=\"keyword\">yield</span> $i) . <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">        $i++;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$printer = printer();</div><div class=\"line\">var_dump($printer-&gt;current());</div><div class=\"line\">var_dump($printer-&gt;send(<span class=\"string\">'first'</span>));</div><div class=\"line\">var_dump($printer-&gt;send(<span class=\"string\">'second'</span>));</div></pre></td></tr></table></figure>\n<p>这个时候我们会发现执行的结果变成了:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">int(1)</div><div class=\"line\">this is the yield first</div><div class=\"line\">int(2)</div><div class=\"line\">this is the yield second</div><div class=\"line\">int(3)</div></pre></td></tr></table></figure>\n<p>可以看到在第一次调用生成器函数的时候，生成器已经执行到了第一个yield表达式处，所以在$printer-&gt;send(‘first’)之前，生成器便已经yield 1出来了，只是没有对这个生成的值进行接收处理，在send()了之后，echo语句便会紧接着完整的执行，执行完毕继续执行$i++，下次循环便是var_dump(2)。</p>\n<p>至此，我们看到了yield不仅能够返回数据而且还可以接收数据，而且两者可以同时进行，此时yield便成了数据双向传输的工具，这就为了实现协程提供了可能性。</p>\n<p>参考<a href=\"http://www.laruence.com/2015/05/28/3038.html\" target=\"_blank\" rel=\"external\">在PHP中使用协程实现多任务调度</a><br>加深理解</p>"},{"uuid":"f192d6e0-3a4b-11e7-b593-1fcd04ea44f8","title":"php迭代器和yield","date":"2017-05-16T15:25:50.000Z","_content":"\n\nPHP提供了统一的迭代器接口：\n```php\nIterator extends Traversable\n{\n\t//返回当前元素\n\tabstract public mixed current(void)\n\t//返回当前元素的键\n\tabstract public scalar key(void)\n\t//向下移动到下一个元素\n\tabstract public void next(void)\n\t//返回到迭代器的第一个元素\n\tabstract public void remind(void)\n\t//检查当前位置是否有效\n\tabstract public boolean valid(void)\n}\n```\n\n<!-- more -->\n\n通过**Iterator接口**, 我们可以自行实现,来观察迭代器的调用顺序.\n```php\nclass MyIterator implements Iterator\n{\n\tprivate $position = 0;\n\tprivate $arr = array(\n\t\t'first', 'second', 'third',\n\t);\n\n\tpublic function __construct()\n\t{\n\t\t$this->_position = 0;\n\t}\n\n\tpublic function rewind()\n\t{\n\t\tvar_dump(__METHOD__);\n\t\t$this->_position = 0;\n\t}\n\n\tpublic function current()\n\t{\n\t\tvar_dump(__METHOD__);\n\t\treturn $this->arr[ $this->_position ];\n\t}\n\n\tpublic function key()\n\t{\n\t\tvar_dump(__METHOD__);\n\t\treturn $this->position;\n\t}\n\n\tpublic function next()\n\t{\n\t\tvar_dump(__METHOD__);\n\t\t++$this->_position;\n\t}\n\n\tpublic function valid()\n\t{\n\t\tvar_dump(__METHOD__);\n\t\treturn isset( $this->arr[ $this->_position ] );\n\t}\n\n\t$it = new MyIterator();\n\tforeach( $it as $key => $value )\n\t{\n\t\tvar_dump( $key , $value );\n\t\techo PHP_EOL;\n\t}\n}\n```\n\nphp运行结果\n```shell\nstring(18) \"MyIterator::rewind\"\nstring(17) \"MyIterator::valid\"\nstring(19) \"MyIterator::current\"\nstring(15) \"MyIterator::key\"\nint(0)\nstring(5) \"first\"\n\nstring(16) \"MyIterator::next\"\nstring(17) \"MyIterator::valid\"\nstring(19) \"MyIterator::current\"\nstring(15) \"MyIterator::key\"\nint(1)\nstring(6) \"second\"\n\nstring(16) \"MyIterator::next\"\nstring(17) \"MyIterator::valid\"\nstring(19) \"MyIterator::current\"\nstring(15) \"MyIterator::key\"\nint(2)\nstring(5) \"third\"\n\nstring(16) \"MyIterator::next\"\nstring(17) \"MyIterator::valid\"\n```\n\n通过这个例子能够清楚的看到了foreach循环中调用的顺序。从例子也能看出通过迭代器能够将一个普通的对象转化为一个可被遍历的对象。这在有些时候，能够将一个普通的UsersInfo对象转化为一个可以遍历的对象，那么就不需要通过UsersInfo::getAllUser()获取一个数组然后遍历数组，而且还可以在对象中对数据进行预处理。\n","source":"_posts/php迭代器.md","raw":"---\nuuid: f192d6e0-3a4b-11e7-b593-1fcd04ea44f8\ntitle: php迭代器和yield\ndate: 2017-05-16 23:25:50\ntags: php\n---\n\n\nPHP提供了统一的迭代器接口：\n```php\nIterator extends Traversable\n{\n\t//返回当前元素\n\tabstract public mixed current(void)\n\t//返回当前元素的键\n\tabstract public scalar key(void)\n\t//向下移动到下一个元素\n\tabstract public void next(void)\n\t//返回到迭代器的第一个元素\n\tabstract public void remind(void)\n\t//检查当前位置是否有效\n\tabstract public boolean valid(void)\n}\n```\n\n<!-- more -->\n\n通过**Iterator接口**, 我们可以自行实现,来观察迭代器的调用顺序.\n```php\nclass MyIterator implements Iterator\n{\n\tprivate $position = 0;\n\tprivate $arr = array(\n\t\t'first', 'second', 'third',\n\t);\n\n\tpublic function __construct()\n\t{\n\t\t$this->_position = 0;\n\t}\n\n\tpublic function rewind()\n\t{\n\t\tvar_dump(__METHOD__);\n\t\t$this->_position = 0;\n\t}\n\n\tpublic function current()\n\t{\n\t\tvar_dump(__METHOD__);\n\t\treturn $this->arr[ $this->_position ];\n\t}\n\n\tpublic function key()\n\t{\n\t\tvar_dump(__METHOD__);\n\t\treturn $this->position;\n\t}\n\n\tpublic function next()\n\t{\n\t\tvar_dump(__METHOD__);\n\t\t++$this->_position;\n\t}\n\n\tpublic function valid()\n\t{\n\t\tvar_dump(__METHOD__);\n\t\treturn isset( $this->arr[ $this->_position ] );\n\t}\n\n\t$it = new MyIterator();\n\tforeach( $it as $key => $value )\n\t{\n\t\tvar_dump( $key , $value );\n\t\techo PHP_EOL;\n\t}\n}\n```\n\nphp运行结果\n```shell\nstring(18) \"MyIterator::rewind\"\nstring(17) \"MyIterator::valid\"\nstring(19) \"MyIterator::current\"\nstring(15) \"MyIterator::key\"\nint(0)\nstring(5) \"first\"\n\nstring(16) \"MyIterator::next\"\nstring(17) \"MyIterator::valid\"\nstring(19) \"MyIterator::current\"\nstring(15) \"MyIterator::key\"\nint(1)\nstring(6) \"second\"\n\nstring(16) \"MyIterator::next\"\nstring(17) \"MyIterator::valid\"\nstring(19) \"MyIterator::current\"\nstring(15) \"MyIterator::key\"\nint(2)\nstring(5) \"third\"\n\nstring(16) \"MyIterator::next\"\nstring(17) \"MyIterator::valid\"\n```\n\n通过这个例子能够清楚的看到了foreach循环中调用的顺序。从例子也能看出通过迭代器能够将一个普通的对象转化为一个可被遍历的对象。这在有些时候，能够将一个普通的UsersInfo对象转化为一个可以遍历的对象，那么就不需要通过UsersInfo::getAllUser()获取一个数组然后遍历数组，而且还可以在对象中对数据进行预处理。\n","slug":"php迭代器","published":1,"updated":"2017-08-15T02:57:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9ee001m91wq26tyre6w","content":"<p>PHP提供了统一的迭代器接口：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Iterator extends Traversable</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"comment\">//返回当前元素</span></div><div class=\"line\">\t<span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> mixed current(void)</div><div class=\"line\">\t<span class=\"comment\">//返回当前元素的键</span></div><div class=\"line\">\t<span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> scalar key(void)</div><div class=\"line\">\t<span class=\"comment\">//向下移动到下一个元素</span></div><div class=\"line\">\t<span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> void next(void)</div><div class=\"line\">\t<span class=\"comment\">//返回到迭代器的第一个元素</span></div><div class=\"line\">\t<span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> void remind(void)</div><div class=\"line\">\t<span class=\"comment\">//检查当前位置是否有效</span></div><div class=\"line\">\t<span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> boolean valid(void)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>通过<strong>Iterator接口</strong>, 我们可以自行实现,来观察迭代器的调用顺序.<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> $position = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> $arr = <span class=\"keyword\">array</span>(</div><div class=\"line\">\t\t<span class=\"string\">'first'</span>, <span class=\"string\">'second'</span>, <span class=\"string\">'third'</span>,</div><div class=\"line\">\t);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">\t</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">$this</span>-&gt;_position = <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rewind</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">\t</span>&#123;</div><div class=\"line\">\t\tvar_dump(<span class=\"keyword\">__METHOD__</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">$this</span>-&gt;_position = <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">current</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">\t</span>&#123;</div><div class=\"line\">\t\tvar_dump(<span class=\"keyword\">__METHOD__</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;arr[ <span class=\"keyword\">$this</span>-&gt;_position ];</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">key</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">\t</span>&#123;</div><div class=\"line\">\t\tvar_dump(<span class=\"keyword\">__METHOD__</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;position;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">\t</span>&#123;</div><div class=\"line\">\t\tvar_dump(<span class=\"keyword\">__METHOD__</span>);</div><div class=\"line\">\t\t++<span class=\"keyword\">$this</span>-&gt;_position;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">valid</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">\t</span>&#123;</div><div class=\"line\">\t\tvar_dump(<span class=\"keyword\">__METHOD__</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">isset</span>( <span class=\"keyword\">$this</span>-&gt;arr[ <span class=\"keyword\">$this</span>-&gt;_position ] );</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t$it = <span class=\"keyword\">new</span> MyIterator();</div><div class=\"line\">\t<span class=\"keyword\">foreach</span>( $it <span class=\"keyword\">as</span> $key =&gt; $value )</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tvar_dump( $key , $value );</div><div class=\"line\">\t\t<span class=\"keyword\">echo</span> PHP_EOL;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>php运行结果<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">string(18) \"MyIterator::rewind\"</div><div class=\"line\">string(17) \"MyIterator::valid\"</div><div class=\"line\">string(19) \"MyIterator::current\"</div><div class=\"line\">string(15) \"MyIterator::key\"</div><div class=\"line\">int(0)</div><div class=\"line\">string(5) \"first\"</div><div class=\"line\"></div><div class=\"line\">string(16) \"MyIterator::next\"</div><div class=\"line\">string(17) \"MyIterator::valid\"</div><div class=\"line\">string(19) \"MyIterator::current\"</div><div class=\"line\">string(15) \"MyIterator::key\"</div><div class=\"line\">int(1)</div><div class=\"line\">string(6) \"second\"</div><div class=\"line\"></div><div class=\"line\">string(16) \"MyIterator::next\"</div><div class=\"line\">string(17) \"MyIterator::valid\"</div><div class=\"line\">string(19) \"MyIterator::current\"</div><div class=\"line\">string(15) \"MyIterator::key\"</div><div class=\"line\">int(2)</div><div class=\"line\">string(5) \"third\"</div><div class=\"line\"></div><div class=\"line\">string(16) \"MyIterator::next\"</div><div class=\"line\">string(17) \"MyIterator::valid\"</div></pre></td></tr></table></figure></p>\n<p>通过这个例子能够清楚的看到了foreach循环中调用的顺序。从例子也能看出通过迭代器能够将一个普通的对象转化为一个可被遍历的对象。这在有些时候，能够将一个普通的UsersInfo对象转化为一个可以遍历的对象，那么就不需要通过UsersInfo::getAllUser()获取一个数组然后遍历数组，而且还可以在对象中对数据进行预处理。</p>\n","site":{"data":{}},"excerpt":"<p>PHP提供了统一的迭代器接口：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Iterator extends Traversable</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"comment\">//返回当前元素</span></div><div class=\"line\">\t<span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> mixed current(void)</div><div class=\"line\">\t<span class=\"comment\">//返回当前元素的键</span></div><div class=\"line\">\t<span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> scalar key(void)</div><div class=\"line\">\t<span class=\"comment\">//向下移动到下一个元素</span></div><div class=\"line\">\t<span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> void next(void)</div><div class=\"line\">\t<span class=\"comment\">//返回到迭代器的第一个元素</span></div><div class=\"line\">\t<span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> void remind(void)</div><div class=\"line\">\t<span class=\"comment\">//检查当前位置是否有效</span></div><div class=\"line\">\t<span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> boolean valid(void)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>","more":"<p>通过<strong>Iterator接口</strong>, 我们可以自行实现,来观察迭代器的调用顺序.<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> $position = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> $arr = <span class=\"keyword\">array</span>(</div><div class=\"line\">\t\t<span class=\"string\">'first'</span>, <span class=\"string\">'second'</span>, <span class=\"string\">'third'</span>,</div><div class=\"line\">\t);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">\t</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">$this</span>-&gt;_position = <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rewind</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">\t</span>&#123;</div><div class=\"line\">\t\tvar_dump(<span class=\"keyword\">__METHOD__</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">$this</span>-&gt;_position = <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">current</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">\t</span>&#123;</div><div class=\"line\">\t\tvar_dump(<span class=\"keyword\">__METHOD__</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;arr[ <span class=\"keyword\">$this</span>-&gt;_position ];</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">key</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">\t</span>&#123;</div><div class=\"line\">\t\tvar_dump(<span class=\"keyword\">__METHOD__</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;position;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">\t</span>&#123;</div><div class=\"line\">\t\tvar_dump(<span class=\"keyword\">__METHOD__</span>);</div><div class=\"line\">\t\t++<span class=\"keyword\">$this</span>-&gt;_position;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">valid</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">\t</span>&#123;</div><div class=\"line\">\t\tvar_dump(<span class=\"keyword\">__METHOD__</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">isset</span>( <span class=\"keyword\">$this</span>-&gt;arr[ <span class=\"keyword\">$this</span>-&gt;_position ] );</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t$it = <span class=\"keyword\">new</span> MyIterator();</div><div class=\"line\">\t<span class=\"keyword\">foreach</span>( $it <span class=\"keyword\">as</span> $key =&gt; $value )</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tvar_dump( $key , $value );</div><div class=\"line\">\t\t<span class=\"keyword\">echo</span> PHP_EOL;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>php运行结果<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">string(18) \"MyIterator::rewind\"</div><div class=\"line\">string(17) \"MyIterator::valid\"</div><div class=\"line\">string(19) \"MyIterator::current\"</div><div class=\"line\">string(15) \"MyIterator::key\"</div><div class=\"line\">int(0)</div><div class=\"line\">string(5) \"first\"</div><div class=\"line\"></div><div class=\"line\">string(16) \"MyIterator::next\"</div><div class=\"line\">string(17) \"MyIterator::valid\"</div><div class=\"line\">string(19) \"MyIterator::current\"</div><div class=\"line\">string(15) \"MyIterator::key\"</div><div class=\"line\">int(1)</div><div class=\"line\">string(6) \"second\"</div><div class=\"line\"></div><div class=\"line\">string(16) \"MyIterator::next\"</div><div class=\"line\">string(17) \"MyIterator::valid\"</div><div class=\"line\">string(19) \"MyIterator::current\"</div><div class=\"line\">string(15) \"MyIterator::key\"</div><div class=\"line\">int(2)</div><div class=\"line\">string(5) \"third\"</div><div class=\"line\"></div><div class=\"line\">string(16) \"MyIterator::next\"</div><div class=\"line\">string(17) \"MyIterator::valid\"</div></pre></td></tr></table></figure></p>\n<p>通过这个例子能够清楚的看到了foreach循环中调用的顺序。从例子也能看出通过迭代器能够将一个普通的对象转化为一个可被遍历的对象。这在有些时候，能够将一个普通的UsersInfo对象转化为一个可以遍历的对象，那么就不需要通过UsersInfo::getAllUser()获取一个数组然后遍历数组，而且还可以在对象中对数据进行预处理。</p>"},{"uuid":"4eaa11c0-3bd9-11e7-b0d0-2307cdf5da87","title":"redis和memcached","date":"2017-05-18T14:50:17.000Z","_content":"\nmemcached是多线程，非阻塞IO复用的网络模型，分为监听主线程和worker子线程，监听线程监听网络连接，接受请求后，将连接描述字pipe传递给worker线程，进行读写IO，网络层使用libevent封装的事件库，多线程模型可以发挥多核作用，但是引入了cache coherency和锁的问题，比如：memcached最常用的stats命令，实际memcached所有操作都要对这个全局变量加锁，进行技术等工作，带来了性能损耗。\n\nredis使用单线程的IO复用模型，自己封装了一个简单的AeEvent事件处理框架，主要实现了epoll, kqueue和select，对于单存只有IO操作来说，单线程可以将速度优势发挥到最大，但是redis也提供了一些简单的计算功能，比如排序、聚合等，对于这些操作，单线程模型施加会严重影响整体吞吐量，CPU计算过程中，整个IO调度都是被阻塞的。\n\n*参考*[Redis 和 Memcached 的区别](http://blog.jobbole.com/101496/)\n","source":"_posts/redis和memcached.md","raw":"---\nuuid: 4eaa11c0-3bd9-11e7-b0d0-2307cdf5da87\ntitle: redis和memcached\ndate: 2017-05-18 22:50:17\ntags: nosql\n---\n\nmemcached是多线程，非阻塞IO复用的网络模型，分为监听主线程和worker子线程，监听线程监听网络连接，接受请求后，将连接描述字pipe传递给worker线程，进行读写IO，网络层使用libevent封装的事件库，多线程模型可以发挥多核作用，但是引入了cache coherency和锁的问题，比如：memcached最常用的stats命令，实际memcached所有操作都要对这个全局变量加锁，进行技术等工作，带来了性能损耗。\n\nredis使用单线程的IO复用模型，自己封装了一个简单的AeEvent事件处理框架，主要实现了epoll, kqueue和select，对于单存只有IO操作来说，单线程可以将速度优势发挥到最大，但是redis也提供了一些简单的计算功能，比如排序、聚合等，对于这些操作，单线程模型施加会严重影响整体吞吐量，CPU计算过程中，整个IO调度都是被阻塞的。\n\n*参考*[Redis 和 Memcached 的区别](http://blog.jobbole.com/101496/)\n","slug":"redis和memcached","published":1,"updated":"2017-08-15T02:57:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9eh001o91wqwmu3g4cg","content":"<p>memcached是多线程，非阻塞IO复用的网络模型，分为监听主线程和worker子线程，监听线程监听网络连接，接受请求后，将连接描述字pipe传递给worker线程，进行读写IO，网络层使用libevent封装的事件库，多线程模型可以发挥多核作用，但是引入了cache coherency和锁的问题，比如：memcached最常用的stats命令，实际memcached所有操作都要对这个全局变量加锁，进行技术等工作，带来了性能损耗。</p>\n<p>redis使用单线程的IO复用模型，自己封装了一个简单的AeEvent事件处理框架，主要实现了epoll, kqueue和select，对于单存只有IO操作来说，单线程可以将速度优势发挥到最大，但是redis也提供了一些简单的计算功能，比如排序、聚合等，对于这些操作，单线程模型施加会严重影响整体吞吐量，CPU计算过程中，整个IO调度都是被阻塞的。</p>\n<p><em>参考</em><a href=\"http://blog.jobbole.com/101496/\" target=\"_blank\" rel=\"external\">Redis 和 Memcached 的区别</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>memcached是多线程，非阻塞IO复用的网络模型，分为监听主线程和worker子线程，监听线程监听网络连接，接受请求后，将连接描述字pipe传递给worker线程，进行读写IO，网络层使用libevent封装的事件库，多线程模型可以发挥多核作用，但是引入了cache coherency和锁的问题，比如：memcached最常用的stats命令，实际memcached所有操作都要对这个全局变量加锁，进行技术等工作，带来了性能损耗。</p>\n<p>redis使用单线程的IO复用模型，自己封装了一个简单的AeEvent事件处理框架，主要实现了epoll, kqueue和select，对于单存只有IO操作来说，单线程可以将速度优势发挥到最大，但是redis也提供了一些简单的计算功能，比如排序、聚合等，对于这些操作，单线程模型施加会严重影响整体吞吐量，CPU计算过程中，整个IO调度都是被阻塞的。</p>\n<p><em>参考</em><a href=\"http://blog.jobbole.com/101496/\" target=\"_blank\" rel=\"external\">Redis 和 Memcached 的区别</a></p>\n"},{"title":"su指定用户执行命令","date":"2017-08-31T03:09:42.000Z","_content":"\n## 命令行模式下\n```\n/etc/passwd中nologin改为bash\nsu user -s /bin/bash -c 'touch test.x'\n```\n\n## /etc/crontab下 \n```\n* * * * * user echo '12312' >> /tmp/test.x\n```\n","source":"_posts/su指定用户执行命令.md","raw":"---\ntitle: su指定用户执行命令\ndate: 2017-08-31 11:09:42\ntags: crontab\ncategories: 运维\n---\n\n## 命令行模式下\n```\n/etc/passwd中nologin改为bash\nsu user -s /bin/bash -c 'touch test.x'\n```\n\n## /etc/crontab下 \n```\n* * * * * user echo '12312' >> /tmp/test.x\n```\n","slug":"su指定用户执行命令","published":1,"updated":"2018-03-21T02:34:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9ej001q91wqc2opgggz","content":"<h2 id=\"命令行模式下\"><a href=\"#命令行模式下\" class=\"headerlink\" title=\"命令行模式下\"></a>命令行模式下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/passwd中nologin改为bash</div><div class=\"line\">su user -s /bin/bash -c &apos;touch test.x&apos;</div></pre></td></tr></table></figure>\n<h2 id=\"etc-crontab下\"><a href=\"#etc-crontab下\" class=\"headerlink\" title=\"/etc/crontab下\"></a>/etc/crontab下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">* * * * * user echo &apos;12312&apos; &gt;&gt; /tmp/test.x</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"命令行模式下\"><a href=\"#命令行模式下\" class=\"headerlink\" title=\"命令行模式下\"></a>命令行模式下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/passwd中nologin改为bash</div><div class=\"line\">su user -s /bin/bash -c &apos;touch test.x&apos;</div></pre></td></tr></table></figure>\n<h2 id=\"etc-crontab下\"><a href=\"#etc-crontab下\" class=\"headerlink\" title=\"/etc/crontab下\"></a>/etc/crontab下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">* * * * * user echo &apos;12312&apos; &gt;&gt; /tmp/test.x</div></pre></td></tr></table></figure>\n"},{"title":"rpm打包","date":"2018-05-11T03:19:03.000Z","_content":"\n装rpm包制作工具\nsudo yum install -y rpm-build rpmdevtools\n\n\n生成一个 rpm 包的骨架目录\nrpmdev-setuptree\n\n生成一个 spec 骨架文件\nrpmdev-newspec  helloworld.spec\n\n打包\nrpmbuild -ba SPECS/helloworld.spec  \n\n\n解压\nrpm2cpio oracle-instantclient11.2-basic-11.2.0.2.0.i386.rpm | cpio -div\n\n","source":"_posts/rpm打包.md","raw":"---\ntitle: rpm打包\ndate: 2018-05-11 11:19:03\ntags: rpm\n---\n\n装rpm包制作工具\nsudo yum install -y rpm-build rpmdevtools\n\n\n生成一个 rpm 包的骨架目录\nrpmdev-setuptree\n\n生成一个 spec 骨架文件\nrpmdev-newspec  helloworld.spec\n\n打包\nrpmbuild -ba SPECS/helloworld.spec  \n\n\n解压\nrpm2cpio oracle-instantclient11.2-basic-11.2.0.2.0.i386.rpm | cpio -div\n\n","slug":"rpm打包","published":1,"updated":"2018-05-11T03:32:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9el001s91wqpibzh2vv","content":"<p>装rpm包制作工具<br>sudo yum install -y rpm-build rpmdevtools</p>\n<p>生成一个 rpm 包的骨架目录<br>rpmdev-setuptree</p>\n<p>生成一个 spec 骨架文件<br>rpmdev-newspec  helloworld.spec</p>\n<p>打包<br>rpmbuild -ba SPECS/helloworld.spec  </p>\n<p>解压<br>rpm2cpio oracle-instantclient11.2-basic-11.2.0.2.0.i386.rpm | cpio -div</p>\n","site":{"data":{}},"excerpt":"","more":"<p>装rpm包制作工具<br>sudo yum install -y rpm-build rpmdevtools</p>\n<p>生成一个 rpm 包的骨架目录<br>rpmdev-setuptree</p>\n<p>生成一个 spec 骨架文件<br>rpmdev-newspec  helloworld.spec</p>\n<p>打包<br>rpmbuild -ba SPECS/helloworld.spec  </p>\n<p>解压<br>rpm2cpio oracle-instantclient11.2-basic-11.2.0.2.0.i386.rpm | cpio -div</p>\n"},{"uuid":"8d19f870-30db-11e7-9203-0199550ca1d8","title":"一致性hash算法","date":"2017-05-04T15:08:38.000Z","_content":"\n参考 [Consistent hashing](https://www.codeproject.com/Articles/56138/Consistent-hashing)\n\n<!--more-->\n```php\n<?php\n/**\n * Flexihash - A simple consistent hashing implementation for PHP.\n * The MIT License\n */\nclass flexihash\n{\n\n    /**\n     * The number of positions to hash each target to.\n     *\n     * @var int\n     * @comment 虚拟节点数,解决节点分布不均的问题\n     */\n    private $_replicas = 64;\n\n    /**\n     * The hash algorithm, encapsulated in a Flexihash_Hasher implementation.\n     * @var object Flexihash_Hasher\n     * @comment 使用的hash方法 : md5,crc32\n     */\n    private $_hasher;\n\n    /**\n     * Internal counter for current number of targets.\n     * @var int\n     * @comment 节点记数器\n     */\n    private $_targetCount = 0;\n\n    /**\n     * Internal map of positions (hash outputs) to targets\n     * @var array { position => target, ... }\n     * @comment 位置对应节点,用于lookup中根据位置确定要访问的节点\n     */\n    private $_positionToTarget = array();\n\n    /**\n     * Internal map of targets to lists of positions that target is hashed to.\n     * @var array { target => [ position, position, ... ], ... }\n     * @comment 节点对应位置,用于删除节点\n     */\n    private $_targetToPositions = array();\n\n    /**\n     * Whether the internal map of positions to targets is already sorted.\n     * @var boolean\n     * @comment 是否已排序\n     */\n    private $_positionToTargetSorted = false;\n\n    /**\n     * Constructor\n     * @param object $hasher Flexihash_Hasher\n     * @param int $replicas Amount of positions to hash each target to.\n     * @comment 构造函数,确定要使用的hash方法和需拟节点数,虚拟节点数越多,分布越均匀,但程序的分布式运算越慢\n     */\n    public function __construct(Flexihash_Hasher $hasher = null, $replicas = null)\n    {\n        $this->_hasher = $hasher ? $hasher : new Flexihash_Crc32Hasher();\n        if (!empty($replicas)) $this->_replicas = $replicas;\n    }\n\n    /**\n     * Add a target.\n     * @param string $target\n     * @chainable\n     * @comment 添加节点,根据虚拟节点数,将节点分布到多个虚拟位置上\n     */\n    public function addTarget($target)\n    {\n        if (isset($this->_targetToPositions[$target]))\n        {\n            throw new Flexihash_Exception(\"Target '$target' already exists.\");\n        }\n\n        $this->_targetToPositions[$target] = array();\n\n        // hash the target into multiple positions\n        for ($i = 0; $i < $this->_replicas; $i++)\n        {\n            $position = $this->_hasher->hash($target . $i);\n            $this->_positionToTarget[$position] = $target; // lookup\n            $this->_targetToPositions[$target] []= $position; // target removal\n        }\n\n        $this->_positionToTargetSorted = false;\n        $this->_targetCount++;\n\n        return $this;\n    }\n\n    /**\n     * Add a list of targets.\n     * @param array $targets\n     * @chainable\n     */\n    public function addTargets($targets)\n    {\n        foreach ($targets as $target)\n        {\n            $this->addTarget($target);\n        }\n\n        return $this;\n    }\n\n    /**\n     * Remove a target.\n     * @param string $target\n     * @chainable\n     */\n    public function removeTarget($target)\n    {\n        if (!isset($this->_targetToPositions[$target]))\n        {\n            throw new Flexihash_Exception(\"Target '$target' does not exist.\");\n        }\n\n        foreach ($this->_targetToPositions[$target] as $position)\n        {\n            unset($this->_positionToTarget[$position]);\n        }\n\n        unset($this->_targetToPositions[$target]);\n\n        $this->_targetCount--;\n\n        return $this;\n    }\n\n    /**\n     * A list of all potential targets\n     * @return array\n     */\n    public function getAllTargets()\n    {\n        return array_keys($this->_targetToPositions);\n    }\n\n    /**\n     * Looks up the target for the given resource.\n     * @param string $resource\n     * @return string\n     */\n    public function lookup($resource)\n    {\n        $targets = $this->lookupList($resource, 1);\n        if (empty($targets)) throw new Flexihash_Exception('No targets exist');\n        return $targets[0];\n    }\n\n    /**\n     * Get a list of targets for the resource, in order of precedence.\n     * Up to $requestedCount targets are returned, less if there are fewer in total.\n     *\n     * @param string $resource\n     * @param int $requestedCount The length of the list to return\n     * @return array List of targets\n     * @comment 查找当前的资源对应的节点,\n     *          节点为空则返回空,节点只有一个则返回该节点,\n     *          对当前资源进行hash,对所有的位置进行排序,在有序的位置列上寻找当前资源的位置\n     *          当全部没有找到的时候,将资源的位置确定为有序位置的第一个(形成一个环)\n     *          返回所找到的节点\n     */\n    public function lookupList($resource, $requestedCount)\n    {\n        if (!$requestedCount)\n            throw new Flexihash_Exception('Invalid count requested');\n\n        // handle no targets\n        if (empty($this->_positionToTarget))\n            return array();\n\n        // optimize single target\n        if ($this->_targetCount == 1)\n            return array_unique(array_values($this->_positionToTarget));\n\n        // hash resource to a position\n        $resourcePosition = $this->_hasher->hash($resource);\n\n        $results = array();\n        $collect = false;\n\n        $this->_sortPositionTargets();\n\n        // search values above the resourcePosition\n        foreach ($this->_positionToTarget as $key => $value)\n        {\n            // start collecting targets after passing resource position\n            if (!$collect && $key > $resourcePosition)\n            {\n                $collect = true;\n            }\n\n            // only collect the first instance of any target\n            if ($collect && !in_array($value, $results))\n            {\n                $results []= $value;\n            }\n\n            // return when enough results, or list exhausted\n            if (count($results) == $requestedCount || count($results) == $this->_targetCount)\n            {\n                return $results;\n            }\n        }\n\n        // loop to start - search values below the resourcePosition\n        foreach ($this->_positionToTarget as $key => $value)\n        {\n            if (!in_array($value, $results))\n            {\n                $results []= $value;\n            }\n\n            // return when enough results, or list exhausted\n            if (count($results) == $requestedCount || count($results) == $this->_targetCount)\n            {\n                return $results;\n            }\n        }\n\n        // return results after iterating through both \"parts\"\n        return $results;\n    }\n\n    public function __toString()\n    {\n        return sprintf(\n            '%s{targets:[%s]}',\n            get_class($this),\n            implode(',', $this->getAllTargets())\n        );\n    }\n\n    // ----------------------------------------\n    // private methods\n\n    /**\n     * Sorts the internal mapping (positions to targets) by position\n     */\n    private function _sortPositionTargets()\n    {\n        // sort by key (position) if not already\n        if (!$this->_positionToTargetSorted)\n        {\n            ksort($this->_positionToTarget, SORT_REGULAR);\n            $this->_positionToTargetSorted = true;\n        }\n    }\n\n}\n\n\n/**\n * Hashes given values into a sortable fixed size address space.\n *\n * @author Paul Annesley\n * @package Flexihash\n * @licence http://www.opensource.org/licenses/mit-license.php\n */\ninterface Flexihash_Hasher\n{\n\n    /**\n     * Hashes the given string into a 32bit address space.\n     *\n     * Note that the output may be more than 32bits of raw data, for example\n     * hexidecimal characters representing a 32bit value.\n     *\n     * The data must have 0xFFFFFFFF possible values, and be sortable by\n     * PHP sort functions using SORT_REGULAR.\n     *\n     * @param string\n     * @return mixed A sortable format with 0xFFFFFFFF possible values\n     */\n    public function hash($string);\n\n}\n\n\n/**\n * Uses CRC32 to hash a value into a signed 32bit int address space.\n * Under 32bit PHP this (safely) overflows into negatives ints.\n *\n * @author Paul Annesley\n * @package Flexihash\n * @licence http://www.opensource.org/licenses/mit-license.php\n */\nclass Flexihash_Crc32Hasher\n    implements Flexihash_Hasher\n{\n\n    /* (non-phpdoc)\n     * @see Flexihash_Hasher::hash()\n     */\n    public function hash($string)\n    {\n        return crc32($string);\n    }\n\n}\n\n\n/**\n * Uses CRC32 to hash a value into a 32bit binary string data address space.\n *\n * @author Paul Annesley\n * @package Flexihash\n * @licence http://www.opensource.org/licenses/mit-license.php\n */\nclass Flexihash_Md5Hasher\n    implements Flexihash_Hasher\n{\n\n    /* (non-phpdoc)\n     * @see Flexihash_Hasher::hash()\n     */\n    public function hash($string)\n    {\n        return substr(md5($string), 0, 8); // 8 hexits = 32bit\n\n        // 4 bytes of binary md5 data could also be used, but\n        // performance seems to be the same.\n    }\n\n}\n\n\n/**\n * An exception thrown by Flexihash.\n *\n * @author Paul Annesley\n * @package Flexihash\n * @licence http://www.opensource.org/licenses/mit-license.php\n */\nclass Flexihash_Exception extends Exception\n{\n}\n```\n","source":"_posts/一致性hash算法.md","raw":"---\nuuid: 8d19f870-30db-11e7-9203-0199550ca1d8\ntitle: 一致性hash算法\ndate: 2017-05-04 23:08:38\ntags:\n---\n\n参考 [Consistent hashing](https://www.codeproject.com/Articles/56138/Consistent-hashing)\n\n<!--more-->\n```php\n<?php\n/**\n * Flexihash - A simple consistent hashing implementation for PHP.\n * The MIT License\n */\nclass flexihash\n{\n\n    /**\n     * The number of positions to hash each target to.\n     *\n     * @var int\n     * @comment 虚拟节点数,解决节点分布不均的问题\n     */\n    private $_replicas = 64;\n\n    /**\n     * The hash algorithm, encapsulated in a Flexihash_Hasher implementation.\n     * @var object Flexihash_Hasher\n     * @comment 使用的hash方法 : md5,crc32\n     */\n    private $_hasher;\n\n    /**\n     * Internal counter for current number of targets.\n     * @var int\n     * @comment 节点记数器\n     */\n    private $_targetCount = 0;\n\n    /**\n     * Internal map of positions (hash outputs) to targets\n     * @var array { position => target, ... }\n     * @comment 位置对应节点,用于lookup中根据位置确定要访问的节点\n     */\n    private $_positionToTarget = array();\n\n    /**\n     * Internal map of targets to lists of positions that target is hashed to.\n     * @var array { target => [ position, position, ... ], ... }\n     * @comment 节点对应位置,用于删除节点\n     */\n    private $_targetToPositions = array();\n\n    /**\n     * Whether the internal map of positions to targets is already sorted.\n     * @var boolean\n     * @comment 是否已排序\n     */\n    private $_positionToTargetSorted = false;\n\n    /**\n     * Constructor\n     * @param object $hasher Flexihash_Hasher\n     * @param int $replicas Amount of positions to hash each target to.\n     * @comment 构造函数,确定要使用的hash方法和需拟节点数,虚拟节点数越多,分布越均匀,但程序的分布式运算越慢\n     */\n    public function __construct(Flexihash_Hasher $hasher = null, $replicas = null)\n    {\n        $this->_hasher = $hasher ? $hasher : new Flexihash_Crc32Hasher();\n        if (!empty($replicas)) $this->_replicas = $replicas;\n    }\n\n    /**\n     * Add a target.\n     * @param string $target\n     * @chainable\n     * @comment 添加节点,根据虚拟节点数,将节点分布到多个虚拟位置上\n     */\n    public function addTarget($target)\n    {\n        if (isset($this->_targetToPositions[$target]))\n        {\n            throw new Flexihash_Exception(\"Target '$target' already exists.\");\n        }\n\n        $this->_targetToPositions[$target] = array();\n\n        // hash the target into multiple positions\n        for ($i = 0; $i < $this->_replicas; $i++)\n        {\n            $position = $this->_hasher->hash($target . $i);\n            $this->_positionToTarget[$position] = $target; // lookup\n            $this->_targetToPositions[$target] []= $position; // target removal\n        }\n\n        $this->_positionToTargetSorted = false;\n        $this->_targetCount++;\n\n        return $this;\n    }\n\n    /**\n     * Add a list of targets.\n     * @param array $targets\n     * @chainable\n     */\n    public function addTargets($targets)\n    {\n        foreach ($targets as $target)\n        {\n            $this->addTarget($target);\n        }\n\n        return $this;\n    }\n\n    /**\n     * Remove a target.\n     * @param string $target\n     * @chainable\n     */\n    public function removeTarget($target)\n    {\n        if (!isset($this->_targetToPositions[$target]))\n        {\n            throw new Flexihash_Exception(\"Target '$target' does not exist.\");\n        }\n\n        foreach ($this->_targetToPositions[$target] as $position)\n        {\n            unset($this->_positionToTarget[$position]);\n        }\n\n        unset($this->_targetToPositions[$target]);\n\n        $this->_targetCount--;\n\n        return $this;\n    }\n\n    /**\n     * A list of all potential targets\n     * @return array\n     */\n    public function getAllTargets()\n    {\n        return array_keys($this->_targetToPositions);\n    }\n\n    /**\n     * Looks up the target for the given resource.\n     * @param string $resource\n     * @return string\n     */\n    public function lookup($resource)\n    {\n        $targets = $this->lookupList($resource, 1);\n        if (empty($targets)) throw new Flexihash_Exception('No targets exist');\n        return $targets[0];\n    }\n\n    /**\n     * Get a list of targets for the resource, in order of precedence.\n     * Up to $requestedCount targets are returned, less if there are fewer in total.\n     *\n     * @param string $resource\n     * @param int $requestedCount The length of the list to return\n     * @return array List of targets\n     * @comment 查找当前的资源对应的节点,\n     *          节点为空则返回空,节点只有一个则返回该节点,\n     *          对当前资源进行hash,对所有的位置进行排序,在有序的位置列上寻找当前资源的位置\n     *          当全部没有找到的时候,将资源的位置确定为有序位置的第一个(形成一个环)\n     *          返回所找到的节点\n     */\n    public function lookupList($resource, $requestedCount)\n    {\n        if (!$requestedCount)\n            throw new Flexihash_Exception('Invalid count requested');\n\n        // handle no targets\n        if (empty($this->_positionToTarget))\n            return array();\n\n        // optimize single target\n        if ($this->_targetCount == 1)\n            return array_unique(array_values($this->_positionToTarget));\n\n        // hash resource to a position\n        $resourcePosition = $this->_hasher->hash($resource);\n\n        $results = array();\n        $collect = false;\n\n        $this->_sortPositionTargets();\n\n        // search values above the resourcePosition\n        foreach ($this->_positionToTarget as $key => $value)\n        {\n            // start collecting targets after passing resource position\n            if (!$collect && $key > $resourcePosition)\n            {\n                $collect = true;\n            }\n\n            // only collect the first instance of any target\n            if ($collect && !in_array($value, $results))\n            {\n                $results []= $value;\n            }\n\n            // return when enough results, or list exhausted\n            if (count($results) == $requestedCount || count($results) == $this->_targetCount)\n            {\n                return $results;\n            }\n        }\n\n        // loop to start - search values below the resourcePosition\n        foreach ($this->_positionToTarget as $key => $value)\n        {\n            if (!in_array($value, $results))\n            {\n                $results []= $value;\n            }\n\n            // return when enough results, or list exhausted\n            if (count($results) == $requestedCount || count($results) == $this->_targetCount)\n            {\n                return $results;\n            }\n        }\n\n        // return results after iterating through both \"parts\"\n        return $results;\n    }\n\n    public function __toString()\n    {\n        return sprintf(\n            '%s{targets:[%s]}',\n            get_class($this),\n            implode(',', $this->getAllTargets())\n        );\n    }\n\n    // ----------------------------------------\n    // private methods\n\n    /**\n     * Sorts the internal mapping (positions to targets) by position\n     */\n    private function _sortPositionTargets()\n    {\n        // sort by key (position) if not already\n        if (!$this->_positionToTargetSorted)\n        {\n            ksort($this->_positionToTarget, SORT_REGULAR);\n            $this->_positionToTargetSorted = true;\n        }\n    }\n\n}\n\n\n/**\n * Hashes given values into a sortable fixed size address space.\n *\n * @author Paul Annesley\n * @package Flexihash\n * @licence http://www.opensource.org/licenses/mit-license.php\n */\ninterface Flexihash_Hasher\n{\n\n    /**\n     * Hashes the given string into a 32bit address space.\n     *\n     * Note that the output may be more than 32bits of raw data, for example\n     * hexidecimal characters representing a 32bit value.\n     *\n     * The data must have 0xFFFFFFFF possible values, and be sortable by\n     * PHP sort functions using SORT_REGULAR.\n     *\n     * @param string\n     * @return mixed A sortable format with 0xFFFFFFFF possible values\n     */\n    public function hash($string);\n\n}\n\n\n/**\n * Uses CRC32 to hash a value into a signed 32bit int address space.\n * Under 32bit PHP this (safely) overflows into negatives ints.\n *\n * @author Paul Annesley\n * @package Flexihash\n * @licence http://www.opensource.org/licenses/mit-license.php\n */\nclass Flexihash_Crc32Hasher\n    implements Flexihash_Hasher\n{\n\n    /* (non-phpdoc)\n     * @see Flexihash_Hasher::hash()\n     */\n    public function hash($string)\n    {\n        return crc32($string);\n    }\n\n}\n\n\n/**\n * Uses CRC32 to hash a value into a 32bit binary string data address space.\n *\n * @author Paul Annesley\n * @package Flexihash\n * @licence http://www.opensource.org/licenses/mit-license.php\n */\nclass Flexihash_Md5Hasher\n    implements Flexihash_Hasher\n{\n\n    /* (non-phpdoc)\n     * @see Flexihash_Hasher::hash()\n     */\n    public function hash($string)\n    {\n        return substr(md5($string), 0, 8); // 8 hexits = 32bit\n\n        // 4 bytes of binary md5 data could also be used, but\n        // performance seems to be the same.\n    }\n\n}\n\n\n/**\n * An exception thrown by Flexihash.\n *\n * @author Paul Annesley\n * @package Flexihash\n * @licence http://www.opensource.org/licenses/mit-license.php\n */\nclass Flexihash_Exception extends Exception\n{\n}\n```\n","slug":"一致性hash算法","published":1,"updated":"2017-08-15T02:57:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9en001t91wqbwo3xmyu","content":"<p>参考 <a href=\"https://www.codeproject.com/Articles/56138/Consistent-hashing\" target=\"_blank\" rel=\"external\">Consistent hashing</a></p>\n<a id=\"more\"></a>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Flexihash - A simple consistent hashing implementation for PHP.</span></div><div class=\"line\"><span class=\"comment\"> * The MIT License</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">flexihash</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * The number of positions to hash each target to.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> int</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@comment</span> 虚拟节点数,解决节点分布不均的问题</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $_replicas = <span class=\"number\">64</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * The hash algorithm, encapsulated in a Flexihash_Hasher implementation.</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> object Flexihash_Hasher</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@comment</span> 使用的hash方法 : md5,crc32</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $_hasher;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Internal counter for current number of targets.</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> int</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@comment</span> 节点记数器</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $_targetCount = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Internal map of positions (hash outputs) to targets</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array &#123; position =&gt; target, ... &#125;</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@comment</span> 位置对应节点,用于lookup中根据位置确定要访问的节点</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $_positionToTarget = <span class=\"keyword\">array</span>();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Internal map of targets to lists of positions that target is hashed to.</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array &#123; target =&gt; [ position, position, ... ], ... &#125;</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@comment</span> 节点对应位置,用于删除节点</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $_targetToPositions = <span class=\"keyword\">array</span>();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Whether the internal map of positions to targets is already sorted.</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> boolean</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@comment</span> 是否已排序</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $_positionToTargetSorted = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Constructor</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object $hasher Flexihash_Hasher</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $replicas Amount of positions to hash each target to.</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@comment</span> 构造函数,确定要使用的hash方法和需拟节点数,虚拟节点数越多,分布越均匀,但程序的分布式运算越慢</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(Flexihash_Hasher $hasher = null, $replicas = null)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_hasher = $hasher ? $hasher : <span class=\"keyword\">new</span> Flexihash_Crc32Hasher();</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>($replicas)) <span class=\"keyword\">$this</span>-&gt;_replicas = $replicas;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Add a target.</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $target</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@chainable</span></span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@comment</span> 添加节点,根据虚拟节点数,将节点分布到多个虚拟位置上</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTarget</span><span class=\"params\">($target)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;_targetToPositions[$target]))</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Flexihash_Exception(<span class=\"string\">\"Target '$target' already exists.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_targetToPositions[$target] = <span class=\"keyword\">array</span>();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// hash the target into multiple positions</span></div><div class=\"line\">        <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; <span class=\"keyword\">$this</span>-&gt;_replicas; $i++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            $position = <span class=\"keyword\">$this</span>-&gt;_hasher-&gt;hash($target . $i);</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_positionToTarget[$position] = $target; <span class=\"comment\">// lookup</span></div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_targetToPositions[$target] []= $position; <span class=\"comment\">// target removal</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_positionToTargetSorted = <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_targetCount++;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Add a list of targets.</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array $targets</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@chainable</span></span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTargets</span><span class=\"params\">($targets)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> ($targets <span class=\"keyword\">as</span> $target)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;addTarget($target);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Remove a target.</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $target</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@chainable</span></span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeTarget</span><span class=\"params\">($target)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;_targetToPositions[$target]))</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Flexihash_Exception(<span class=\"string\">\"Target '$target' does not exist.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_targetToPositions[$target] <span class=\"keyword\">as</span> $position)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;_positionToTarget[$position]);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;_targetToPositions[$target]);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_targetCount--;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * A list of all potential targets</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> array</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAllTargets</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> array_keys(<span class=\"keyword\">$this</span>-&gt;_targetToPositions);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Looks up the target for the given resource.</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $resource</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> string</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lookup</span><span class=\"params\">($resource)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        $targets = <span class=\"keyword\">$this</span>-&gt;lookupList($resource, <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($targets)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Flexihash_Exception(<span class=\"string\">'No targets exist'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> $targets[<span class=\"number\">0</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Get a list of targets for the resource, in order of precedence.</span></div><div class=\"line\"><span class=\"comment\">     * Up to $requestedCount targets are returned, less if there are fewer in total.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $resource</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $requestedCount The length of the list to return</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> array List of targets</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@comment</span> 查找当前的资源对应的节点,</span></div><div class=\"line\"><span class=\"comment\">     *          节点为空则返回空,节点只有一个则返回该节点,</span></div><div class=\"line\"><span class=\"comment\">     *          对当前资源进行hash,对所有的位置进行排序,在有序的位置列上寻找当前资源的位置</span></div><div class=\"line\"><span class=\"comment\">     *          当全部没有找到的时候,将资源的位置确定为有序位置的第一个(形成一个环)</span></div><div class=\"line\"><span class=\"comment\">     *          返回所找到的节点</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lookupList</span><span class=\"params\">($resource, $requestedCount)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!$requestedCount)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Flexihash_Exception(<span class=\"string\">'Invalid count requested'</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// handle no targets</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>(<span class=\"keyword\">$this</span>-&gt;_positionToTarget))</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// optimize single target</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;_targetCount == <span class=\"number\">1</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> array_unique(array_values(<span class=\"keyword\">$this</span>-&gt;_positionToTarget));</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// hash resource to a position</span></div><div class=\"line\">        $resourcePosition = <span class=\"keyword\">$this</span>-&gt;_hasher-&gt;hash($resource);</div><div class=\"line\"></div><div class=\"line\">        $results = <span class=\"keyword\">array</span>();</div><div class=\"line\">        $collect = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_sortPositionTargets();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// search values above the resourcePosition</span></div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_positionToTarget <span class=\"keyword\">as</span> $key =&gt; $value)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"comment\">// start collecting targets after passing resource position</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (!$collect &amp;&amp; $key &gt; $resourcePosition)</div><div class=\"line\">            &#123;</div><div class=\"line\">                $collect = <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// only collect the first instance of any target</span></div><div class=\"line\">            <span class=\"keyword\">if</span> ($collect &amp;&amp; !in_array($value, $results))</div><div class=\"line\">            &#123;</div><div class=\"line\">                $results []= $value;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// return when enough results, or list exhausted</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (count($results) == $requestedCount || count($results) == <span class=\"keyword\">$this</span>-&gt;_targetCount)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> $results;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// loop to start - search values below the resourcePosition</span></div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_positionToTarget <span class=\"keyword\">as</span> $key =&gt; $value)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!in_array($value, $results))</div><div class=\"line\">            &#123;</div><div class=\"line\">                $results []= $value;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// return when enough results, or list exhausted</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (count($results) == $requestedCount || count($results) == <span class=\"keyword\">$this</span>-&gt;_targetCount)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> $results;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// return results after iterating through both \"parts\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> $results;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__toString</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sprintf(</div><div class=\"line\">            <span class=\"string\">'%s&#123;targets:[%s]&#125;'</span>,</div><div class=\"line\">            get_class(<span class=\"keyword\">$this</span>),</div><div class=\"line\">            implode(<span class=\"string\">','</span>, <span class=\"keyword\">$this</span>-&gt;getAllTargets())</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// ----------------------------------------</span></div><div class=\"line\">    <span class=\"comment\">// private methods</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Sorts the internal mapping (positions to targets) by position</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_sortPositionTargets</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// sort by key (position) if not already</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">$this</span>-&gt;_positionToTargetSorted)</div><div class=\"line\">        &#123;</div><div class=\"line\">            ksort(<span class=\"keyword\">$this</span>-&gt;_positionToTarget, SORT_REGULAR);</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_positionToTargetSorted = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Hashes given values into a sortable fixed size address space.</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Paul Annesley</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@package</span> Flexihash</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@licence</span> http://www.opensource.org/licenses/mit-license.php</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Flexihash_Hasher</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Hashes the given string into a 32bit address space.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * Note that the output may be more than 32bits of raw data, for example</span></div><div class=\"line\"><span class=\"comment\">     * hexidecimal characters representing a 32bit value.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * The data must have 0xFFFFFFFF possible values, and be sortable by</span></div><div class=\"line\"><span class=\"comment\">     * PHP sort functions using SORT_REGULAR.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed A sortable format with 0xFFFFFFFF possible values</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hash</span><span class=\"params\">($string)</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Uses CRC32 to hash a value into a signed 32bit int address space.</span></div><div class=\"line\"><span class=\"comment\"> * Under 32bit PHP this (safely) overflows into negatives ints.</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Paul Annesley</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@package</span> Flexihash</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@licence</span> http://www.opensource.org/licenses/mit-license.php</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flexihash_Crc32Hasher</span></span></div><div class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">Flexihash_Hasher</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* (non-phpdoc)</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> Flexihash_Hasher::hash()</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hash</span><span class=\"params\">($string)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> crc32($string);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Uses CRC32 to hash a value into a 32bit binary string data address space.</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Paul Annesley</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@package</span> Flexihash</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@licence</span> http://www.opensource.org/licenses/mit-license.php</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flexihash_Md5Hasher</span></span></div><div class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">Flexihash_Hasher</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* (non-phpdoc)</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> Flexihash_Hasher::hash()</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hash</span><span class=\"params\">($string)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> substr(md5($string), <span class=\"number\">0</span>, <span class=\"number\">8</span>); <span class=\"comment\">// 8 hexits = 32bit</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 4 bytes of binary md5 data could also be used, but</span></div><div class=\"line\">        <span class=\"comment\">// performance seems to be the same.</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * An exception thrown by Flexihash.</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Paul Annesley</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@package</span> Flexihash</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@licence</span> http://www.opensource.org/licenses/mit-license.php</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flexihash_Exception</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>参考 <a href=\"https://www.codeproject.com/Articles/56138/Consistent-hashing\" target=\"_blank\" rel=\"external\">Consistent hashing</a></p>","more":"<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Flexihash - A simple consistent hashing implementation for PHP.</span></div><div class=\"line\"><span class=\"comment\"> * The MIT License</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">flexihash</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * The number of positions to hash each target to.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> int</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@comment</span> 虚拟节点数,解决节点分布不均的问题</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $_replicas = <span class=\"number\">64</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * The hash algorithm, encapsulated in a Flexihash_Hasher implementation.</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> object Flexihash_Hasher</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@comment</span> 使用的hash方法 : md5,crc32</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $_hasher;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Internal counter for current number of targets.</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> int</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@comment</span> 节点记数器</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $_targetCount = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Internal map of positions (hash outputs) to targets</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array &#123; position =&gt; target, ... &#125;</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@comment</span> 位置对应节点,用于lookup中根据位置确定要访问的节点</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $_positionToTarget = <span class=\"keyword\">array</span>();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Internal map of targets to lists of positions that target is hashed to.</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array &#123; target =&gt; [ position, position, ... ], ... &#125;</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@comment</span> 节点对应位置,用于删除节点</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $_targetToPositions = <span class=\"keyword\">array</span>();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Whether the internal map of positions to targets is already sorted.</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> boolean</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@comment</span> 是否已排序</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $_positionToTargetSorted = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Constructor</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object $hasher Flexihash_Hasher</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $replicas Amount of positions to hash each target to.</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@comment</span> 构造函数,确定要使用的hash方法和需拟节点数,虚拟节点数越多,分布越均匀,但程序的分布式运算越慢</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(Flexihash_Hasher $hasher = null, $replicas = null)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_hasher = $hasher ? $hasher : <span class=\"keyword\">new</span> Flexihash_Crc32Hasher();</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>($replicas)) <span class=\"keyword\">$this</span>-&gt;_replicas = $replicas;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Add a target.</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $target</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@chainable</span></span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@comment</span> 添加节点,根据虚拟节点数,将节点分布到多个虚拟位置上</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTarget</span><span class=\"params\">($target)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;_targetToPositions[$target]))</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Flexihash_Exception(<span class=\"string\">\"Target '$target' already exists.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_targetToPositions[$target] = <span class=\"keyword\">array</span>();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// hash the target into multiple positions</span></div><div class=\"line\">        <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; <span class=\"keyword\">$this</span>-&gt;_replicas; $i++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            $position = <span class=\"keyword\">$this</span>-&gt;_hasher-&gt;hash($target . $i);</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_positionToTarget[$position] = $target; <span class=\"comment\">// lookup</span></div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_targetToPositions[$target] []= $position; <span class=\"comment\">// target removal</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_positionToTargetSorted = <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_targetCount++;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Add a list of targets.</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array $targets</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@chainable</span></span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTargets</span><span class=\"params\">($targets)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> ($targets <span class=\"keyword\">as</span> $target)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;addTarget($target);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Remove a target.</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $target</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@chainable</span></span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeTarget</span><span class=\"params\">($target)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;_targetToPositions[$target]))</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Flexihash_Exception(<span class=\"string\">\"Target '$target' does not exist.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_targetToPositions[$target] <span class=\"keyword\">as</span> $position)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;_positionToTarget[$position]);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;_targetToPositions[$target]);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_targetCount--;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * A list of all potential targets</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> array</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAllTargets</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> array_keys(<span class=\"keyword\">$this</span>-&gt;_targetToPositions);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Looks up the target for the given resource.</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $resource</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> string</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lookup</span><span class=\"params\">($resource)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        $targets = <span class=\"keyword\">$this</span>-&gt;lookupList($resource, <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($targets)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Flexihash_Exception(<span class=\"string\">'No targets exist'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> $targets[<span class=\"number\">0</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Get a list of targets for the resource, in order of precedence.</span></div><div class=\"line\"><span class=\"comment\">     * Up to $requestedCount targets are returned, less if there are fewer in total.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $resource</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $requestedCount The length of the list to return</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> array List of targets</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@comment</span> 查找当前的资源对应的节点,</span></div><div class=\"line\"><span class=\"comment\">     *          节点为空则返回空,节点只有一个则返回该节点,</span></div><div class=\"line\"><span class=\"comment\">     *          对当前资源进行hash,对所有的位置进行排序,在有序的位置列上寻找当前资源的位置</span></div><div class=\"line\"><span class=\"comment\">     *          当全部没有找到的时候,将资源的位置确定为有序位置的第一个(形成一个环)</span></div><div class=\"line\"><span class=\"comment\">     *          返回所找到的节点</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lookupList</span><span class=\"params\">($resource, $requestedCount)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!$requestedCount)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Flexihash_Exception(<span class=\"string\">'Invalid count requested'</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// handle no targets</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>(<span class=\"keyword\">$this</span>-&gt;_positionToTarget))</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// optimize single target</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;_targetCount == <span class=\"number\">1</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> array_unique(array_values(<span class=\"keyword\">$this</span>-&gt;_positionToTarget));</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// hash resource to a position</span></div><div class=\"line\">        $resourcePosition = <span class=\"keyword\">$this</span>-&gt;_hasher-&gt;hash($resource);</div><div class=\"line\"></div><div class=\"line\">        $results = <span class=\"keyword\">array</span>();</div><div class=\"line\">        $collect = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_sortPositionTargets();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// search values above the resourcePosition</span></div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_positionToTarget <span class=\"keyword\">as</span> $key =&gt; $value)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"comment\">// start collecting targets after passing resource position</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (!$collect &amp;&amp; $key &gt; $resourcePosition)</div><div class=\"line\">            &#123;</div><div class=\"line\">                $collect = <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// only collect the first instance of any target</span></div><div class=\"line\">            <span class=\"keyword\">if</span> ($collect &amp;&amp; !in_array($value, $results))</div><div class=\"line\">            &#123;</div><div class=\"line\">                $results []= $value;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// return when enough results, or list exhausted</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (count($results) == $requestedCount || count($results) == <span class=\"keyword\">$this</span>-&gt;_targetCount)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> $results;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// loop to start - search values below the resourcePosition</span></div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_positionToTarget <span class=\"keyword\">as</span> $key =&gt; $value)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!in_array($value, $results))</div><div class=\"line\">            &#123;</div><div class=\"line\">                $results []= $value;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// return when enough results, or list exhausted</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (count($results) == $requestedCount || count($results) == <span class=\"keyword\">$this</span>-&gt;_targetCount)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> $results;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// return results after iterating through both \"parts\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> $results;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__toString</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sprintf(</div><div class=\"line\">            <span class=\"string\">'%s&#123;targets:[%s]&#125;'</span>,</div><div class=\"line\">            get_class(<span class=\"keyword\">$this</span>),</div><div class=\"line\">            implode(<span class=\"string\">','</span>, <span class=\"keyword\">$this</span>-&gt;getAllTargets())</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// ----------------------------------------</span></div><div class=\"line\">    <span class=\"comment\">// private methods</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Sorts the internal mapping (positions to targets) by position</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_sortPositionTargets</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// sort by key (position) if not already</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">$this</span>-&gt;_positionToTargetSorted)</div><div class=\"line\">        &#123;</div><div class=\"line\">            ksort(<span class=\"keyword\">$this</span>-&gt;_positionToTarget, SORT_REGULAR);</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_positionToTargetSorted = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Hashes given values into a sortable fixed size address space.</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Paul Annesley</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@package</span> Flexihash</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@licence</span> http://www.opensource.org/licenses/mit-license.php</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Flexihash_Hasher</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Hashes the given string into a 32bit address space.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * Note that the output may be more than 32bits of raw data, for example</span></div><div class=\"line\"><span class=\"comment\">     * hexidecimal characters representing a 32bit value.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * The data must have 0xFFFFFFFF possible values, and be sortable by</span></div><div class=\"line\"><span class=\"comment\">     * PHP sort functions using SORT_REGULAR.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed A sortable format with 0xFFFFFFFF possible values</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hash</span><span class=\"params\">($string)</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Uses CRC32 to hash a value into a signed 32bit int address space.</span></div><div class=\"line\"><span class=\"comment\"> * Under 32bit PHP this (safely) overflows into negatives ints.</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Paul Annesley</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@package</span> Flexihash</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@licence</span> http://www.opensource.org/licenses/mit-license.php</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flexihash_Crc32Hasher</span></span></div><div class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">Flexihash_Hasher</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* (non-phpdoc)</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> Flexihash_Hasher::hash()</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hash</span><span class=\"params\">($string)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> crc32($string);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Uses CRC32 to hash a value into a 32bit binary string data address space.</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Paul Annesley</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@package</span> Flexihash</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@licence</span> http://www.opensource.org/licenses/mit-license.php</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flexihash_Md5Hasher</span></span></div><div class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">Flexihash_Hasher</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* (non-phpdoc)</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> Flexihash_Hasher::hash()</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hash</span><span class=\"params\">($string)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> substr(md5($string), <span class=\"number\">0</span>, <span class=\"number\">8</span>); <span class=\"comment\">// 8 hexits = 32bit</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 4 bytes of binary md5 data could also be used, but</span></div><div class=\"line\">        <span class=\"comment\">// performance seems to be the same.</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * An exception thrown by Flexihash.</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Paul Annesley</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@package</span> Flexihash</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@licence</span> http://www.opensource.org/licenses/mit-license.php</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flexihash_Exception</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"uuid":"c92488f0-3a57-11e7-992d-39f574d553c7","title":"策略模式","date":"2017-05-16T16:50:36.000Z","_content":"\n简单实现\n\n```php\n\ninterface Strategy\n{\n    public function doOperation($num1, $num2 );\n}\n\nclass OperationAdd implements Strategy\n{\n    public function doOperation($num1, $num2)\n    {\n        return $num1 + $num2;\n    }\n}\n\nclass OperationSubstract implements Strategy\n{\n    function doOperation( $num1 , $num2 )\n    {\n        return $num1 - $num2;\n    }\n}\n\nclass OperationMultiply implements Strategy\n{\n        public function doOperation( $num1 , $num2 )\n        {\n                return $num1 * $num2;\n        }\n}\n\nclass Context\n{\n   private $strategy;\n\n   public function __construct($strategy){\n       $this->strategy = $strategy;\n   }\n\n   public function executeStrategy($num1, $num2){\n      return $this->strategy->doOperation($num1, $num2);\n   }\n}\n\n$context = new Context(new OperationAdd());\necho (\"10 + 5 = \" . $context->executeStrategy(10, 5));\necho PHP_EOL;\n\n$context = new Context(new OperationSubstract());\necho (\"10 - 5 = \" . $context->executeStrategy(10, 5));\necho PHP_EOL;\n\n$context = new Context(new OperationMultiply());\necho (\"10 * 5 = \" . $context->executeStrategy(10, 5));\necho PHP_EOL;\n\n```\n","source":"_posts/策略模式.md","raw":"---\nuuid: c92488f0-3a57-11e7-992d-39f574d553c7\ntitle: 策略模式\ndate: 2017-05-17 00:50:36\ntags: Design pattern\n---\n\n简单实现\n\n```php\n\ninterface Strategy\n{\n    public function doOperation($num1, $num2 );\n}\n\nclass OperationAdd implements Strategy\n{\n    public function doOperation($num1, $num2)\n    {\n        return $num1 + $num2;\n    }\n}\n\nclass OperationSubstract implements Strategy\n{\n    function doOperation( $num1 , $num2 )\n    {\n        return $num1 - $num2;\n    }\n}\n\nclass OperationMultiply implements Strategy\n{\n        public function doOperation( $num1 , $num2 )\n        {\n                return $num1 * $num2;\n        }\n}\n\nclass Context\n{\n   private $strategy;\n\n   public function __construct($strategy){\n       $this->strategy = $strategy;\n   }\n\n   public function executeStrategy($num1, $num2){\n      return $this->strategy->doOperation($num1, $num2);\n   }\n}\n\n$context = new Context(new OperationAdd());\necho (\"10 + 5 = \" . $context->executeStrategy(10, 5));\necho PHP_EOL;\n\n$context = new Context(new OperationSubstract());\necho (\"10 - 5 = \" . $context->executeStrategy(10, 5));\necho PHP_EOL;\n\n$context = new Context(new OperationMultiply());\necho (\"10 * 5 = \" . $context->executeStrategy(10, 5));\necho PHP_EOL;\n\n```\n","slug":"策略模式","published":1,"updated":"2017-08-15T02:57:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9eq001v91wqto0w7mq0","content":"<p>简单实现</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Strategy</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doOperation</span><span class=\"params\">($num1, $num2 )</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OperationAdd</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doOperation</span><span class=\"params\">($num1, $num2)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> $num1 + $num2;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OperationSubstract</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doOperation</span><span class=\"params\">( $num1 , $num2 )</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> $num1 - $num2;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OperationMultiply</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doOperation</span><span class=\"params\">( $num1 , $num2 )</span></span></div><div class=\"line\"><span class=\"function\">        </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> $num1 * $num2;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">   <span class=\"keyword\">private</span> $strategy;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($strategy)</span></span>&#123;</div><div class=\"line\">       <span class=\"keyword\">$this</span>-&gt;strategy = $strategy;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executeStrategy</span><span class=\"params\">($num1, $num2)</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;strategy-&gt;doOperation($num1, $num2);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> OperationAdd());</div><div class=\"line\"><span class=\"keyword\">echo</span> (<span class=\"string\">\"10 + 5 = \"</span> . $context-&gt;executeStrategy(<span class=\"number\">10</span>, <span class=\"number\">5</span>));</div><div class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</div><div class=\"line\"></div><div class=\"line\">$context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> OperationSubstract());</div><div class=\"line\"><span class=\"keyword\">echo</span> (<span class=\"string\">\"10 - 5 = \"</span> . $context-&gt;executeStrategy(<span class=\"number\">10</span>, <span class=\"number\">5</span>));</div><div class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</div><div class=\"line\"></div><div class=\"line\">$context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> OperationMultiply());</div><div class=\"line\"><span class=\"keyword\">echo</span> (<span class=\"string\">\"10 * 5 = \"</span> . $context-&gt;executeStrategy(<span class=\"number\">10</span>, <span class=\"number\">5</span>));</div><div class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>简单实现</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Strategy</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doOperation</span><span class=\"params\">($num1, $num2 )</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OperationAdd</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doOperation</span><span class=\"params\">($num1, $num2)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> $num1 + $num2;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OperationSubstract</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doOperation</span><span class=\"params\">( $num1 , $num2 )</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> $num1 - $num2;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OperationMultiply</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doOperation</span><span class=\"params\">( $num1 , $num2 )</span></span></div><div class=\"line\"><span class=\"function\">        </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> $num1 * $num2;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">   <span class=\"keyword\">private</span> $strategy;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($strategy)</span></span>&#123;</div><div class=\"line\">       <span class=\"keyword\">$this</span>-&gt;strategy = $strategy;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executeStrategy</span><span class=\"params\">($num1, $num2)</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;strategy-&gt;doOperation($num1, $num2);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> OperationAdd());</div><div class=\"line\"><span class=\"keyword\">echo</span> (<span class=\"string\">\"10 + 5 = \"</span> . $context-&gt;executeStrategy(<span class=\"number\">10</span>, <span class=\"number\">5</span>));</div><div class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</div><div class=\"line\"></div><div class=\"line\">$context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> OperationSubstract());</div><div class=\"line\"><span class=\"keyword\">echo</span> (<span class=\"string\">\"10 - 5 = \"</span> . $context-&gt;executeStrategy(<span class=\"number\">10</span>, <span class=\"number\">5</span>));</div><div class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</div><div class=\"line\"></div><div class=\"line\">$context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> OperationMultiply());</div><div class=\"line\"><span class=\"keyword\">echo</span> (<span class=\"string\">\"10 * 5 = \"</span> . $context-&gt;executeStrategy(<span class=\"number\">10</span>, <span class=\"number\">5</span>));</div><div class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</div></pre></td></tr></table></figure>\n"},{"title":"推荐系统实战-读书笔记","date":"2018-03-21T02:14:27.000Z","_content":"\n## 背景\n\n信息消费者,如何从大量信息中找到自己感兴趣的信息是一件非常困难的事情;作为信息生产者, 如何让自己生产的信息脱颖而出,受到广大用户的关注,也是一件非常困难的事情。推荐系统就 是解决这一矛盾的重要工具。推荐系统的任务就是联系用户和信息,一方面帮助用户发现对自己 有价值的信息,另一方面让信息能够展现在对它感兴趣的用户面前,从而实现信息消费者和信息 生产者的双赢。\n\n<!--more-->\n\n随着互联网规模的不断扩大,分类目录网站也只能覆盖少量的热门网 站,越来越不能满足用户的需求。因此,搜索引擎诞生了。以谷歌为代表的搜索引擎可以让用户 通过搜索关键词找到自己需要的信息。但是,搜索引擎需要用户主动提供准确的关键词来寻找信 息,因此不能解决用户的很多其他需求,比如**当用户无法找到准确描述自己需求的关键词时**,搜 索引擎就无能为力了。和搜索引擎一样,推荐系统也是一种帮助用户快速发现有用信息的工具。 和搜索引擎不同的是,推荐系统不需要用户提供明确的需求,而是通过分析用户的历史行为给用 户的兴趣建模,从而主动给用户推荐能够满足他们兴趣和需求的信息。因此,从某种意义上说, 推荐系统和搜索引擎对于用户来说是两个互补的工具。搜索引擎满足了用户有明确目的时的主动 查找需求,而推荐系统能够在用户没有明确目的的时候帮助他们发现感兴趣的新内容。\n\n## 问题\n\n从物品的角度出发，推荐系统可以更好地发掘物品的长尾（long tail）。美国《连线》杂志主编Chris Anderson在2004年发表了“The Long Tail”（长尾）一文并于2006年出版了《长尾理论》一书。该书指出，**传统的80/20原则（80%的销售额来自于20%的热门品牌）在互联网的加入下会受到挑战**。互联网条件下，由于货架成本极端低廉，电子商务网站往往能出售比传统零售店更多的商品。虽然这些商品绝大多数都不热门，但与传统零售业相比，这些不热门的商品数量极其庞大，因此这些长尾商品的总销售额将是一个不可小觑的数字，也许会超过热门商品（即主流商品）带来的销售额。**主流商品往往代表了绝大多数用户的需求，而长尾商品往往代表了一小部分用户的个性化需求。**因此，**如果要通过发掘长尾提高销售额，就必须充分研究用户的兴趣，而这正是个性化推荐系统主要解决的问题**。推荐系统通过发掘用户的行为，找到用户的个性化需求，从而将长尾商品准确地推荐给需要它的用户，帮助用户发现那些他们感兴趣但很难发现的商品。\n\n\n\n## 技术栈\n","source":"_posts/推荐系统实战-读书笔记.md","raw":"---\ntitle: 推荐系统实战-读书笔记\ndate: 2018-03-21 10:14:27\ntags: 推荐系统\ncategories: 读书笔记\n---\n\n## 背景\n\n信息消费者,如何从大量信息中找到自己感兴趣的信息是一件非常困难的事情;作为信息生产者, 如何让自己生产的信息脱颖而出,受到广大用户的关注,也是一件非常困难的事情。推荐系统就 是解决这一矛盾的重要工具。推荐系统的任务就是联系用户和信息,一方面帮助用户发现对自己 有价值的信息,另一方面让信息能够展现在对它感兴趣的用户面前,从而实现信息消费者和信息 生产者的双赢。\n\n<!--more-->\n\n随着互联网规模的不断扩大,分类目录网站也只能覆盖少量的热门网 站,越来越不能满足用户的需求。因此,搜索引擎诞生了。以谷歌为代表的搜索引擎可以让用户 通过搜索关键词找到自己需要的信息。但是,搜索引擎需要用户主动提供准确的关键词来寻找信 息,因此不能解决用户的很多其他需求,比如**当用户无法找到准确描述自己需求的关键词时**,搜 索引擎就无能为力了。和搜索引擎一样,推荐系统也是一种帮助用户快速发现有用信息的工具。 和搜索引擎不同的是,推荐系统不需要用户提供明确的需求,而是通过分析用户的历史行为给用 户的兴趣建模,从而主动给用户推荐能够满足他们兴趣和需求的信息。因此,从某种意义上说, 推荐系统和搜索引擎对于用户来说是两个互补的工具。搜索引擎满足了用户有明确目的时的主动 查找需求,而推荐系统能够在用户没有明确目的的时候帮助他们发现感兴趣的新内容。\n\n## 问题\n\n从物品的角度出发，推荐系统可以更好地发掘物品的长尾（long tail）。美国《连线》杂志主编Chris Anderson在2004年发表了“The Long Tail”（长尾）一文并于2006年出版了《长尾理论》一书。该书指出，**传统的80/20原则（80%的销售额来自于20%的热门品牌）在互联网的加入下会受到挑战**。互联网条件下，由于货架成本极端低廉，电子商务网站往往能出售比传统零售店更多的商品。虽然这些商品绝大多数都不热门，但与传统零售业相比，这些不热门的商品数量极其庞大，因此这些长尾商品的总销售额将是一个不可小觑的数字，也许会超过热门商品（即主流商品）带来的销售额。**主流商品往往代表了绝大多数用户的需求，而长尾商品往往代表了一小部分用户的个性化需求。**因此，**如果要通过发掘长尾提高销售额，就必须充分研究用户的兴趣，而这正是个性化推荐系统主要解决的问题**。推荐系统通过发掘用户的行为，找到用户的个性化需求，从而将长尾商品准确地推荐给需要它的用户，帮助用户发现那些他们感兴趣但很难发现的商品。\n\n\n\n## 技术栈\n","slug":"推荐系统实战-读书笔记","published":1,"updated":"2018-03-30T05:47:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9et001y91wql1p7mow9","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>信息消费者,如何从大量信息中找到自己感兴趣的信息是一件非常困难的事情;作为信息生产者, 如何让自己生产的信息脱颖而出,受到广大用户的关注,也是一件非常困难的事情。推荐系统就 是解决这一矛盾的重要工具。推荐系统的任务就是联系用户和信息,一方面帮助用户发现对自己 有价值的信息,另一方面让信息能够展现在对它感兴趣的用户面前,从而实现信息消费者和信息 生产者的双赢。</p>\n<a id=\"more\"></a>\n<p>随着互联网规模的不断扩大,分类目录网站也只能覆盖少量的热门网 站,越来越不能满足用户的需求。因此,搜索引擎诞生了。以谷歌为代表的搜索引擎可以让用户 通过搜索关键词找到自己需要的信息。但是,搜索引擎需要用户主动提供准确的关键词来寻找信 息,因此不能解决用户的很多其他需求,比如<strong>当用户无法找到准确描述自己需求的关键词时</strong>,搜 索引擎就无能为力了。和搜索引擎一样,推荐系统也是一种帮助用户快速发现有用信息的工具。 和搜索引擎不同的是,推荐系统不需要用户提供明确的需求,而是通过分析用户的历史行为给用 户的兴趣建模,从而主动给用户推荐能够满足他们兴趣和需求的信息。因此,从某种意义上说, 推荐系统和搜索引擎对于用户来说是两个互补的工具。搜索引擎满足了用户有明确目的时的主动 查找需求,而推荐系统能够在用户没有明确目的的时候帮助他们发现感兴趣的新内容。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>从物品的角度出发，推荐系统可以更好地发掘物品的长尾（long tail）。美国《连线》杂志主编Chris Anderson在2004年发表了“The Long Tail”（长尾）一文并于2006年出版了《长尾理论》一书。该书指出，<strong>传统的80/20原则（80%的销售额来自于20%的热门品牌）在互联网的加入下会受到挑战</strong>。互联网条件下，由于货架成本极端低廉，电子商务网站往往能出售比传统零售店更多的商品。虽然这些商品绝大多数都不热门，但与传统零售业相比，这些不热门的商品数量极其庞大，因此这些长尾商品的总销售额将是一个不可小觑的数字，也许会超过热门商品（即主流商品）带来的销售额。<strong>主流商品往往代表了绝大多数用户的需求，而长尾商品往往代表了一小部分用户的个性化需求。</strong>因此，<strong>如果要通过发掘长尾提高销售额，就必须充分研究用户的兴趣，而这正是个性化推荐系统主要解决的问题</strong>。推荐系统通过发掘用户的行为，找到用户的个性化需求，从而将长尾商品准确地推荐给需要它的用户，帮助用户发现那些他们感兴趣但很难发现的商品。</p>\n<h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2>","site":{"data":{}},"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>信息消费者,如何从大量信息中找到自己感兴趣的信息是一件非常困难的事情;作为信息生产者, 如何让自己生产的信息脱颖而出,受到广大用户的关注,也是一件非常困难的事情。推荐系统就 是解决这一矛盾的重要工具。推荐系统的任务就是联系用户和信息,一方面帮助用户发现对自己 有价值的信息,另一方面让信息能够展现在对它感兴趣的用户面前,从而实现信息消费者和信息 生产者的双赢。</p>","more":"<p>随着互联网规模的不断扩大,分类目录网站也只能覆盖少量的热门网 站,越来越不能满足用户的需求。因此,搜索引擎诞生了。以谷歌为代表的搜索引擎可以让用户 通过搜索关键词找到自己需要的信息。但是,搜索引擎需要用户主动提供准确的关键词来寻找信 息,因此不能解决用户的很多其他需求,比如<strong>当用户无法找到准确描述自己需求的关键词时</strong>,搜 索引擎就无能为力了。和搜索引擎一样,推荐系统也是一种帮助用户快速发现有用信息的工具。 和搜索引擎不同的是,推荐系统不需要用户提供明确的需求,而是通过分析用户的历史行为给用 户的兴趣建模,从而主动给用户推荐能够满足他们兴趣和需求的信息。因此,从某种意义上说, 推荐系统和搜索引擎对于用户来说是两个互补的工具。搜索引擎满足了用户有明确目的时的主动 查找需求,而推荐系统能够在用户没有明确目的的时候帮助他们发现感兴趣的新内容。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>从物品的角度出发，推荐系统可以更好地发掘物品的长尾（long tail）。美国《连线》杂志主编Chris Anderson在2004年发表了“The Long Tail”（长尾）一文并于2006年出版了《长尾理论》一书。该书指出，<strong>传统的80/20原则（80%的销售额来自于20%的热门品牌）在互联网的加入下会受到挑战</strong>。互联网条件下，由于货架成本极端低廉，电子商务网站往往能出售比传统零售店更多的商品。虽然这些商品绝大多数都不热门，但与传统零售业相比，这些不热门的商品数量极其庞大，因此这些长尾商品的总销售额将是一个不可小觑的数字，也许会超过热门商品（即主流商品）带来的销售额。<strong>主流商品往往代表了绝大多数用户的需求，而长尾商品往往代表了一小部分用户的个性化需求。</strong>因此，<strong>如果要通过发掘长尾提高销售额，就必须充分研究用户的兴趣，而这正是个性化推荐系统主要解决的问题</strong>。推荐系统通过发掘用户的行为，找到用户的个性化需求，从而将长尾商品准确地推荐给需要它的用户，帮助用户发现那些他们感兴趣但很难发现的商品。</p>\n<h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2>"},{"uuid":"95cab3b0-30db-11e7-800e-19f3936562a1","title":"面向对象设计的SOLID原则","date":"2017-05-04T15:08:52.000Z","_content":"\n```\nS.O.L.I.D是面向对象设计和编程(OOD&OOP)中几个重要编码原则(Programming Priciple)的首字母缩写。\n```\n\n","source":"_posts/面向对象设计的SOLID原则.md","raw":"---\nuuid: 95cab3b0-30db-11e7-800e-19f3936562a1\ntitle: 面向对象设计的SOLID原则\ndate: 2017-05-04 23:08:52\ntags:\n---\n\n```\nS.O.L.I.D是面向对象设计和编程(OOD&OOP)中几个重要编码原则(Programming Priciple)的首字母缩写。\n```\n\n","slug":"面向对象设计的SOLID原则","published":1,"updated":"2017-08-15T02:57:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9ev002091wqvfoicxk7","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">S.O.L.I.D是面向对象设计和编程(OOD&amp;OOP)中几个重要编码原则(Programming Priciple)的首字母缩写。</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">S.O.L.I.D是面向对象设计和编程(OOD&amp;OOP)中几个重要编码原则(Programming Priciple)的首字母缩写。</div></pre></td></tr></table></figure>\n"},{"title":"systemctl","date":"2018-05-21T01:42:13.000Z","_content":"\n1、systemctl是RHEL 7 的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。可以使用它永久性或只在当前会话中启用/禁用服务。\n\nsystemctl可以列出正在运行的服务状态\n\nsystemd-cgls以树形列出正在运行的进程，它可以递归显示控制组内容。如图：\n\n\n2、如何启动/关闭、启用/禁用服务？\n\n启动一个服务：systemctl start postfix.service\n关闭一个服务：systemctl stop postfix.service\n重启一个服务：systemctl restart postfix.service\n显示一个服务的状态：systemctl status postfix.service\n在开机时启用一个服务：systemctl enable postfix.service\n在开机时禁用一个服务：systemctl disable postfix.service\n查看服务是否开机启动：systemctl is-enabled postfix.service\n查看已启动的服务列表：systemctl list-unit-files|grep enabled\n查看启动失败的服务列表：systemctl --failed\n\nPS：使用命令 systemctl is-enabled postfix.service 得到的值可以是enable、disable或static，这里的 static 它是指对应的 Unit 文件中没有定义[Install]区域，因此无法配置为开机启动服务。 \n\n说明：启用服务就是在当前“runlevel”的配置文件目录/etc/systemd/system/multi-user.target.wants/里，建立/usr/lib/systemd/system里面对应服务配置文件的软链接；禁用服务就是删除此软链接，添加服务就是添加软连接。\n\n\n\n\n\n","source":"_posts/systemctl.md","raw":"---\ntitle: systemctl\ndate: 2018-05-21 09:42:13\ntags: systemctl\ncategories: 运维\n---\n\n1、systemctl是RHEL 7 的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。可以使用它永久性或只在当前会话中启用/禁用服务。\n\nsystemctl可以列出正在运行的服务状态\n\nsystemd-cgls以树形列出正在运行的进程，它可以递归显示控制组内容。如图：\n\n\n2、如何启动/关闭、启用/禁用服务？\n\n启动一个服务：systemctl start postfix.service\n关闭一个服务：systemctl stop postfix.service\n重启一个服务：systemctl restart postfix.service\n显示一个服务的状态：systemctl status postfix.service\n在开机时启用一个服务：systemctl enable postfix.service\n在开机时禁用一个服务：systemctl disable postfix.service\n查看服务是否开机启动：systemctl is-enabled postfix.service\n查看已启动的服务列表：systemctl list-unit-files|grep enabled\n查看启动失败的服务列表：systemctl --failed\n\nPS：使用命令 systemctl is-enabled postfix.service 得到的值可以是enable、disable或static，这里的 static 它是指对应的 Unit 文件中没有定义[Install]区域，因此无法配置为开机启动服务。 \n\n说明：启用服务就是在当前“runlevel”的配置文件目录/etc/systemd/system/multi-user.target.wants/里，建立/usr/lib/systemd/system里面对应服务配置文件的软链接；禁用服务就是删除此软链接，添加服务就是添加软连接。\n\n\n\n\n\n","slug":"systemctl","published":1,"updated":"2018-05-21T01:43:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji2sk9f0002391wqjtt84fyp","content":"<p>1、systemctl是RHEL 7 的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。可以使用它永久性或只在当前会话中启用/禁用服务。</p>\n<p>systemctl可以列出正在运行的服务状态</p>\n<p>systemd-cgls以树形列出正在运行的进程，它可以递归显示控制组内容。如图：</p>\n<p>2、如何启动/关闭、启用/禁用服务？</p>\n<p>启动一个服务：systemctl start postfix.service<br>关闭一个服务：systemctl stop postfix.service<br>重启一个服务：systemctl restart postfix.service<br>显示一个服务的状态：systemctl status postfix.service<br>在开机时启用一个服务：systemctl enable postfix.service<br>在开机时禁用一个服务：systemctl disable postfix.service<br>查看服务是否开机启动：systemctl is-enabled postfix.service<br>查看已启动的服务列表：systemctl list-unit-files|grep enabled<br>查看启动失败的服务列表：systemctl –failed</p>\n<p>PS：使用命令 systemctl is-enabled postfix.service 得到的值可以是enable、disable或static，这里的 static 它是指对应的 Unit 文件中没有定义[Install]区域，因此无法配置为开机启动服务。 </p>\n<p>说明：启用服务就是在当前“runlevel”的配置文件目录/etc/systemd/system/multi-user.target.wants/里，建立/usr/lib/systemd/system里面对应服务配置文件的软链接；禁用服务就是删除此软链接，添加服务就是添加软连接。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、systemctl是RHEL 7 的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。可以使用它永久性或只在当前会话中启用/禁用服务。</p>\n<p>systemctl可以列出正在运行的服务状态</p>\n<p>systemd-cgls以树形列出正在运行的进程，它可以递归显示控制组内容。如图：</p>\n<p>2、如何启动/关闭、启用/禁用服务？</p>\n<p>启动一个服务：systemctl start postfix.service<br>关闭一个服务：systemctl stop postfix.service<br>重启一个服务：systemctl restart postfix.service<br>显示一个服务的状态：systemctl status postfix.service<br>在开机时启用一个服务：systemctl enable postfix.service<br>在开机时禁用一个服务：systemctl disable postfix.service<br>查看服务是否开机启动：systemctl is-enabled postfix.service<br>查看已启动的服务列表：systemctl list-unit-files|grep enabled<br>查看启动失败的服务列表：systemctl –failed</p>\n<p>PS：使用命令 systemctl is-enabled postfix.service 得到的值可以是enable、disable或static，这里的 static 它是指对应的 Unit 文件中没有定义[Install]区域，因此无法配置为开机启动服务。 </p>\n<p>说明：启用服务就是在当前“runlevel”的配置文件目录/etc/systemd/system/multi-user.target.wants/里，建立/usr/lib/systemd/system里面对应服务配置文件的软链接；禁用服务就是删除此软链接，添加服务就是添加软连接。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cji2sk9cn000691wqh6hkfvr0","category_id":"cji2sk9cu000891wqf6r428dy","_id":"cji2sk9d3000i91wqu9ho6onr"},{"post_id":"cji2sk9cp000791wqvgnbx7k1","category_id":"cji2sk9d0000e91wqf9y9oo01","_id":"cji2sk9dr000p91wqlc9gjbsu"},{"post_id":"cji2sk9cv000991wqkbi6beek","category_id":"cji2sk9d0000e91wqf9y9oo01","_id":"cji2sk9dx000v91wqit99kgkb"},{"post_id":"cji2sk9dt000s91wqtsxbd452","category_id":"cji2sk9d0000e91wqf9y9oo01","_id":"cji2sk9dz001091wqklvkgduo"},{"post_id":"cji2sk9cz000d91wq0dsautrk","category_id":"cji2sk9dr000q91wqkifarfvc","_id":"cji2sk9e0001391wqejj4i9hn"},{"post_id":"cji2sk9d4000j91wqvfr9oxp5","category_id":"cji2sk9dx000w91wq9bfs3k0c","_id":"cji2sk9e7001a91wqj2klzi84"},{"post_id":"cji2sk9e1001791wqbh3bnrql","category_id":"cji2sk9d0000e91wqf9y9oo01","_id":"cji2sk9e9001e91wql42yjr2q"},{"post_id":"cji2sk9dw000u91wqznkfzenu","category_id":"cji2sk9dx000w91wq9bfs3k0c","_id":"cji2sk9eb001h91wq4wxdq1f4"},{"post_id":"cji2sk9ej001q91wqc2opgggz","category_id":"cji2sk9d0000e91wqf9y9oo01","_id":"cji2sk9eq001u91wqwvn4p22c"},{"post_id":"cji2sk9f0002391wqjtt84fyp","category_id":"cji2sk9d0000e91wqf9y9oo01","_id":"cji2sk9f3002791wq1zqgjwzl"},{"post_id":"cji2sk9et001y91wql1p7mow9","category_id":"cji2sk9ez002291wqo8srtxq8","_id":"cji2sk9f4002891wqqftsfdjj"}],"PostTag":[{"post_id":"cji2sk9c7000191wqt18dwoer","tag_id":"cji2sk9cj000591wqbk7k14x1","_id":"cji2sk9cx000b91wqvhujq1rk"},{"post_id":"cji2sk9cg000391wqsovj9d03","tag_id":"cji2sk9cw000a91wqptkiiscy","_id":"cji2sk9d3000h91wqoqvt0tdg"},{"post_id":"cji2sk9cn000691wqh6hkfvr0","tag_id":"cji2sk9d0000f91wqgvqgqg9e","_id":"cji2sk9dn000n91wqwscmno3r"},{"post_id":"cji2sk9cp000791wqvgnbx7k1","tag_id":"cji2sk9d0000f91wqgvqgqg9e","_id":"cji2sk9dv000t91wqvb9oz44k"},{"post_id":"cji2sk9dt000s91wqtsxbd452","tag_id":"cji2sk9d0000f91wqgvqgqg9e","_id":"cji2sk9dx000x91wqgr9496hr"},{"post_id":"cji2sk9cv000991wqkbi6beek","tag_id":"cji2sk9ds000r91wqi8jv8q2x","_id":"cji2sk9dz001191wq7zyxhoix"},{"post_id":"cji2sk9dy000z91wq9rm1br9s","tag_id":"cji2sk9cw000a91wqptkiiscy","_id":"cji2sk9e0001491wqgl1dhrx7"},{"post_id":"cji2sk9cx000c91wqfnldeaxf","tag_id":"cji2sk9d0000f91wqgvqgqg9e","_id":"cji2sk9e3001891wq3ie37dcg"},{"post_id":"cji2sk9e4001991wq5atibm2f","tag_id":"cji2sk9cw000a91wqptkiiscy","_id":"cji2sk9e9001d91wq02zed4zr"},{"post_id":"cji2sk9cz000d91wq0dsautrk","tag_id":"cji2sk9e1001691wqgsv7ssh4","_id":"cji2sk9eb001g91wq4kbbzqxz"},{"post_id":"cji2sk9d4000j91wqvfr9oxp5","tag_id":"cji2sk9e9001c91wq0sg0kq6y","_id":"cji2sk9ee001l91wqzl7ytiea"},{"post_id":"cji2sk9da000m91wqel4518aa","tag_id":"cji2sk9ed001j91wq97coy4q5","_id":"cji2sk9ej001p91wqqmku94ap"},{"post_id":"cji2sk9dw000u91wqznkfzenu","tag_id":"cji2sk9eg001n91wqgoj70l3o","_id":"cji2sk9et001x91wqvvjic0vj"},{"post_id":"cji2sk9dw000u91wqznkfzenu","tag_id":"cji2sk9el001r91wq2fuq2f1c","_id":"cji2sk9ev001z91wqjacsv690"},{"post_id":"cji2sk9dz001291wqf6bidlr5","tag_id":"cji2sk9et001w91wqkml88qsi","_id":"cji2sk9f1002491wq6x8ywjsx"},{"post_id":"cji2sk9e1001791wqbh3bnrql","tag_id":"cji2sk9ez002191wqfk9gfkx6","_id":"cji2sk9f3002691wqqir5jd09"},{"post_id":"cji2sk9e7001b91wqs9d8pfnu","tag_id":"cji2sk9f3002591wq0rsgp7m8","_id":"cji2sk9f4002a91wqmd67k3o3"},{"post_id":"cji2sk9ea001f91wqegpmysxe","tag_id":"cji2sk9f3002591wq0rsgp7m8","_id":"cji2sk9f4002c91wqzxcu2ggm"},{"post_id":"cji2sk9ec001i91wq058fqvg0","tag_id":"cji2sk9f4002b91wq7pca7emu","_id":"cji2sk9f5002e91wq2ykq7wzn"},{"post_id":"cji2sk9ed001k91wq9zg6cymz","tag_id":"cji2sk9f3002591wq0rsgp7m8","_id":"cji2sk9f5002g91wqujivz6sg"},{"post_id":"cji2sk9ee001m91wq26tyre6w","tag_id":"cji2sk9f3002591wq0rsgp7m8","_id":"cji2sk9f6002i91wqjbvhshcq"},{"post_id":"cji2sk9eh001o91wqwmu3g4cg","tag_id":"cji2sk9f5002h91wqluem78pw","_id":"cji2sk9f6002k91wqvm4j4465"},{"post_id":"cji2sk9ej001q91wqc2opgggz","tag_id":"cji2sk9f6002j91wqf4z4uf2k","_id":"cji2sk9f7002m91wqfc92tm1m"},{"post_id":"cji2sk9el001s91wqpibzh2vv","tag_id":"cji2sk9f6002l91wqjoywap2h","_id":"cji2sk9f7002o91wq5xc2imue"},{"post_id":"cji2sk9eq001v91wqto0w7mq0","tag_id":"cji2sk9f7002n91wq556aa7ec","_id":"cji2sk9f7002q91wq9x0rj8h9"},{"post_id":"cji2sk9et001y91wql1p7mow9","tag_id":"cji2sk9f7002p91wq5tihc93l","_id":"cji2sk9f8002s91wqu1kqix83"},{"post_id":"cji2sk9f0002391wqjtt84fyp","tag_id":"cji2sk9f7002r91wqx4ro6q5a","_id":"cji2sk9f8002t91wqbr6nqs2i"}],"Tag":[{"name":"content","_id":"cji2sk9cj000591wqbk7k14x1"},{"name":"note","_id":"cji2sk9cw000a91wqptkiiscy"},{"name":"codis","_id":"cji2sk9d0000f91wqgvqgqg9e"},{"name":"docker","_id":"cji2sk9ds000r91wqi8jv8q2x"},{"name":"cap","_id":"cji2sk9e1001691wqgsv7ssh4"},{"name":"git","_id":"cji2sk9e9001c91wq0sg0kq6y"},{"name":"mysql","_id":"cji2sk9ed001j91wq97coy4q5"},{"name":"iterm","_id":"cji2sk9eg001n91wqgoj70l3o"},{"name":"lrzsz","_id":"cji2sk9el001r91wq2fuq2f1c"},{"name":"blog","_id":"cji2sk9et001w91wqkml88qsi"},{"name":"kubernetes","_id":"cji2sk9ez002191wqfk9gfkx6"},{"name":"php","_id":"cji2sk9f3002591wq0rsgp7m8"},{"name":"翻译","_id":"cji2sk9f4002b91wq7pca7emu"},{"name":"nosql","_id":"cji2sk9f5002h91wqluem78pw"},{"name":"crontab","_id":"cji2sk9f6002j91wqf4z4uf2k"},{"name":"rpm","_id":"cji2sk9f6002l91wqjoywap2h"},{"name":"Design pattern","_id":"cji2sk9f7002n91wq556aa7ec"},{"name":"推荐系统","_id":"cji2sk9f7002p91wq5tihc93l"},{"name":"systemctl","_id":"cji2sk9f7002r91wqx4ro6q5a"}]}}